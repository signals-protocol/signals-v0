diff --git a/.github/workflows/website.yml b/.github/workflows/website.yml
new file mode 100644
index 0000000..015193a
--- /dev/null
+++ b/.github/workflows/website.yml
@@ -0,0 +1,74 @@
+name: Docs
+
+on:
+  push:
+    branches: [main]
+  pull_request:
+
+jobs:
+  build:
+    runs-on: ubuntu-latest
+    env:
+      NODE_ENV: production
+      # Docusaurus가 리포 루트가 아닌 /website에 있을 때:
+      WORKDIR: website
+    steps:
+      - uses: actions/checkout@v4
+
+      - uses: actions/setup-node@v4
+        with:
+          node-version: 20
+          cache: "npm"
+          cache-dependency-path: |
+            contracts/package-lock.json
+            clmsr-sdk/package-lock.json
+            website/package-lock.json
+
+      # 1) 컨트랙트 레퍼런스 생성
+      - name: Build Solidity docs
+        working-directory: contracts
+        run: |
+          npm ci
+          npx hardhat docgen
+
+      # 2) TS SDK 레퍼런스(빌드 시 플러그인이 실행되지만,
+      #    필요시 사전 타입체크/빌드)
+      - name: Prepare SDK
+        working-directory: clmsr-sdk
+        run: |
+          npm ci
+          npm run build --if-present
+
+      # 3) OpenAPI → MDX 생성 (추후 설정 시 사용)
+      # - name: Generate OpenAPI MDX
+      #   working-directory: website
+      #   run: |
+      #     npm ci
+      #     npx docusaurus gen-api-docs all
+
+      # 4) Docusaurus 빌드
+      - name: Build site
+        working-directory: website
+        run: npm ci && npm run build
+
+      # 5) Pages 아티팩트 업로드
+      - name: Upload artifact
+        uses: actions/upload-pages-artifact@v3
+        with:
+          path: website/build
+
+  deploy:
+    needs: build
+    permissions:
+      pages: write
+      id-token: write
+    environment:
+      name: github-pages
+      url: ${{ steps.deployment.outputs.page_url }}
+    runs-on: ubuntu-latest
+    steps:
+      - name: Deploy to GitHub Pages
+        id: deployment
+        uses: actions/deploy-pages@v4
+
+
diff --git a/.gitignore b/.gitignore
index 4655761..085ce6e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -75,3 +75,5 @@ beta-addresses.json
 combine_all_files.sh
 complete_codebase.md
 coverage.json
+
+verification/
diff --git a/.openzeppelin/backups/citrea-dev-2025-08-22T02-16-16-768Z.json b/.openzeppelin/backups/citrea-dev-2025-08-22T02-16-16-768Z.json
new file mode 100644
index 0000000..d74b5d3
--- /dev/null
+++ b/.openzeppelin/backups/citrea-dev-2025-08-22T02-16-16-768Z.json
@@ -0,0 +1,9930 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0x971F9bcE130743BB3eFb37aeAC2050cD44d7579a",
+      "kind": "uups"
+    },
+    {
+      "address": "0xe163497F304ad4b7482C84Bc82079d46050c6e93",
+      "kind": "uups"
+    },
+    {
+      "address": "0x59eb810fa5e7c0646902C29D9e8bfdaDf25Ce274",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x96c9f11d3b324e240f8220cf6A1c23BAF7b12EDC",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)9869_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)10410_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)9869_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x96c9f11d3b324e240f8220cf6A1c23BAF7b12EDC",
+        "0xB111E064b058e15553d44eeAE513cbdB4afef2CE",
+        "0x4Cf39D9b7566EFDaa6D8979fD08abFEfA99142AF",
+        "0x77CF00acf6310BAcf3123fA23cE997F86824c3b5",
+        "0xA30DB12A3406a8f4467B66F8A9A98aAB30fC5679",
+        "0x904456004A29D51961f5064c1d6BeF3c7d702683",
+        "0x4B9b407c50051809a787deFCC5b9B256B67C24a4",
+        "0x7C2292D6B5fB59Ca84b11008412A00F2B91580aE",
+        "0xF109651f9d6530BfC792bBcd927d91f3FdAfaf6B",
+        "0x051143178A7cc57aeCeA752BACbe8F2e7A65AE98",
+        "0x122163ccCa010FD20B886B5D3dB344Db2e7067cb",
+        "0xDBb709Cc9bd94e9A9ad49663c0D38bD812cEE46F",
+        "0xebf2e983Ed22dF26d76aD22986Fb41f17e9E6ACD",
+        "0xa674EC08Dc010deD65438b109ac941658a36Bfc3",
+        "0x1A0754ddF207419600C65B92F8c787CF8eF60d4D",
+        "0x074144723A9025372C38097F995f86ff54A368fa",
+        "0xD2c9782B292e6bC0a06f945da9C06A7519abF40E"
+      ]
+    },
+    "5afc09935cd5973edabb8c8db6910d478d03c6379ca2ae9eb6e651a37f84a76b": {
+      "address": "0x22c727C7C67478247b3B6c68a0020745FDD8eab1",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0x8dc82fe1Bb0A384c06A77C57c0306786b022e6B8",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x8dc82fe1Bb0A384c06A77C57c0306786b022e6B8",
+        "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+        "0xFF0964e09504302b09B304B9224C12ae0b1F8721",
+        "0xC9eB4CF62372aee87B754D28Af8F3256BC4cc104",
+        "0xE4000eba361bc1D1048996f0AaBaa5bbFFA15C0A",
+        "0x3b3e01DE4764313eEDb98130AB01c9c30EE25c4C",
+        "0x224eEf0c7eCFE666749B49A25e52326Aebec8767"
+      ]
+    },
+    "ceb83a22503b29851c8a9284a60f99527a074c3c6739d61bc070d216cfcb9471": {
+      "address": "0xC709D77cC05342036D150e829E0AC1f8e7d1820E",
+      "txHash": "0x96fd4c000290fa623c57738bcc22f3ee5bd9db25adb469fe85c48ed4586fd362",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xC709D77cC05342036D150e829E0AC1f8e7d1820E"
+      ]
+    },
+    "e20c7ca1144f5ef6b2c1e718b4771ab7808c98aea10a8d06864161ae688fa9f8": {
+      "address": "0xbc60210b6585913607F910aC35370697bE966a6a",
+      "txHash": "0x183758453e2f52d4bb95616ffd0f8641a228d1be82d4441f1c0eb675f7aa9734",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xbc60210b6585913607F910aC35370697bE966a6a"
+      ]
+    },
+    "aca8ac8a0023e700c58c0542ab3ed70c26745dd680dd2ebc699804438e606f5c": {
+      "address": "0xb5D724B761C118188d3FDDA3Dad1fcf5226191e3",
+      "txHash": "0x509c4d0c151c8bb6fac7203aa9e9afe2ae46e034f67ddf7ae075121ddd5b546a",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xb5D724B761C118188d3FDDA3Dad1fcf5226191e3"
+      ]
+    },
+    "09ef9dc420bd7dd0de03354d356f90131060675eced44eaffa9b300a88fd036b": {
+      "address": "0x96c9f11d3b324e240f8220cf6A1c23BAF7b12EDC",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24473_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24473_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24473_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x96c9f11d3b324e240f8220cf6A1c23BAF7b12EDC"
+      ]
+    },
+    "ce22cefe5c4e1072928cf3ff8fde030425c55fb333d8b03a8c6127458bcc34cf": {
+      "address": "0x8dc82fe1Bb0A384c06A77C57c0306786b022e6B8",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "a330952b57178d29fa4297127c626948384c6e5a895c56701c89d3eba388df6c": {
+      "address": "0x947200950963d1dec7D4A6295AB9A1A1B6B6B549",
+      "txHash": "0xaaea7cfde9c0d1c97df3580e5b8f8f238449c270faa6d7566e12d15ca5781d00",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24636",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24088_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25192_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24636": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24088_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25192_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25177_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24088_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25177_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25192_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25177_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x947200950963d1dec7D4A6295AB9A1A1B6B6B549"
+      ]
+    },
+    "454e304979ebb208063ef97150a1c8e6ba1c2c555ed3c494d848c0022d5dca18": {
+      "address": "0x8dc82fe1Bb0A384c06A77C57c0306786b022e6B8",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "88cbb43610b4eae7fc56950961248180425e56c7df2c6156d5d280d0f9a0034d": {
+      "address": "0x6CF027a98cd8d196EB56D5925AfcF5519f5a922F",
+      "txHash": "0x05049fdd4a41b31998f216bc9e595d65498824a6106c4cbe4b428bc6fad75f68",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24636",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24088_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25192_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24636": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24088_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25192_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25177_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24088_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25177_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25192_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25177_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x6CF027a98cd8d196EB56D5925AfcF5519f5a922F"
+      ]
+    },
+    "e1a2b1ffa400fe25f33b8dc1573375d61eb3a207cc23f472a4ba8ed63d2a7467": {
+      "address": "0x96c9f11d3b324e240f8220cf6A1c23BAF7b12EDC",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24482_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24482_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24482_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x96c9f11d3b324e240f8220cf6A1c23BAF7b12EDC"
+      ]
+    },
+    "eeb2211d9546687198de5810f215d2a85e0c849f248f8992d004d208bf1b23a6": {
+      "address": "0x8dc82fe1Bb0A384c06A77C57c0306786b022e6B8",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x8dc82fe1Bb0A384c06A77C57c0306786b022e6B8"
+      ]
+    },
+    "296a20674ca16349feb79d8239b8a49560f3dd083b16d6b6f28fd4adc3ab1679": {
+      "address": "0x97216e95df848D27B1f210719A90ef635be3b4b1",
+      "txHash": "0x6a43c0c4d49970776c68432c1f60e2c1711f9abb7e7f917a2917eb54789c7a71",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24645",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24097_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25201_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24645": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24097_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25201_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25186_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24097_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25186_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25201_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25186_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x97216e95df848D27B1f210719A90ef635be3b4b1"
+      ]
+    },
+    "9f622d3660fc2359c541e3cf9f186059a46f6de69fa34a665d3180f789e46ff9": {
+      "address": "0xb7833326A1b19bFc86a6849B6dB979ce6d1dc3f3",
+      "txHash": "0x193193c3fd3e621931e68c3e4c934a0f4be525014ab596a78c8bcae6bcfb56a5",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24645",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24097_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25201_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24645": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24097_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25201_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25186_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24097_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25186_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25201_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25186_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xb7833326A1b19bFc86a6849B6dB979ce6d1dc3f3"
+      ]
+    },
+    "6341f15b3b158e8d037df7acc0989f37237a57bb7039f04e5a3125546ad5aa61": {
+      "address": "0xBDb1D352F1468907238eAD27F9fAc4CCE37ABe54",
+      "txHash": "0xdf4b17d6d1c69e5dfc25923944b0132b90cb31039b07fbe3d12328b714ea6128",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24645",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24097_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25201_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24645": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24097_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25201_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25186_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24097_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25186_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25201_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25186_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xBDb1D352F1468907238eAD27F9fAc4CCE37ABe54"
+      ]
+    },
+    "77a86fddda9d376f129976f0063bd10c8764228c6f60bded98baed1e6d88032d": {
+      "address": "0xBDb1D352F1468907238eAD27F9fAc4CCE37ABe54",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "1842f73b8d42e9b76d3e39f258e5953b5ad16d33f44255c10c92ecae3ce057eb": {
+      "address": "0x4e0740a45DB3C78e2a5c471EBF1494cc5E773d9e",
+      "txHash": "0x860647d56df096d6a778106d646b0fdc0dbaca83f5ea56a1e7a0c9cefe113900",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x4e0740a45DB3C78e2a5c471EBF1494cc5E773d9e",
+        "0xBDb1D352F1468907238eAD27F9fAc4CCE37ABe54"
+      ]
+    },
+    "126dce309e476a5ea22dad8badde92247de0d1b39d8d0218924268fd9d8e0a26": {
+      "address": "0xBDb1D352F1468907238eAD27F9fAc4CCE37ABe54",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "1cb8db73f284153b5a6069f3fdd31496829317c5a008d1a8b2c82da1f3aae032": {
+      "address": "0x9fCBdAF0340a750845aF05254359911A0b8325D9",
+      "txHash": "0x2516cdb7599753253656d685740fc16529f6915cf95447a685208bec842310d6",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x9fCBdAF0340a750845aF05254359911A0b8325D9",
+        "0xbBf5703b1755B462FC5FC7319A1d3ACA4E1988Bc"
+      ]
+    },
+    "09e8d9850886c54145bd2d920c9afe2586391cd5231b6874d98b588126bd2d06": {
+      "address": "0xbBf5703b1755B462FC5FC7319A1d3ACA4E1988Bc",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "8f7109b799f92d3a674c664924cb095a9d0378e1e0184166d4f94c8ca26c5c87": {
+      "address": "0xe7c07c260CFE023a77Ea58771A0f03EEFA92cb53",
+      "txHash": "0xc0d41087af5fcbc839a395f67c5eccb4214b82d55ec272836f6af8a9d4237b0c",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xe7c07c260CFE023a77Ea58771A0f03EEFA92cb53",
+        "0x2149accB5F68cFf77765f034868da194033aA514"
+      ]
+    },
+    "fe20d5f3eca05760820c3f55d7492cc596c8ef9ba32caab205d53bb9357a0078": {
+      "address": "0x0444016407E13066a0D0820C77Dd94EDD5CEE93e",
+      "txHash": "0x88b2463d06eafea6d61a44f9f4092a352d78855af7ad927e3a02ca0ab5e5284e",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x0444016407E13066a0D0820C77Dd94EDD5CEE93e",
+        "0xc0d8afEBc232bd3e9521D77EAFe5Bd4f1a766417"
+      ]
+    },
+    "9e9ce99da1098b2cce27a45c7fa4f50eb7330f415000b4ed66368a16f4d28896": {
+      "address": "0xc0d8afEBc232bd3e9521D77EAFe5Bd4f1a766417",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "1a3e6b9f70b792cba87fe4ae585b1f7da36b56991c32e5f09645e87bb0e126d4": {
+      "address": "0xbAfa0D06e7e957597e5db405AFFa757E61883bAA",
+      "txHash": "0xe47f0ad1cf1502e507c4ebdd5a1edefd5e9ef25db5c22e67c02044480321f1bf",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xbAfa0D06e7e957597e5db405AFFa757E61883bAA"
+      ]
+    },
+    "b067151a391bf8b5d0db27351569d4fb94bc3d4442d1f298ff3c31fa8c42e278": {
+      "address": "0xfE47F678a2E661B5dbcC53A1A7D01D55cD3934e5",
+      "txHash": "0x6e62e198cc343f5a67d7a7201d34228f0df109caf8b4113efaacbc2ca0e0193b",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xfE47F678a2E661B5dbcC53A1A7D01D55cD3934e5"
+      ]
+    },
+    "e8c768cea651a888ef1f5431dafcb060ed965ae28442fe87aef0ebc2bb475d42": {
+      "address": "0x0034d9cCbEc7b7681df543f9Fa6a1921aB61265E",
+      "txHash": "0x2a62b4dc2dc07e0e477d44368521e50a17c1b33eea82387ffe76e590e2afbf4e",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x0034d9cCbEc7b7681df543f9Fa6a1921aB61265E"
+      ]
+    },
+    "0dd56d867d4869fbcf3246347b20ba8db629e98f4fd87628bbe2cf4e56599312": {
+      "address": "0xE4c0AeC4092eAC7683107f1e78f45Be0fDE88dfD",
+      "txHash": "0x72d4c7bc70db33a0bf290502eaa9f4a71a2ad4f87f876ad0b3152b4619c165e5",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xE4c0AeC4092eAC7683107f1e78f45Be0fDE88dfD",
+        "0x0034d9cCbEc7b7681df543f9Fa6a1921aB61265E"
+      ]
+    },
+    "1ea722978b3950523a20e61c8c00609ad7b3e9205f37538e2a1b0b510241657e": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
+      "txHash": "0x9b41cdbe67a042a60eaa3f64299cde3fc0ab32a74eeb78ef072d2cf9908e0e7c",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "275c3485dab5384eb84ed6ce89aac7fd9dfdc14c66b146b13d5e7b03a0ddf103": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "92c883436711fd0aa21efa8fa2ec85d63e48e2dfdc0b4efd6f59f4aa75c38596": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-dev-2025-08-22T18-39-01-536Z.json b/.openzeppelin/backups/citrea-dev-2025-08-22T18-39-01-536Z.json
new file mode 100644
index 0000000..b7f33a6
--- /dev/null
+++ b/.openzeppelin/backups/citrea-dev-2025-08-22T18-39-01-536Z.json
@@ -0,0 +1,800 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0x971F9bcE130743BB3eFb37aeAC2050cD44d7579a",
+      "kind": "uups"
+    },
+    {
+      "address": "0xe163497F304ad4b7482C84Bc82079d46050c6e93",
+      "kind": "uups"
+    },
+    {
+      "address": "0x59eb810fa5e7c0646902C29D9e8bfdaDf25Ce274",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "3a3c6d96b47cdefd7e4cb80b3efe3a6c7a6d9fb184b3e2f954ac26b13a7b0dcc": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x6178e97FE629C7BE10c67CDc060E109AF229B68c",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)9869_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)10410_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)9869_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x6178e97FE629C7BE10c67CDc060E109AF229B68c",
+        "0xFad9b208E3f7b64cdD2a9361Eb63c8b8C8Eb8BdD"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-dev-2025-08-26T17-29-34-165Z.json b/.openzeppelin/backups/citrea-dev-2025-08-26T17-29-34-165Z.json
new file mode 100644
index 0000000..3594544
--- /dev/null
+++ b/.openzeppelin/backups/citrea-dev-2025-08-26T17-29-34-165Z.json
@@ -0,0 +1,2312 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0x971F9bcE130743BB3eFb37aeAC2050cD44d7579a",
+      "kind": "uups"
+    },
+    {
+      "address": "0xe163497F304ad4b7482C84Bc82079d46050c6e93",
+      "kind": "uups"
+    },
+    {
+      "address": "0x59eb810fa5e7c0646902C29D9e8bfdaDf25Ce274",
+      "kind": "uups"
+    },
+    {
+      "address": "0xA34bA8dafb3a6B7526b37d8A7C9dda4819A317ee",
+      "txHash": "0x140c962193c84a63cd6fefcec0712acdef6812cfe66c0f67d65af926158b8425",
+      "kind": "uups"
+    },
+    {
+      "address": "0x5839b8074d009BA4F52C639820245b83315173b5",
+      "txHash": "0x718fd201ec5c59eb7d17b4bae4e5144f5a8fde142708296a294129af3f454506",
+      "kind": "uups"
+    },
+    {
+      "address": "0x8002F29071B12a0F322656a39d3C6c8846a24ac2",
+      "txHash": "0xd0567756c1d72440c4ba4e7630b29b8e24cee68f6bab235fa3d496f620b1be43",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "3a3c6d96b47cdefd7e4cb80b3efe3a6c7a6d9fb184b3e2f954ac26b13a7b0dcc": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x6178e97FE629C7BE10c67CDc060E109AF229B68c",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)9869_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)10410_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)9869_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x6178e97FE629C7BE10c67CDc060E109AF229B68c",
+        "0xFad9b208E3f7b64cdD2a9361Eb63c8b8C8Eb8BdD"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "ba01dfe54af3e1b1f0ad74a48fac6babc71467ff23f6ce624818f994df73ca64": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15015",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14453_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15571_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15015": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14453_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15571_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15556_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14453_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15556_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15571_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15556_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "d70cd015f2472a327a7b3c3f51ce82387c6058df566e147f13348f0ec756a97a": {
+      "address": "0xFad9b208E3f7b64cdD2a9361Eb63c8b8C8Eb8BdD",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24738_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24738_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24738_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xFad9b208E3f7b64cdD2a9361Eb63c8b8C8Eb8BdD",
+        "0xC1A353Df0F0701b74501657C9E16EC0e09A74B0c"
+      ]
+    },
+    "9379634d8942428c26234f6cf9663401660e704a50e9547f8a9f926b7618f730": {
+      "address": "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+        "0xbcBC6cac1d7011BF6CD3faBC25f6ecEe719e6210"
+      ]
+    },
+    "002bcecaf0d4bf43c26df43838d37bf1efe4df3653c1c0372c8fb523b77751ad": {
+      "address": "0x5Cd908141036CD72f4080af66688DfD60F5Ac636",
+      "txHash": "0x03edd0dd579c2aae76d2f9825d00dec3a5a1193411afc6a39860a978f7a857c6",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15015",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14453_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15571_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15015": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14453_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15571_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15556_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14453_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15556_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15571_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15556_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c78ac0fe3bdc7af4b55f3a3b54826faed8126f6998ceac379ebe3a7e1d561cf6": {
+      "address": "0xE0E8a766d1101F16baC88Cd148108709A1263bE8",
+      "txHash": "0x9f1449bef2cc0badb0383aae66ea060432f328968d9a51496822d703aa5edd59",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15041",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14473_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15597_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15041": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14473_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15597_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15582_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14473_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "settlementValue",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "8"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "8"
+              }
+            ],
+            "numberOfBytes": "288"
+          },
+          "t_struct(Node)15582_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15597_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15582_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/dev/base.json b/.openzeppelin/backups/citrea-dev-2025-08-26T17-35-00-267Z.json
similarity index 75%
rename from .openzeppelin/dev/base.json
rename to .openzeppelin/backups/citrea-dev-2025-08-26T17-35-00-267Z.json
index eb991f6..b4af9af 100644
--- a/.openzeppelin/dev/base.json
+++ b/.openzeppelin/backups/citrea-dev-2025-08-26T17-35-00-267Z.json
@@ -2,21 +2,373 @@
   "manifestVersion": "3.2",
   "proxies": [
     {
-      "address": "0x21a725A1FF23503fA22c5061297434981190E8c9",
+      "address": "0x971F9bcE130743BB3eFb37aeAC2050cD44d7579a",
       "kind": "uups"
     },
     {
-      "address": "0x894C07d390D7585c5205f2B81b9845e5432282B6",
+      "address": "0xe163497F304ad4b7482C84Bc82079d46050c6e93",
       "kind": "uups"
     },
     {
-      "address": "0x963d372F484F13f375E9637CE67D75C87C9CcF67",
+      "address": "0x59eb810fa5e7c0646902C29D9e8bfdaDf25Ce274",
       "kind": "uups"
     }
   ],
   "impls": {
+    "3a3c6d96b47cdefd7e4cb80b3efe3a6c7a6d9fb184b3e2f954ac26b13a7b0dcc": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
     "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
-      "address": "0x0B110B33C096604465546101DB52c4FcC143FE26",
+      "address": "0x6178e97FE629C7BE10c67CDc060E109AF229B68c",
       "layout": {
         "solcVersion": "0.8.24",
         "storage": [
@@ -25,48 +377,48 @@
             "offset": 0,
             "slot": "0",
             "type": "t_address",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:31"
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
           },
           {
             "label": "_nextId",
             "offset": 0,
             "slot": "1",
             "type": "t_uint256",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:34"
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
           },
           {
             "label": "_totalSupply",
             "offset": 0,
             "slot": "2",
             "type": "t_uint256",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:37"
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
           },
           {
             "label": "_positions",
             "offset": 0,
             "slot": "3",
-            "type": "t_mapping(t_uint256,t_struct(Position)30514_storage)",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:40"
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
           },
           {
             "label": "_ownedTokens",
             "offset": 0,
             "slot": "4",
-            "type": "t_mapping(t_address,t_struct(UintSet)12303_storage)",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:43"
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
           },
           {
             "label": "__gap",
             "offset": 0,
             "slot": "5",
             "type": "t_array(t_uint256)50_storage",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:46"
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
           }
         ],
         "types": {
@@ -194,7 +546,7 @@
             "label": "int256",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_address,t_struct(UintSet)12303_storage)": {
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
             "label": "mapping(address => struct EnumerableSet.UintSet)",
             "numberOfBytes": "32"
           },
@@ -202,12 +554,12 @@
             "label": "mapping(bytes32 => uint256)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Position)30514_storage)": {
-            "label": "mapping(uint256 => struct ICLMSRPositionUpgradeable.Position)",
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
             "numberOfBytes": "32"
           },
-          "t_struct(Position)30514_storage": {
-            "label": "struct ICLMSRPositionUpgradeable.Position",
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
             "members": [
               {
                 "label": "marketId",
@@ -242,7 +594,7 @@
             ],
             "numberOfBytes": "128"
           },
-          "t_struct(Set)11762_storage": {
+          "t_struct(Set)9869_storage": {
             "label": "struct EnumerableSet.Set",
             "members": [
               {
@@ -260,12 +612,12 @@
             ],
             "numberOfBytes": "64"
           },
-          "t_struct(UintSet)12303_storage": {
+          "t_struct(UintSet)10410_storage": {
             "label": "struct EnumerableSet.UintSet",
             "members": [
               {
                 "label": "_inner",
-                "type": "t_struct(Set)11762_storage",
+                "type": "t_struct(Set)9869_storage",
                 "offset": 0,
                 "slot": "0"
               }
@@ -359,63 +711,15 @@
         }
       },
       "allAddresses": [
-        "0x0B110B33C096604465546101DB52c4FcC143FE26"
+        "0x6178e97FE629C7BE10c67CDc060E109AF229B68c",
+        "0xFad9b208E3f7b64cdD2a9361Eb63c8b8C8Eb8BdD"
       ]
     },
-    "94a7ae2302a6f7f5f6b818e0eec478f1960c93281f0f8e37648f912488e8ff82": {
-      "address": "0x479Ab77b0b91782573f1F42bB593533483a165DF",
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
       "layout": {
         "solcVersion": "0.8.24",
-        "storage": [
-          {
-            "label": "paymentToken",
-            "offset": 0,
-            "slot": "0",
-            "type": "t_contract(IERC20)2739",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:69"
-          },
-          {
-            "label": "positionContract",
-            "offset": 0,
-            "slot": "1",
-            "type": "t_contract(ICLMSRPositionUpgradeable)23666",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:72"
-          },
-          {
-            "label": "markets",
-            "offset": 0,
-            "slot": "2",
-            "type": "t_mapping(t_uint256,t_struct(Market)23154_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:77"
-          },
-          {
-            "label": "marketTrees",
-            "offset": 0,
-            "slot": "3",
-            "type": "t_mapping(t_uint256,t_struct(Tree)24222_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:80"
-          },
-          {
-            "label": "_nextMarketId",
-            "offset": 0,
-            "slot": "4",
-            "type": "t_uint256",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:83"
-          },
-          {
-            "label": "__gap",
-            "offset": 0,
-            "slot": "5",
-            "type": "t_array(t_uint256)49_storage",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:86"
-          }
-        ],
+        "storage": [],
         "types": {
           "t_address": {
             "label": "address",
@@ -455,222 +759,12 @@
             ],
             "numberOfBytes": "32"
           },
-          "t_struct(PausableStorage)559_storage": {
-            "label": "struct PausableUpgradeable.PausableStorage",
-            "members": [
-              {
-                "label": "_paused",
-                "type": "t_bool",
-                "offset": 0,
-                "slot": "0"
-              }
-            ],
-            "numberOfBytes": "32"
-          },
-          "t_struct(ReentrancyGuardStorage)623_storage": {
-            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
-            "members": [
-              {
-                "label": "_status",
-                "type": "t_uint256",
-                "offset": 0,
-                "slot": "0"
-              }
-            ],
-            "numberOfBytes": "32"
-          },
-          "t_uint256": {
-            "label": "uint256",
-            "numberOfBytes": "32"
-          },
           "t_uint64": {
             "label": "uint64",
             "numberOfBytes": "8"
-          },
-          "t_array(t_uint256)49_storage": {
-            "label": "uint256[49]",
-            "numberOfBytes": "1568"
-          },
-          "t_contract(ICLMSRPositionUpgradeable)23666": {
-            "label": "contract ICLMSRPositionUpgradeable",
-            "numberOfBytes": "20"
-          },
-          "t_contract(IERC20)2739": {
-            "label": "contract IERC20",
-            "numberOfBytes": "20"
-          },
-          "t_int256": {
-            "label": "int256",
-            "numberOfBytes": "32"
-          },
-          "t_mapping(t_uint256,t_struct(Market)23154_storage)": {
-            "label": "mapping(uint256 => struct ICLMSRMarketCoreUpgradeable.Market)",
-            "numberOfBytes": "32"
-          },
-          "t_mapping(t_uint256,t_struct(Tree)24222_storage)": {
-            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
-            "numberOfBytes": "32"
-          },
-          "t_mapping(t_uint32,t_struct(Node)24207_storage)": {
-            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
-            "numberOfBytes": "32"
-          },
-          "t_struct(Market)23154_storage": {
-            "label": "struct ICLMSRMarketCoreUpgradeable.Market",
-            "members": [
-              {
-                "label": "isActive",
-                "type": "t_bool",
-                "offset": 0,
-                "slot": "0"
-              },
-              {
-                "label": "settled",
-                "type": "t_bool",
-                "offset": 1,
-                "slot": "0"
-              },
-              {
-                "label": "startTimestamp",
-                "type": "t_uint64",
-                "offset": 2,
-                "slot": "0"
-              },
-              {
-                "label": "endTimestamp",
-                "type": "t_uint64",
-                "offset": 10,
-                "slot": "0"
-              },
-              {
-                "label": "settlementTick",
-                "type": "t_int256",
-                "offset": 0,
-                "slot": "1"
-              },
-              {
-                "label": "minTick",
-                "type": "t_int256",
-                "offset": 0,
-                "slot": "2"
-              },
-              {
-                "label": "maxTick",
-                "type": "t_int256",
-                "offset": 0,
-                "slot": "3"
-              },
-              {
-                "label": "tickSpacing",
-                "type": "t_int256",
-                "offset": 0,
-                "slot": "4"
-              },
-              {
-                "label": "numBins",
-                "type": "t_uint32",
-                "offset": 0,
-                "slot": "5"
-              },
-              {
-                "label": "liquidityParameter",
-                "type": "t_uint256",
-                "offset": 0,
-                "slot": "6"
-              }
-            ],
-            "numberOfBytes": "224"
-          },
-          "t_struct(Node)24207_storage": {
-            "label": "struct LazyMulSegmentTree.Node",
-            "members": [
-              {
-                "label": "sum",
-                "type": "t_uint256",
-                "offset": 0,
-                "slot": "0"
-              },
-              {
-                "label": "pendingFactor",
-                "type": "t_uint192",
-                "offset": 0,
-                "slot": "1"
-              },
-              {
-                "label": "childPtr",
-                "type": "t_uint64",
-                "offset": 24,
-                "slot": "1"
-              }
-            ],
-            "numberOfBytes": "64"
-          },
-          "t_struct(Tree)24222_storage": {
-            "label": "struct LazyMulSegmentTree.Tree",
-            "members": [
-              {
-                "label": "nodes",
-                "type": "t_mapping(t_uint32,t_struct(Node)24207_storage)",
-                "offset": 0,
-                "slot": "0"
-              },
-              {
-                "label": "root",
-                "type": "t_uint32",
-                "offset": 0,
-                "slot": "1"
-              },
-              {
-                "label": "nextIndex",
-                "type": "t_uint32",
-                "offset": 4,
-                "slot": "1"
-              },
-              {
-                "label": "size",
-                "type": "t_uint32",
-                "offset": 8,
-                "slot": "1"
-              },
-              {
-                "label": "cachedRootSum",
-                "type": "t_uint256",
-                "offset": 0,
-                "slot": "2"
-              }
-            ],
-            "numberOfBytes": "96"
-          },
-          "t_uint192": {
-            "label": "uint192",
-            "numberOfBytes": "24"
-          },
-          "t_uint32": {
-            "label": "uint32",
-            "numberOfBytes": "4"
           }
         },
         "namespaces": {
-          "erc7201:openzeppelin.storage.ReentrancyGuard": [
-            {
-              "contract": "ReentrancyGuardUpgradeable",
-              "label": "_status",
-              "type": "t_uint256",
-              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
-              "offset": 0,
-              "slot": "0"
-            }
-          ],
-          "erc7201:openzeppelin.storage.Pausable": [
-            {
-              "contract": "PausableUpgradeable",
-              "label": "_paused",
-              "type": "t_bool",
-              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
-              "offset": 0,
-              "slot": "0"
-            }
-          ],
           "erc7201:openzeppelin.storage.Ownable": [
             {
               "contract": "OwnableUpgradeable",
@@ -700,14 +794,10 @@
             }
           ]
         }
-      },
-      "allAddresses": [
-        "0x479Ab77b0b91782573f1F42bB593533483a165DF"
-      ]
+      }
     },
-    "d2da125b3a30fc477d7881e1538ffd4f318bf7587f0593a42492e21d1beaf1f5": {
-      "address": "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
-      "txHash": "0xbcdc61251db4e83648cf5fbabf0f0d7c89bb5391b7174fbc13753d1616deaa30",
+    "ba01dfe54af3e1b1f0ad74a48fac6babc71467ff23f6ce624818f994df73ca64": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
       "layout": {
         "solcVersion": "0.8.24",
         "storage": [
@@ -715,49 +805,49 @@
             "label": "paymentToken",
             "offset": 0,
             "slot": "0",
-            "type": "t_contract(IERC20)2739",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:69"
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
           },
           {
             "label": "positionContract",
             "offset": 0,
             "slot": "1",
-            "type": "t_contract(ICLMSRPositionUpgradeable)23666",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:72"
+            "type": "t_contract(ICLMSRPosition)15015",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
           },
           {
             "label": "markets",
             "offset": 0,
             "slot": "2",
-            "type": "t_mapping(t_uint256,t_struct(Market)23154_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:77"
+            "type": "t_mapping(t_uint256,t_struct(Market)14453_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
           },
           {
             "label": "marketTrees",
             "offset": 0,
             "slot": "3",
-            "type": "t_mapping(t_uint256,t_struct(Tree)24222_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:80"
+            "type": "t_mapping(t_uint256,t_struct(Tree)15571_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
           },
           {
             "label": "_nextMarketId",
             "offset": 0,
             "slot": "4",
             "type": "t_uint256",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:83"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
           },
           {
             "label": "__gap",
             "offset": 0,
             "slot": "5",
             "type": "t_array(t_uint256)49_storage",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:86"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
           }
         ],
         "types": {
@@ -799,7 +889,7 @@
             ],
             "numberOfBytes": "32"
           },
-          "t_struct(PausableStorage)559_storage": {
+          "t_struct(PausableStorage)224_storage": {
             "label": "struct PausableUpgradeable.PausableStorage",
             "members": [
               {
@@ -811,7 +901,7 @@
             ],
             "numberOfBytes": "32"
           },
-          "t_struct(ReentrancyGuardStorage)623_storage": {
+          "t_struct(ReentrancyGuardStorage)288_storage": {
             "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
             "members": [
               {
@@ -835,11 +925,11 @@
             "label": "uint256[49]",
             "numberOfBytes": "1568"
           },
-          "t_contract(ICLMSRPositionUpgradeable)23666": {
-            "label": "contract ICLMSRPositionUpgradeable",
+          "t_contract(ICLMSRPosition)15015": {
+            "label": "contract ICLMSRPosition",
             "numberOfBytes": "20"
           },
-          "t_contract(IERC20)2739": {
+          "t_contract(IERC20)1482": {
             "label": "contract IERC20",
             "numberOfBytes": "20"
           },
@@ -847,20 +937,20 @@
             "label": "int256",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Market)23154_storage)": {
-            "label": "mapping(uint256 => struct ICLMSRMarketCoreUpgradeable.Market)",
+          "t_mapping(t_uint256,t_struct(Market)14453_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Tree)24222_storage)": {
+          "t_mapping(t_uint256,t_struct(Tree)15571_storage)": {
             "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint32,t_struct(Node)24207_storage)": {
+          "t_mapping(t_uint32,t_struct(Node)15556_storage)": {
             "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
             "numberOfBytes": "32"
           },
-          "t_struct(Market)23154_storage": {
-            "label": "struct ICLMSRMarketCoreUpgradeable.Market",
+          "t_struct(Market)14453_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
             "members": [
               {
                 "label": "isActive",
@@ -921,11 +1011,23 @@
                 "type": "t_uint256",
                 "offset": 0,
                 "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
               }
             ],
-            "numberOfBytes": "224"
+            "numberOfBytes": "256"
           },
-          "t_struct(Node)24207_storage": {
+          "t_struct(Node)15556_storage": {
             "label": "struct LazyMulSegmentTree.Node",
             "members": [
               {
@@ -949,12 +1051,12 @@
             ],
             "numberOfBytes": "64"
           },
-          "t_struct(Tree)24222_storage": {
+          "t_struct(Tree)15571_storage": {
             "label": "struct LazyMulSegmentTree.Tree",
             "members": [
               {
                 "label": "nodes",
-                "type": "t_mapping(t_uint32,t_struct(Node)24207_storage)",
+                "type": "t_mapping(t_uint32,t_struct(Node)15556_storage)",
                 "offset": 0,
                 "slot": "0"
               },
@@ -1046,58 +1148,58 @@
         }
       }
     },
-    "10aaa5480a51f292fa54d864ebf7d58db64ad330c981dba777e90bd8fa8e493c": {
-      "address": "0xd60340132B5dF7E625260CbDe945DcdCB4B41142",
+    "d70cd015f2472a327a7b3c3f51ce82387c6058df566e147f13348f0ec756a97a": {
+      "address": "0xFad9b208E3f7b64cdD2a9361Eb63c8b8C8Eb8BdD",
       "layout": {
         "solcVersion": "0.8.24",
         "storage": [
           {
-            "label": "paymentToken",
+            "label": "core",
             "offset": 0,
             "slot": "0",
-            "type": "t_contract(IERC20)1482",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:69"
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
           },
           {
-            "label": "positionContract",
+            "label": "_nextId",
             "offset": 0,
             "slot": "1",
-            "type": "t_contract(ICLMSRPositionUpgradeable)14579",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:72"
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
           },
           {
-            "label": "markets",
+            "label": "_totalSupply",
             "offset": 0,
             "slot": "2",
-            "type": "t_mapping(t_uint256,t_struct(Market)14049_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:77"
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
           },
           {
-            "label": "marketTrees",
+            "label": "_positions",
             "offset": 0,
             "slot": "3",
-            "type": "t_mapping(t_uint256,t_struct(Tree)15135_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:80"
+            "type": "t_mapping(t_uint256,t_struct(Position)24738_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
           },
           {
-            "label": "_nextMarketId",
+            "label": "_ownedTokens",
             "offset": 0,
             "slot": "4",
-            "type": "t_uint256",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:83"
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
           },
           {
             "label": "__gap",
             "offset": 0,
             "slot": "5",
-            "type": "t_array(t_uint256)49_storage",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:86"
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
           }
         ],
         "types": {
@@ -1109,6 +1211,68 @@
             "label": "bool",
             "numberOfBytes": "1"
           },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
           "t_struct(InitializableStorage)73_storage": {
             "label": "struct Initializable.InitializableStorage",
             "members": [
@@ -1139,30 +1303,6 @@
             ],
             "numberOfBytes": "32"
           },
-          "t_struct(PausableStorage)224_storage": {
-            "label": "struct PausableUpgradeable.PausableStorage",
-            "members": [
-              {
-                "label": "_paused",
-                "type": "t_bool",
-                "offset": 0,
-                "slot": "0"
-              }
-            ],
-            "numberOfBytes": "32"
-          },
-          "t_struct(ReentrancyGuardStorage)288_storage": {
-            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
-            "members": [
-              {
-                "label": "_status",
-                "type": "t_uint256",
-                "offset": 0,
-                "slot": "0"
-              }
-            ],
-            "numberOfBytes": "32"
-          },
           "t_uint256": {
             "label": "uint256",
             "numberOfBytes": "32"
@@ -1171,190 +1311,241 @@
             "label": "uint64",
             "numberOfBytes": "8"
           },
-          "t_array(t_uint256)49_storage": {
-            "label": "uint256[49]",
-            "numberOfBytes": "1568"
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
           },
-          "t_contract(ICLMSRPositionUpgradeable)14579": {
-            "label": "contract ICLMSRPositionUpgradeable",
-            "numberOfBytes": "20"
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
           },
-          "t_contract(IERC20)1482": {
-            "label": "contract IERC20",
-            "numberOfBytes": "20"
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
           },
           "t_int256": {
             "label": "int256",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Market)14049_storage)": {
-            "label": "mapping(uint256 => struct ICLMSRMarketCoreUpgradeable.Market)",
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Tree)15135_storage)": {
-            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint32,t_struct(Node)15120_storage)": {
-            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+          "t_mapping(t_uint256,t_struct(Position)24738_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
             "numberOfBytes": "32"
           },
-          "t_struct(Market)14049_storage": {
-            "label": "struct ICLMSRMarketCoreUpgradeable.Market",
+          "t_struct(Position)24738_storage": {
+            "label": "struct ICLMSRPosition.Position",
             "members": [
               {
-                "label": "isActive",
-                "type": "t_bool",
+                "label": "marketId",
+                "type": "t_uint256",
                 "offset": 0,
                 "slot": "0"
               },
               {
-                "label": "settled",
-                "type": "t_bool",
-                "offset": 1,
-                "slot": "0"
-              },
-              {
-                "label": "startTimestamp",
-                "type": "t_uint64",
-                "offset": 2,
-                "slot": "0"
-              },
-              {
-                "label": "endTimestamp",
-                "type": "t_uint64",
-                "offset": 10,
-                "slot": "0"
-              },
-              {
-                "label": "settlementTick",
+                "label": "lowerTick",
                 "type": "t_int256",
                 "offset": 0,
                 "slot": "1"
               },
               {
-                "label": "minTick",
+                "label": "upperTick",
                 "type": "t_int256",
                 "offset": 0,
                 "slot": "2"
               },
               {
-                "label": "maxTick",
-                "type": "t_int256",
+                "label": "quantity",
+                "type": "t_uint128",
                 "offset": 0,
                 "slot": "3"
               },
               {
-                "label": "tickSpacing",
-                "type": "t_int256",
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
                 "offset": 0,
-                "slot": "4"
+                "slot": "0"
               },
               {
-                "label": "numBins",
-                "type": "t_uint32",
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
                 "offset": 0,
-                "slot": "5"
-              },
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
               {
-                "label": "liquidityParameter",
-                "type": "t_uint256",
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
                 "offset": 0,
-                "slot": "6"
+                "slot": "0"
               }
             ],
-            "numberOfBytes": "224"
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xFad9b208E3f7b64cdD2a9361Eb63c8b8C8Eb8BdD",
+        "0xC1A353Df0F0701b74501657C9E16EC0e09A74B0c"
+      ]
+    },
+    "9379634d8942428c26234f6cf9663401660e704a50e9547f8a9f926b7618f730": {
+      "address": "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
           },
-          "t_struct(Node)15120_storage": {
-            "label": "struct LazyMulSegmentTree.Node",
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
             "members": [
               {
-                "label": "sum",
-                "type": "t_uint256",
+                "label": "_initialized",
+                "type": "t_uint64",
                 "offset": 0,
                 "slot": "0"
               },
               {
-                "label": "pendingFactor",
-                "type": "t_uint192",
-                "offset": 0,
-                "slot": "1"
-              },
-              {
-                "label": "childPtr",
-                "type": "t_uint64",
-                "offset": 24,
-                "slot": "1"
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
               }
             ],
-            "numberOfBytes": "64"
+            "numberOfBytes": "32"
           },
-          "t_struct(Tree)15135_storage": {
-            "label": "struct LazyMulSegmentTree.Tree",
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
             "members": [
               {
-                "label": "nodes",
-                "type": "t_mapping(t_uint32,t_struct(Node)15120_storage)",
+                "label": "_owner",
+                "type": "t_address",
                 "offset": 0,
                 "slot": "0"
-              },
-              {
-                "label": "root",
-                "type": "t_uint32",
-                "offset": 0,
-                "slot": "1"
-              },
-              {
-                "label": "nextIndex",
-                "type": "t_uint32",
-                "offset": 4,
-                "slot": "1"
-              },
-              {
-                "label": "size",
-                "type": "t_uint32",
-                "offset": 8,
-                "slot": "1"
-              },
-              {
-                "label": "cachedRootSum",
-                "type": "t_uint256",
-                "offset": 0,
-                "slot": "2"
               }
             ],
-            "numberOfBytes": "96"
-          },
-          "t_uint192": {
-            "label": "uint192",
-            "numberOfBytes": "24"
+            "numberOfBytes": "32"
           },
-          "t_uint32": {
-            "label": "uint32",
-            "numberOfBytes": "4"
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
           }
         },
         "namespaces": {
-          "erc7201:openzeppelin.storage.ReentrancyGuard": [
-            {
-              "contract": "ReentrancyGuardUpgradeable",
-              "label": "_status",
-              "type": "t_uint256",
-              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
-              "offset": 0,
-              "slot": "0"
-            }
-          ],
-          "erc7201:openzeppelin.storage.Pausable": [
-            {
-              "contract": "PausableUpgradeable",
-              "label": "_paused",
-              "type": "t_bool",
-              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
-              "offset": 0,
-              "slot": "0"
-            }
-          ],
           "erc7201:openzeppelin.storage.Ownable": [
             {
               "contract": "OwnableUpgradeable",
@@ -1384,11 +1575,15 @@
             }
           ]
         }
-      }
+      },
+      "allAddresses": [
+        "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+        "0xbcBC6cac1d7011BF6CD3faBC25f6ecEe719e6210"
+      ]
     },
-    "bc5b6cc82626eac02f11358c0af39e574dad2590ca6550dbc54aa136e5cf284a": {
-      "address": "0x363C1F1c621429481F85f007118a1198E19022f9",
-      "txHash": "0x714d687e48b974d4d72d8501dc89c16bcbf31f03d5ef226fdd48943c1463eafd",
+    "002bcecaf0d4bf43c26df43838d37bf1efe4df3653c1c0372c8fb523b77751ad": {
+      "address": "0x5Cd908141036CD72f4080af66688DfD60F5Ac636",
+      "txHash": "0x03edd0dd579c2aae76d2f9825d00dec3a5a1193411afc6a39860a978f7a857c6",
       "layout": {
         "solcVersion": "0.8.24",
         "storage": [
@@ -1397,48 +1592,48 @@
             "offset": 0,
             "slot": "0",
             "type": "t_contract(IERC20)1482",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:69"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
           },
           {
             "label": "positionContract",
             "offset": 0,
             "slot": "1",
-            "type": "t_contract(ICLMSRPositionUpgradeable)14579",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:72"
+            "type": "t_contract(ICLMSRPosition)15015",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
           },
           {
             "label": "markets",
             "offset": 0,
             "slot": "2",
-            "type": "t_mapping(t_uint256,t_struct(Market)14049_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:77"
+            "type": "t_mapping(t_uint256,t_struct(Market)14453_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
           },
           {
             "label": "marketTrees",
             "offset": 0,
             "slot": "3",
-            "type": "t_mapping(t_uint256,t_struct(Tree)15135_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:80"
+            "type": "t_mapping(t_uint256,t_struct(Tree)15571_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
           },
           {
             "label": "_nextMarketId",
             "offset": 0,
             "slot": "4",
             "type": "t_uint256",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:83"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
           },
           {
             "label": "__gap",
             "offset": 0,
             "slot": "5",
             "type": "t_array(t_uint256)49_storage",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:86"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
           }
         ],
         "types": {
@@ -1516,8 +1711,8 @@
             "label": "uint256[49]",
             "numberOfBytes": "1568"
           },
-          "t_contract(ICLMSRPositionUpgradeable)14579": {
-            "label": "contract ICLMSRPositionUpgradeable",
+          "t_contract(ICLMSRPosition)15015": {
+            "label": "contract ICLMSRPosition",
             "numberOfBytes": "20"
           },
           "t_contract(IERC20)1482": {
@@ -1528,20 +1723,20 @@
             "label": "int256",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Market)14049_storage)": {
-            "label": "mapping(uint256 => struct ICLMSRMarketCoreUpgradeable.Market)",
+          "t_mapping(t_uint256,t_struct(Market)14453_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Tree)15135_storage)": {
+          "t_mapping(t_uint256,t_struct(Tree)15571_storage)": {
             "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint32,t_struct(Node)15120_storage)": {
+          "t_mapping(t_uint32,t_struct(Node)15556_storage)": {
             "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
             "numberOfBytes": "32"
           },
-          "t_struct(Market)14049_storage": {
-            "label": "struct ICLMSRMarketCoreUpgradeable.Market",
+          "t_struct(Market)14453_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
             "members": [
               {
                 "label": "isActive",
@@ -1602,11 +1797,23 @@
                 "type": "t_uint256",
                 "offset": 0,
                 "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
               }
             ],
-            "numberOfBytes": "224"
+            "numberOfBytes": "256"
           },
-          "t_struct(Node)15120_storage": {
+          "t_struct(Node)15556_storage": {
             "label": "struct LazyMulSegmentTree.Node",
             "members": [
               {
@@ -1630,12 +1837,12 @@
             ],
             "numberOfBytes": "64"
           },
-          "t_struct(Tree)15135_storage": {
+          "t_struct(Tree)15571_storage": {
             "label": "struct LazyMulSegmentTree.Tree",
             "members": [
               {
                 "label": "nodes",
-                "type": "t_mapping(t_uint32,t_struct(Node)15120_storage)",
+                "type": "t_mapping(t_uint32,t_struct(Node)15556_storage)",
                 "offset": 0,
                 "slot": "0"
               },
@@ -1725,95 +1932,11 @@
             }
           ]
         }
-      },
-      "allAddresses": [
-        "0x363C1F1c621429481F85f007118a1198E19022f9"
-      ]
-    },
-    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
-      "address": "0x8adA2f7D94c24e4734fD9BeB7ba70119debc4A85",
-      "layout": {
-        "solcVersion": "0.8.24",
-        "storage": [],
-        "types": {
-          "t_address": {
-            "label": "address",
-            "numberOfBytes": "20"
-          },
-          "t_bool": {
-            "label": "bool",
-            "numberOfBytes": "1"
-          },
-          "t_struct(InitializableStorage)73_storage": {
-            "label": "struct Initializable.InitializableStorage",
-            "members": [
-              {
-                "label": "_initialized",
-                "type": "t_uint64",
-                "offset": 0,
-                "slot": "0"
-              },
-              {
-                "label": "_initializing",
-                "type": "t_bool",
-                "offset": 8,
-                "slot": "0"
-              }
-            ],
-            "numberOfBytes": "32"
-          },
-          "t_struct(OwnableStorage)13_storage": {
-            "label": "struct OwnableUpgradeable.OwnableStorage",
-            "members": [
-              {
-                "label": "_owner",
-                "type": "t_address",
-                "offset": 0,
-                "slot": "0"
-              }
-            ],
-            "numberOfBytes": "32"
-          },
-          "t_uint64": {
-            "label": "uint64",
-            "numberOfBytes": "8"
-          }
-        },
-        "namespaces": {
-          "erc7201:openzeppelin.storage.Ownable": [
-            {
-              "contract": "OwnableUpgradeable",
-              "label": "_owner",
-              "type": "t_address",
-              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
-              "offset": 0,
-              "slot": "0"
-            }
-          ],
-          "erc7201:openzeppelin.storage.Initializable": [
-            {
-              "contract": "Initializable",
-              "label": "_initialized",
-              "type": "t_uint64",
-              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
-              "offset": 0,
-              "slot": "0"
-            },
-            {
-              "contract": "Initializable",
-              "label": "_initializing",
-              "type": "t_bool",
-              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
-              "offset": 8,
-              "slot": "0"
-            }
-          ]
-        }
       }
     },
-    "41faadf9cfa722acaa113ba20e6746cf75aa73d52e83fd0438033831780b660f": {
-      "address": "0x6183D0eCAd69B5Ed6B8fB690097844b670e0eE74",
-      "txHash": "0xd4dd4eec30df126d4888a6e2c26f7d3896e4dbf7e4a9eb8ed4b3f804b38d252d",
+    "c78ac0fe3bdc7af4b55f3a3b54826faed8126f6998ceac379ebe3a7e1d561cf6": {
+      "address": "0xE0E8a766d1101F16baC88Cd148108709A1263bE8",
+      "txHash": "0x9f1449bef2cc0badb0383aae66ea060432f328968d9a51496822d703aa5edd59",
       "layout": {
         "solcVersion": "0.8.24",
         "storage": [
@@ -1822,48 +1945,48 @@
             "offset": 0,
             "slot": "0",
             "type": "t_contract(IERC20)1482",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:69"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
           },
           {
             "label": "positionContract",
             "offset": 0,
             "slot": "1",
-            "type": "t_contract(ICLMSRPositionUpgradeable)14579",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:72"
+            "type": "t_contract(ICLMSRPosition)15041",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
           },
           {
             "label": "markets",
             "offset": 0,
             "slot": "2",
-            "type": "t_mapping(t_uint256,t_struct(Market)14049_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:77"
+            "type": "t_mapping(t_uint256,t_struct(Market)14473_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
           },
           {
             "label": "marketTrees",
             "offset": 0,
             "slot": "3",
-            "type": "t_mapping(t_uint256,t_struct(Tree)15135_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:80"
+            "type": "t_mapping(t_uint256,t_struct(Tree)15597_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
           },
           {
             "label": "_nextMarketId",
             "offset": 0,
             "slot": "4",
             "type": "t_uint256",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:83"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
           },
           {
             "label": "__gap",
             "offset": 0,
             "slot": "5",
             "type": "t_array(t_uint256)49_storage",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:86"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
           }
         ],
         "types": {
@@ -1941,8 +2064,8 @@
             "label": "uint256[49]",
             "numberOfBytes": "1568"
           },
-          "t_contract(ICLMSRPositionUpgradeable)14579": {
-            "label": "contract ICLMSRPositionUpgradeable",
+          "t_contract(ICLMSRPosition)15041": {
+            "label": "contract ICLMSRPosition",
             "numberOfBytes": "20"
           },
           "t_contract(IERC20)1482": {
@@ -1953,20 +2076,20 @@
             "label": "int256",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Market)14049_storage)": {
-            "label": "mapping(uint256 => struct ICLMSRMarketCoreUpgradeable.Market)",
+          "t_mapping(t_uint256,t_struct(Market)14473_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Tree)15135_storage)": {
+          "t_mapping(t_uint256,t_struct(Tree)15597_storage)": {
             "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint32,t_struct(Node)15120_storage)": {
+          "t_mapping(t_uint32,t_struct(Node)15582_storage)": {
             "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
             "numberOfBytes": "32"
           },
-          "t_struct(Market)14049_storage": {
-            "label": "struct ICLMSRMarketCoreUpgradeable.Market",
+          "t_struct(Market)14473_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
             "members": [
               {
                 "label": "isActive",
@@ -1999,39 +2122,57 @@
                 "slot": "1"
               },
               {
-                "label": "minTick",
+                "label": "settlementValue",
                 "type": "t_int256",
                 "offset": 0,
                 "slot": "2"
               },
               {
-                "label": "maxTick",
+                "label": "minTick",
                 "type": "t_int256",
                 "offset": 0,
                 "slot": "3"
               },
               {
-                "label": "tickSpacing",
+                "label": "maxTick",
                 "type": "t_int256",
                 "offset": 0,
                 "slot": "4"
               },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "5"
+              },
               {
                 "label": "numBins",
                 "type": "t_uint32",
                 "offset": 0,
-                "slot": "5"
+                "slot": "6"
               },
               {
                 "label": "liquidityParameter",
                 "type": "t_uint256",
                 "offset": 0,
-                "slot": "6"
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "8"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "8"
               }
             ],
-            "numberOfBytes": "224"
+            "numberOfBytes": "288"
           },
-          "t_struct(Node)15120_storage": {
+          "t_struct(Node)15582_storage": {
             "label": "struct LazyMulSegmentTree.Node",
             "members": [
               {
@@ -2055,12 +2196,12 @@
             ],
             "numberOfBytes": "64"
           },
-          "t_struct(Tree)15135_storage": {
+          "t_struct(Tree)15597_storage": {
             "label": "struct LazyMulSegmentTree.Tree",
             "members": [
               {
                 "label": "nodes",
-                "type": "t_mapping(t_uint32,t_struct(Node)15120_storage)",
+                "type": "t_mapping(t_uint32,t_struct(Node)15582_storage)",
                 "offset": 0,
                 "slot": "0"
               },
@@ -2150,7 +2291,10 @@
             }
           ]
         }
-      }
+      },
+      "allAddresses": [
+        "0xE0E8a766d1101F16baC88Cd148108709A1263bE8"
+      ]
     }
   }
 }
diff --git a/.openzeppelin/backups/citrea-dev-2025-08-26T17-37-01-492Z.json b/.openzeppelin/backups/citrea-dev-2025-08-26T17-37-01-492Z.json
new file mode 100644
index 0000000..9972364
--- /dev/null
+++ b/.openzeppelin/backups/citrea-dev-2025-08-26T17-37-01-492Z.json
@@ -0,0 +1,2302 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0x971F9bcE130743BB3eFb37aeAC2050cD44d7579a",
+      "kind": "uups"
+    },
+    {
+      "address": "0xe163497F304ad4b7482C84Bc82079d46050c6e93",
+      "kind": "uups"
+    },
+    {
+      "address": "0x59eb810fa5e7c0646902C29D9e8bfdaDf25Ce274",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "3a3c6d96b47cdefd7e4cb80b3efe3a6c7a6d9fb184b3e2f954ac26b13a7b0dcc": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x6178e97FE629C7BE10c67CDc060E109AF229B68c",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)9869_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)10410_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)9869_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x6178e97FE629C7BE10c67CDc060E109AF229B68c",
+        "0xFad9b208E3f7b64cdD2a9361Eb63c8b8C8Eb8BdD"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "ba01dfe54af3e1b1f0ad74a48fac6babc71467ff23f6ce624818f994df73ca64": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15015",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14453_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15571_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15015": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14453_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15571_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15556_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14453_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15556_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15571_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15556_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "d70cd015f2472a327a7b3c3f51ce82387c6058df566e147f13348f0ec756a97a": {
+      "address": "0xFad9b208E3f7b64cdD2a9361Eb63c8b8C8Eb8BdD",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24764_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24764_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24764_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xFad9b208E3f7b64cdD2a9361Eb63c8b8C8Eb8BdD",
+        "0x7F7082701Cb7D7a5E34D507EF842Eaa622784143",
+        "0xC1A353Df0F0701b74501657C9E16EC0e09A74B0c"
+      ]
+    },
+    "9379634d8942428c26234f6cf9663401660e704a50e9547f8a9f926b7618f730": {
+      "address": "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+        "0xbcBC6cac1d7011BF6CD3faBC25f6ecEe719e6210"
+      ]
+    },
+    "002bcecaf0d4bf43c26df43838d37bf1efe4df3653c1c0372c8fb523b77751ad": {
+      "address": "0x5Cd908141036CD72f4080af66688DfD60F5Ac636",
+      "txHash": "0x03edd0dd579c2aae76d2f9825d00dec3a5a1193411afc6a39860a978f7a857c6",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15015",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14453_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15571_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15015": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14453_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15571_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15556_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14453_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15556_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15571_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15556_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c78ac0fe3bdc7af4b55f3a3b54826faed8126f6998ceac379ebe3a7e1d561cf6": {
+      "address": "0xE0E8a766d1101F16baC88Cd148108709A1263bE8",
+      "txHash": "0x9f1449bef2cc0badb0383aae66ea060432f328968d9a51496822d703aa5edd59",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15041",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14473_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15597_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15041": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14473_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15597_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15582_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14473_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "settlementValue",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "8"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "8"
+              }
+            ],
+            "numberOfBytes": "288"
+          },
+          "t_struct(Node)15582_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15597_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15582_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xE0E8a766d1101F16baC88Cd148108709A1263bE8",
+        "0x5Cd908141036CD72f4080af66688DfD60F5Ac636"
+      ]
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T02-19-05-916Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T02-19-05-916Z.json
new file mode 100644
index 0000000..b5d4073
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T02-19-05-916Z.json
@@ -0,0 +1,1163 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0xB842e4494cABC27F8E622176289EFd6121eDf2d6",
+      "txHash": "0x9b825e103b4d47d9147dc2111b3fe9ec0a926e7fe412af03cfb8e7266a392801",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24464_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24464_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24464_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xB842e4494cABC27F8E622176289EFd6121eDf2d6",
+        "0x50f722D84DDfe05bc8a72394e63cF31b45863138"
+      ]
+    },
+    "6bddca59a1c0b1d32b9204a1042573cfd425cf61caebd815fe83cd58cace2de9": {
+      "address": "0x6336522cAb9801AdA28E8721B820d542d2F05b68",
+      "txHash": "0x4f1256fabfc05148953f99e1553bd5d26f1a129b9c7e84b2af9215b4f2fb7326",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCoreUpgradeable",
+            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPositionUpgradeable)30919",
+            "contract": "CLMSRMarketCoreUpgradeable",
+            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)30214_storage)",
+            "contract": "CLMSRMarketCoreUpgradeable",
+            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)31475_storage)",
+            "contract": "CLMSRMarketCoreUpgradeable",
+            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCoreUpgradeable",
+            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCoreUpgradeable",
+            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPositionUpgradeable)30919": {
+            "label": "contract ICLMSRPositionUpgradeable",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)30214_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCoreUpgradeable.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)31475_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)31460_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)30214_storage": {
+            "label": "struct ICLMSRMarketCoreUpgradeable.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)31460_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)31475_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)31460_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x6336522cAb9801AdA28E8721B820d542d2F05b68"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xB2a4A006330894Bf306cd002d27Bfd2441B15f0D",
+      "txHash": "0xcd65314333f14149b76588179e05b10a312c2ada29ac4266959617410174c4d9",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xB2a4A006330894Bf306cd002d27Bfd2441B15f0D",
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "e45d59fa39fcc6d13668c38c64b3a917f7691622ad07959e7a2eb042b52fb8b7": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "txHash": "0xa36bc5f40afaa8e9d192b89ffeeb351c3432953dc76229dd1272137e6aac68da",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24627",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24079_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25183_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24627": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24079_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25183_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25168_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24079_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25168_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25183_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25168_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T02-45-56-285Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T02-45-56-285Z.json
new file mode 100644
index 0000000..2841a80
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T02-45-56-285Z.json
@@ -0,0 +1,800 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "ea24f48f96da70700dd9ee16222acf344c51b1c8f545b3cbdf4e613a5825f353": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x61124Eb3c14956756B590421719846D28A0c6A7A",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)9869_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)10410_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)9869_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x61124Eb3c14956756B590421719846D28A0c6A7A",
+        "0xF6E24233255ca47Dc97BD1927d663Be1C025401c"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T02-47-24-994Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T02-47-24-994Z.json
new file mode 100644
index 0000000..ae84d60
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T02-47-24-994Z.json
@@ -0,0 +1,1156 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "ea24f48f96da70700dd9ee16222acf344c51b1c8f545b3cbdf4e613a5825f353": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x61124Eb3c14956756B590421719846D28A0c6A7A",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)9869_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)10410_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)9869_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x61124Eb3c14956756B590421719846D28A0c6A7A",
+        "0x7abCad89A5f5607500C5fa8AaAbAf86dA7DA8370",
+        "0xF6E24233255ca47Dc97BD1927d663Be1C025401c"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "a08500ab89e3ab0ffa775308343525aa3996d31ffd73c8321b25ac43f9d5dbc5": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/prod/base.json b/.openzeppelin/backups/citrea-prod-2025-08-22T02-49-18-434Z.json
similarity index 84%
rename from .openzeppelin/prod/base.json
rename to .openzeppelin/backups/citrea-prod-2025-08-22T02-49-18-434Z.json
index ea4bb79..87c7120 100644
--- a/.openzeppelin/prod/base.json
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T02-49-18-434Z.json
@@ -2,21 +2,373 @@
   "manifestVersion": "3.2",
   "proxies": [
     {
-      "address": "0xc24593d7eb141215DdDf4Faf557dA8c649BE0d50",
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
       "kind": "uups"
     },
     {
-      "address": "0xbBf5703b1755B462FC5FC7319A1d3ACA4E1988Bc",
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
       "kind": "uups"
     },
     {
-      "address": "0x68C6cb3BA572C53328F2c66a9809F5dE7b8b32dA",
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
       "kind": "uups"
     }
   ],
   "impls": {
+    "ea24f48f96da70700dd9ee16222acf344c51b1c8f545b3cbdf4e613a5825f353": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
     "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
-      "address": "0x0B110B33C096604465546101DB52c4FcC143FE26",
+      "address": "0x61124Eb3c14956756B590421719846D28A0c6A7A",
       "layout": {
         "solcVersion": "0.8.24",
         "storage": [
@@ -25,48 +377,48 @@
             "offset": 0,
             "slot": "0",
             "type": "t_address",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:31"
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
           },
           {
             "label": "_nextId",
             "offset": 0,
             "slot": "1",
             "type": "t_uint256",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:34"
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
           },
           {
             "label": "_totalSupply",
             "offset": 0,
             "slot": "2",
             "type": "t_uint256",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:37"
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
           },
           {
             "label": "_positions",
             "offset": 0,
             "slot": "3",
-            "type": "t_mapping(t_uint256,t_struct(Position)30514_storage)",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:40"
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
           },
           {
             "label": "_ownedTokens",
             "offset": 0,
             "slot": "4",
-            "type": "t_mapping(t_address,t_struct(UintSet)12303_storage)",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:43"
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
           },
           {
             "label": "__gap",
             "offset": 0,
             "slot": "5",
             "type": "t_array(t_uint256)50_storage",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:46"
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
           }
         ],
         "types": {
@@ -194,7 +546,7 @@
             "label": "int256",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_address,t_struct(UintSet)12303_storage)": {
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
             "label": "mapping(address => struct EnumerableSet.UintSet)",
             "numberOfBytes": "32"
           },
@@ -202,12 +554,12 @@
             "label": "mapping(bytes32 => uint256)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Position)30514_storage)": {
-            "label": "mapping(uint256 => struct ICLMSRPositionUpgradeable.Position)",
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
             "numberOfBytes": "32"
           },
-          "t_struct(Position)30514_storage": {
-            "label": "struct ICLMSRPositionUpgradeable.Position",
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
             "members": [
               {
                 "label": "marketId",
@@ -242,7 +594,7 @@
             ],
             "numberOfBytes": "128"
           },
-          "t_struct(Set)11762_storage": {
+          "t_struct(Set)9869_storage": {
             "label": "struct EnumerableSet.Set",
             "members": [
               {
@@ -260,12 +612,12 @@
             ],
             "numberOfBytes": "64"
           },
-          "t_struct(UintSet)12303_storage": {
+          "t_struct(UintSet)10410_storage": {
             "label": "struct EnumerableSet.UintSet",
             "members": [
               {
                 "label": "_inner",
-                "type": "t_struct(Set)11762_storage",
+                "type": "t_struct(Set)9869_storage",
                 "offset": 0,
                 "slot": "0"
               }
@@ -359,318 +711,62 @@
         }
       },
       "allAddresses": [
-        "0x0B110B33C096604465546101DB52c4FcC143FE26"
+        "0x61124Eb3c14956756B590421719846D28A0c6A7A",
+        "0xFf68B96E1157325069A60098Dafa91e8657ed9B2",
+        "0x7abCad89A5f5607500C5fa8AaAbAf86dA7DA8370",
+        "0xF6E24233255ca47Dc97BD1927d663Be1C025401c"
       ]
     },
-    "e34ed0361dac12280c4b08e5f40ee74eeff5be36ddb8e00e6b05ffca52a854e4": {
-      "address": "0x3D2280A2c7ef2b23AC3b9dc586Cd56228f6Fe3BD",
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
       "layout": {
         "solcVersion": "0.8.24",
-        "storage": [
-          {
-            "label": "paymentToken",
-            "offset": 0,
-            "slot": "0",
-            "type": "t_contract(IERC20)1482",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:69"
-          },
-          {
-            "label": "positionContract",
-            "offset": 0,
-            "slot": "1",
-            "type": "t_contract(ICLMSRPositionUpgradeable)14579",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:72"
-          },
-          {
-            "label": "markets",
-            "offset": 0,
-            "slot": "2",
-            "type": "t_mapping(t_uint256,t_struct(Market)14049_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:77"
-          },
-          {
-            "label": "marketTrees",
-            "offset": 0,
-            "slot": "3",
-            "type": "t_mapping(t_uint256,t_struct(Tree)15135_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:80"
-          },
-          {
-            "label": "_nextMarketId",
-            "offset": 0,
-            "slot": "4",
-            "type": "t_uint256",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:83"
-          },
-          {
-            "label": "__gap",
-            "offset": 0,
-            "slot": "5",
-            "type": "t_array(t_uint256)49_storage",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:86"
-          }
-        ],
+        "storage": [],
         "types": {
           "t_address": {
             "label": "address",
-            "numberOfBytes": "20"
-          },
-          "t_bool": {
-            "label": "bool",
-            "numberOfBytes": "1"
-          },
-          "t_struct(InitializableStorage)73_storage": {
-            "label": "struct Initializable.InitializableStorage",
-            "members": [
-              {
-                "label": "_initialized",
-                "type": "t_uint64",
-                "offset": 0,
-                "slot": "0"
-              },
-              {
-                "label": "_initializing",
-                "type": "t_bool",
-                "offset": 8,
-                "slot": "0"
-              }
-            ],
-            "numberOfBytes": "32"
-          },
-          "t_struct(OwnableStorage)13_storage": {
-            "label": "struct OwnableUpgradeable.OwnableStorage",
-            "members": [
-              {
-                "label": "_owner",
-                "type": "t_address",
-                "offset": 0,
-                "slot": "0"
-              }
-            ],
-            "numberOfBytes": "32"
-          },
-          "t_struct(PausableStorage)224_storage": {
-            "label": "struct PausableUpgradeable.PausableStorage",
-            "members": [
-              {
-                "label": "_paused",
-                "type": "t_bool",
-                "offset": 0,
-                "slot": "0"
-              }
-            ],
-            "numberOfBytes": "32"
-          },
-          "t_struct(ReentrancyGuardStorage)288_storage": {
-            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
-            "members": [
-              {
-                "label": "_status",
-                "type": "t_uint256",
-                "offset": 0,
-                "slot": "0"
-              }
-            ],
-            "numberOfBytes": "32"
-          },
-          "t_uint256": {
-            "label": "uint256",
-            "numberOfBytes": "32"
-          },
-          "t_uint64": {
-            "label": "uint64",
-            "numberOfBytes": "8"
-          },
-          "t_array(t_uint256)49_storage": {
-            "label": "uint256[49]",
-            "numberOfBytes": "1568"
-          },
-          "t_contract(ICLMSRPositionUpgradeable)14579": {
-            "label": "contract ICLMSRPositionUpgradeable",
-            "numberOfBytes": "20"
-          },
-          "t_contract(IERC20)1482": {
-            "label": "contract IERC20",
-            "numberOfBytes": "20"
-          },
-          "t_int256": {
-            "label": "int256",
-            "numberOfBytes": "32"
-          },
-          "t_mapping(t_uint256,t_struct(Market)14049_storage)": {
-            "label": "mapping(uint256 => struct ICLMSRMarketCoreUpgradeable.Market)",
-            "numberOfBytes": "32"
-          },
-          "t_mapping(t_uint256,t_struct(Tree)15135_storage)": {
-            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
-            "numberOfBytes": "32"
+            "numberOfBytes": "20"
           },
-          "t_mapping(t_uint32,t_struct(Node)15120_storage)": {
-            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
-            "numberOfBytes": "32"
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
           },
-          "t_struct(Market)14049_storage": {
-            "label": "struct ICLMSRMarketCoreUpgradeable.Market",
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
             "members": [
               {
-                "label": "isActive",
-                "type": "t_bool",
+                "label": "_initialized",
+                "type": "t_uint64",
                 "offset": 0,
                 "slot": "0"
               },
               {
-                "label": "settled",
+                "label": "_initializing",
                 "type": "t_bool",
-                "offset": 1,
-                "slot": "0"
-              },
-              {
-                "label": "startTimestamp",
-                "type": "t_uint64",
-                "offset": 2,
-                "slot": "0"
-              },
-              {
-                "label": "endTimestamp",
-                "type": "t_uint64",
-                "offset": 10,
-                "slot": "0"
-              },
-              {
-                "label": "settlementTick",
-                "type": "t_int256",
-                "offset": 0,
-                "slot": "1"
-              },
-              {
-                "label": "minTick",
-                "type": "t_int256",
-                "offset": 0,
-                "slot": "2"
-              },
-              {
-                "label": "maxTick",
-                "type": "t_int256",
-                "offset": 0,
-                "slot": "3"
-              },
-              {
-                "label": "tickSpacing",
-                "type": "t_int256",
-                "offset": 0,
-                "slot": "4"
-              },
-              {
-                "label": "numBins",
-                "type": "t_uint32",
-                "offset": 0,
-                "slot": "5"
-              },
-              {
-                "label": "liquidityParameter",
-                "type": "t_uint256",
-                "offset": 0,
-                "slot": "6"
-              }
-            ],
-            "numberOfBytes": "224"
-          },
-          "t_struct(Node)15120_storage": {
-            "label": "struct LazyMulSegmentTree.Node",
-            "members": [
-              {
-                "label": "sum",
-                "type": "t_uint256",
-                "offset": 0,
+                "offset": 8,
                 "slot": "0"
-              },
-              {
-                "label": "pendingFactor",
-                "type": "t_uint192",
-                "offset": 0,
-                "slot": "1"
-              },
-              {
-                "label": "childPtr",
-                "type": "t_uint64",
-                "offset": 24,
-                "slot": "1"
               }
             ],
-            "numberOfBytes": "64"
+            "numberOfBytes": "32"
           },
-          "t_struct(Tree)15135_storage": {
-            "label": "struct LazyMulSegmentTree.Tree",
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
             "members": [
               {
-                "label": "nodes",
-                "type": "t_mapping(t_uint32,t_struct(Node)15120_storage)",
+                "label": "_owner",
+                "type": "t_address",
                 "offset": 0,
                 "slot": "0"
-              },
-              {
-                "label": "root",
-                "type": "t_uint32",
-                "offset": 0,
-                "slot": "1"
-              },
-              {
-                "label": "nextIndex",
-                "type": "t_uint32",
-                "offset": 4,
-                "slot": "1"
-              },
-              {
-                "label": "size",
-                "type": "t_uint32",
-                "offset": 8,
-                "slot": "1"
-              },
-              {
-                "label": "cachedRootSum",
-                "type": "t_uint256",
-                "offset": 0,
-                "slot": "2"
               }
             ],
-            "numberOfBytes": "96"
-          },
-          "t_uint192": {
-            "label": "uint192",
-            "numberOfBytes": "24"
+            "numberOfBytes": "32"
           },
-          "t_uint32": {
-            "label": "uint32",
-            "numberOfBytes": "4"
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
           }
         },
         "namespaces": {
-          "erc7201:openzeppelin.storage.ReentrancyGuard": [
-            {
-              "contract": "ReentrancyGuardUpgradeable",
-              "label": "_status",
-              "type": "t_uint256",
-              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
-              "offset": 0,
-              "slot": "0"
-            }
-          ],
-          "erc7201:openzeppelin.storage.Pausable": [
-            {
-              "contract": "PausableUpgradeable",
-              "label": "_paused",
-              "type": "t_bool",
-              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
-              "offset": 0,
-              "slot": "0"
-            }
-          ],
           "erc7201:openzeppelin.storage.Ownable": [
             {
               "contract": "OwnableUpgradeable",
@@ -700,11 +796,13 @@
             }
           ]
         }
-      }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
     },
-    "4cc5111520a6c2291e6773f489dbc7643bb10ca52a2efca338fde472fb87cb78": {
-      "address": "0xEE5B92648762e114fC605816b56eCFEf646e3093",
-      "txHash": "0xbc01fdf5b6d10bb8ed5533b54d1d17a6e01bdfe250b62e6f0fc6d96173cd712d",
+    "a08500ab89e3ab0ffa775308343525aa3996d31ffd73c8321b25ac43f9d5dbc5": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
       "layout": {
         "solcVersion": "0.8.24",
         "storage": [
@@ -713,48 +811,48 @@
             "offset": 0,
             "slot": "0",
             "type": "t_contract(IERC20)1482",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:69"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
           },
           {
             "label": "positionContract",
             "offset": 0,
             "slot": "1",
-            "type": "t_contract(ICLMSRPositionUpgradeable)14579",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:72"
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
           },
           {
             "label": "markets",
             "offset": 0,
             "slot": "2",
-            "type": "t_mapping(t_uint256,t_struct(Market)14049_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:77"
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
           },
           {
             "label": "marketTrees",
             "offset": 0,
             "slot": "3",
-            "type": "t_mapping(t_uint256,t_struct(Tree)15135_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:80"
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
           },
           {
             "label": "_nextMarketId",
             "offset": 0,
             "slot": "4",
             "type": "t_uint256",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:83"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
           },
           {
             "label": "__gap",
             "offset": 0,
             "slot": "5",
             "type": "t_array(t_uint256)49_storage",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:86"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
           }
         ],
         "types": {
@@ -832,8 +930,8 @@
             "label": "uint256[49]",
             "numberOfBytes": "1568"
           },
-          "t_contract(ICLMSRPositionUpgradeable)14579": {
-            "label": "contract ICLMSRPositionUpgradeable",
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
             "numberOfBytes": "20"
           },
           "t_contract(IERC20)1482": {
@@ -844,20 +942,20 @@
             "label": "int256",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Market)14049_storage)": {
-            "label": "mapping(uint256 => struct ICLMSRMarketCoreUpgradeable.Market)",
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Tree)15135_storage)": {
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
             "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint32,t_struct(Node)15120_storage)": {
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
             "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
             "numberOfBytes": "32"
           },
-          "t_struct(Market)14049_storage": {
-            "label": "struct ICLMSRMarketCoreUpgradeable.Market",
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
             "members": [
               {
                 "label": "isActive",
@@ -918,11 +1016,23 @@
                 "type": "t_uint256",
                 "offset": 0,
                 "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
               }
             ],
-            "numberOfBytes": "224"
+            "numberOfBytes": "256"
           },
-          "t_struct(Node)15120_storage": {
+          "t_struct(Node)15557_storage": {
             "label": "struct LazyMulSegmentTree.Node",
             "members": [
               {
@@ -946,12 +1056,12 @@
             ],
             "numberOfBytes": "64"
           },
-          "t_struct(Tree)15135_storage": {
+          "t_struct(Tree)15572_storage": {
             "label": "struct LazyMulSegmentTree.Tree",
             "members": [
               {
                 "label": "nodes",
-                "type": "t_mapping(t_uint32,t_struct(Node)15120_storage)",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
                 "offset": 0,
                 "slot": "0"
               },
@@ -1041,99 +1151,10 @@
             }
           ]
         }
-      },
-      "allAddresses": [
-        "0xEE5B92648762e114fC605816b56eCFEf646e3093"
-      ]
-    },
-    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
-      "address": "0xb13C8AD293E76e97cd32F9eCa5489d14e7b375Ac",
-      "txHash": "0x7d5fcd1520a2d5ac6a7e76d2c3b6d5a9b59b0aca983ff4f66bd6df880c71f0b2",
-      "layout": {
-        "solcVersion": "0.8.24",
-        "storage": [],
-        "types": {
-          "t_address": {
-            "label": "address",
-            "numberOfBytes": "20"
-          },
-          "t_bool": {
-            "label": "bool",
-            "numberOfBytes": "1"
-          },
-          "t_struct(InitializableStorage)73_storage": {
-            "label": "struct Initializable.InitializableStorage",
-            "members": [
-              {
-                "label": "_initialized",
-                "type": "t_uint64",
-                "offset": 0,
-                "slot": "0"
-              },
-              {
-                "label": "_initializing",
-                "type": "t_bool",
-                "offset": 8,
-                "slot": "0"
-              }
-            ],
-            "numberOfBytes": "32"
-          },
-          "t_struct(OwnableStorage)13_storage": {
-            "label": "struct OwnableUpgradeable.OwnableStorage",
-            "members": [
-              {
-                "label": "_owner",
-                "type": "t_address",
-                "offset": 0,
-                "slot": "0"
-              }
-            ],
-            "numberOfBytes": "32"
-          },
-          "t_uint64": {
-            "label": "uint64",
-            "numberOfBytes": "8"
-          }
-        },
-        "namespaces": {
-          "erc7201:openzeppelin.storage.Ownable": [
-            {
-              "contract": "OwnableUpgradeable",
-              "label": "_owner",
-              "type": "t_address",
-              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
-              "offset": 0,
-              "slot": "0"
-            }
-          ],
-          "erc7201:openzeppelin.storage.Initializable": [
-            {
-              "contract": "Initializable",
-              "label": "_initialized",
-              "type": "t_uint64",
-              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
-              "offset": 0,
-              "slot": "0"
-            },
-            {
-              "contract": "Initializable",
-              "label": "_initializing",
-              "type": "t_bool",
-              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
-              "offset": 8,
-              "slot": "0"
-            }
-          ]
-        }
-      },
-      "allAddresses": [
-        "0xb13C8AD293E76e97cd32F9eCa5489d14e7b375Ac"
-      ]
+      }
     },
-    "112e782339c4768a87dfc39545e1da8595c26d79416925a1515d80bdf0762efd": {
-      "address": "0x519239Ba22435210537ec4eDe964c953a2a18A3c",
-      "txHash": "0x9e4c5cdbf85b5fd93473fa56ce042722ab9fad833bb8aebe264fa2137bc53e26",
+    "3e017a27770a72a1d7c681fd1d86794fb4e9ae04d8a875b85ba35fc1111474d0": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
       "layout": {
         "solcVersion": "0.8.24",
         "storage": [
@@ -1142,48 +1163,48 @@
             "offset": 0,
             "slot": "0",
             "type": "t_contract(IERC20)1482",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:69"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
           },
           {
             "label": "positionContract",
             "offset": 0,
             "slot": "1",
-            "type": "t_contract(ICLMSRPositionUpgradeable)14579",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:72"
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
           },
           {
             "label": "markets",
             "offset": 0,
             "slot": "2",
-            "type": "t_mapping(t_uint256,t_struct(Market)14049_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:77"
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
           },
           {
             "label": "marketTrees",
             "offset": 0,
             "slot": "3",
-            "type": "t_mapping(t_uint256,t_struct(Tree)15135_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:80"
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
           },
           {
             "label": "_nextMarketId",
             "offset": 0,
             "slot": "4",
             "type": "t_uint256",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:83"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
           },
           {
             "label": "__gap",
             "offset": 0,
             "slot": "5",
             "type": "t_array(t_uint256)49_storage",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:86"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
           }
         ],
         "types": {
@@ -1261,8 +1282,8 @@
             "label": "uint256[49]",
             "numberOfBytes": "1568"
           },
-          "t_contract(ICLMSRPositionUpgradeable)14579": {
-            "label": "contract ICLMSRPositionUpgradeable",
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
             "numberOfBytes": "20"
           },
           "t_contract(IERC20)1482": {
@@ -1273,20 +1294,20 @@
             "label": "int256",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Market)14049_storage)": {
-            "label": "mapping(uint256 => struct ICLMSRMarketCoreUpgradeable.Market)",
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Tree)15135_storage)": {
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
             "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint32,t_struct(Node)15120_storage)": {
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
             "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
             "numberOfBytes": "32"
           },
-          "t_struct(Market)14049_storage": {
-            "label": "struct ICLMSRMarketCoreUpgradeable.Market",
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
             "members": [
               {
                 "label": "isActive",
@@ -1347,11 +1368,23 @@
                 "type": "t_uint256",
                 "offset": 0,
                 "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
               }
             ],
-            "numberOfBytes": "224"
+            "numberOfBytes": "256"
           },
-          "t_struct(Node)15120_storage": {
+          "t_struct(Node)15557_storage": {
             "label": "struct LazyMulSegmentTree.Node",
             "members": [
               {
@@ -1375,12 +1408,12 @@
             ],
             "numberOfBytes": "64"
           },
-          "t_struct(Tree)15135_storage": {
+          "t_struct(Tree)15572_storage": {
             "label": "struct LazyMulSegmentTree.Tree",
             "members": [
               {
                 "label": "nodes",
-                "type": "t_mapping(t_uint32,t_struct(Node)15120_storage)",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
                 "offset": 0,
                 "slot": "0"
               },
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T02-49-36-108Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T02-49-36-108Z.json
new file mode 100644
index 0000000..87c7120
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T02-49-36-108Z.json
@@ -0,0 +1,1509 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "ea24f48f96da70700dd9ee16222acf344c51b1c8f545b3cbdf4e613a5825f353": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x61124Eb3c14956756B590421719846D28A0c6A7A",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)9869_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)10410_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)9869_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x61124Eb3c14956756B590421719846D28A0c6A7A",
+        "0xFf68B96E1157325069A60098Dafa91e8657ed9B2",
+        "0x7abCad89A5f5607500C5fa8AaAbAf86dA7DA8370",
+        "0xF6E24233255ca47Dc97BD1927d663Be1C025401c"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "a08500ab89e3ab0ffa775308343525aa3996d31ffd73c8321b25ac43f9d5dbc5": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "3e017a27770a72a1d7c681fd1d86794fb4e9ae04d8a875b85ba35fc1111474d0": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T02-51-37-433Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T02-51-37-433Z.json
new file mode 100644
index 0000000..8361d95
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T02-51-37-433Z.json
@@ -0,0 +1,806 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "ea24f48f96da70700dd9ee16222acf344c51b1c8f545b3cbdf4e613a5825f353": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x61124Eb3c14956756B590421719846D28A0c6A7A",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)9869_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)10410_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)9869_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x61124Eb3c14956756B590421719846D28A0c6A7A",
+        "0x313072a7D169DA2DFD7643f2626b2AEeF242e97e",
+        "0xFf68B96E1157325069A60098Dafa91e8657ed9B2",
+        "0x7abCad89A5f5607500C5fa8AaAbAf86dA7DA8370",
+        "0xF6E24233255ca47Dc97BD1927d663Be1C025401c"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    }
+  }
+}
\ No newline at end of file
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T02-52-52-756Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T02-52-52-756Z.json
new file mode 100644
index 0000000..b94df49
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T02-52-52-756Z.json
@@ -0,0 +1,18 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {}
+}
\ No newline at end of file
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T02-55-16-759Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T02-55-16-759Z.json
new file mode 100644
index 0000000..ccf318a
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T02-55-16-759Z.json
@@ -0,0 +1,800 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "5ffd3426f2d954c3c0b2f140ad7236726483a27ba99bc58d90791c82a67c6d1d": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)9869_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)10410_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)9869_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+        "0x7c1a1517c5969f998F1A6E2142C6dCaEC091C065"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T02-56-21-887Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T02-56-21-887Z.json
new file mode 100644
index 0000000..d603abe
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T02-56-21-887Z.json
@@ -0,0 +1,1156 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "5ffd3426f2d954c3c0b2f140ad7236726483a27ba99bc58d90791c82a67c6d1d": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+        "0xdb313006460273F3AbaB82FC21bBeAC221152eEc",
+        "0x7c1a1517c5969f998F1A6E2142C6dCaEC091C065"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "7d6a0483eec20497007d902265722dbcabaeac699443a90c0d127c049b997aa5": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T02-57-17-987Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T02-57-17-987Z.json
new file mode 100644
index 0000000..5768e1b
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T02-57-17-987Z.json
@@ -0,0 +1,1509 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "5ffd3426f2d954c3c0b2f140ad7236726483a27ba99bc58d90791c82a67c6d1d": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+        "0x6B7E602B39CAED0C8202421b64A8B04c75ec1c7B",
+        "0xdb313006460273F3AbaB82FC21bBeAC221152eEc",
+        "0x7c1a1517c5969f998F1A6E2142C6dCaEC091C065"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "7d6a0483eec20497007d902265722dbcabaeac699443a90c0d127c049b997aa5": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "471a697b52458819a6dbc84d23a6f4dd4032c47a86aef6ebc5733b52146afe26": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T02-58-27-176Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T02-58-27-176Z.json
new file mode 100644
index 0000000..a73a728
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T02-58-27-176Z.json
@@ -0,0 +1,1862 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "5ffd3426f2d954c3c0b2f140ad7236726483a27ba99bc58d90791c82a67c6d1d": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+        "0x293Fb4645a6B5186f7A8186A2d6fe59d64f686B9",
+        "0x6B7E602B39CAED0C8202421b64A8B04c75ec1c7B",
+        "0xdb313006460273F3AbaB82FC21bBeAC221152eEc",
+        "0x7c1a1517c5969f998F1A6E2142C6dCaEC091C065"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "7d6a0483eec20497007d902265722dbcabaeac699443a90c0d127c049b997aa5": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "471a697b52458819a6dbc84d23a6f4dd4032c47a86aef6ebc5733b52146afe26": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "22a977010165defb828b9b1bced692dfc5d8dcda77b5cf91b1094580d2870f94": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T03-01-31-028Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T03-01-31-028Z.json
new file mode 100644
index 0000000..239d750
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T03-01-31-028Z.json
@@ -0,0 +1,1863 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "5ffd3426f2d954c3c0b2f140ad7236726483a27ba99bc58d90791c82a67c6d1d": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+        "0x6B023F114231a380B43a9B191A5299FbDc0E56D7",
+        "0x293Fb4645a6B5186f7A8186A2d6fe59d64f686B9",
+        "0x6B7E602B39CAED0C8202421b64A8B04c75ec1c7B",
+        "0xdb313006460273F3AbaB82FC21bBeAC221152eEc",
+        "0x7c1a1517c5969f998F1A6E2142C6dCaEC091C065"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "7d6a0483eec20497007d902265722dbcabaeac699443a90c0d127c049b997aa5": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "471a697b52458819a6dbc84d23a6f4dd4032c47a86aef6ebc5733b52146afe26": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "22a977010165defb828b9b1bced692dfc5d8dcda77b5cf91b1094580d2870f94": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T03-02-52-712Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T03-02-52-712Z.json
new file mode 100644
index 0000000..f513c16
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T03-02-52-712Z.json
@@ -0,0 +1,1864 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "5ffd3426f2d954c3c0b2f140ad7236726483a27ba99bc58d90791c82a67c6d1d": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+        "0xef5897693d6CDd1F02C7334B0Bbe8c05837F2080",
+        "0x6B023F114231a380B43a9B191A5299FbDc0E56D7",
+        "0x293Fb4645a6B5186f7A8186A2d6fe59d64f686B9",
+        "0x6B7E602B39CAED0C8202421b64A8B04c75ec1c7B",
+        "0xdb313006460273F3AbaB82FC21bBeAC221152eEc",
+        "0x7c1a1517c5969f998F1A6E2142C6dCaEC091C065"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "7d6a0483eec20497007d902265722dbcabaeac699443a90c0d127c049b997aa5": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "471a697b52458819a6dbc84d23a6f4dd4032c47a86aef6ebc5733b52146afe26": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "22a977010165defb828b9b1bced692dfc5d8dcda77b5cf91b1094580d2870f94": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T03-02-55-704Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T03-02-55-704Z.json
new file mode 100644
index 0000000..f513c16
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T03-02-55-704Z.json
@@ -0,0 +1,1864 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "5ffd3426f2d954c3c0b2f140ad7236726483a27ba99bc58d90791c82a67c6d1d": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+        "0xef5897693d6CDd1F02C7334B0Bbe8c05837F2080",
+        "0x6B023F114231a380B43a9B191A5299FbDc0E56D7",
+        "0x293Fb4645a6B5186f7A8186A2d6fe59d64f686B9",
+        "0x6B7E602B39CAED0C8202421b64A8B04c75ec1c7B",
+        "0xdb313006460273F3AbaB82FC21bBeAC221152eEc",
+        "0x7c1a1517c5969f998F1A6E2142C6dCaEC091C065"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "7d6a0483eec20497007d902265722dbcabaeac699443a90c0d127c049b997aa5": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "471a697b52458819a6dbc84d23a6f4dd4032c47a86aef6ebc5733b52146afe26": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "22a977010165defb828b9b1bced692dfc5d8dcda77b5cf91b1094580d2870f94": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T03-03-19-077Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T03-03-19-077Z.json
new file mode 100644
index 0000000..f513c16
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T03-03-19-077Z.json
@@ -0,0 +1,1864 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "5ffd3426f2d954c3c0b2f140ad7236726483a27ba99bc58d90791c82a67c6d1d": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+        "0xef5897693d6CDd1F02C7334B0Bbe8c05837F2080",
+        "0x6B023F114231a380B43a9B191A5299FbDc0E56D7",
+        "0x293Fb4645a6B5186f7A8186A2d6fe59d64f686B9",
+        "0x6B7E602B39CAED0C8202421b64A8B04c75ec1c7B",
+        "0xdb313006460273F3AbaB82FC21bBeAC221152eEc",
+        "0x7c1a1517c5969f998F1A6E2142C6dCaEC091C065"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "7d6a0483eec20497007d902265722dbcabaeac699443a90c0d127c049b997aa5": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "471a697b52458819a6dbc84d23a6f4dd4032c47a86aef6ebc5733b52146afe26": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "22a977010165defb828b9b1bced692dfc5d8dcda77b5cf91b1094580d2870f94": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T03-04-09-083Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T03-04-09-083Z.json
new file mode 100644
index 0000000..6981efb
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T03-04-09-083Z.json
@@ -0,0 +1,1865 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "5ffd3426f2d954c3c0b2f140ad7236726483a27ba99bc58d90791c82a67c6d1d": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+        "0xbA0D12f76fB6b387eDE0903aC440eeF26DFB586d",
+        "0xef5897693d6CDd1F02C7334B0Bbe8c05837F2080",
+        "0x6B023F114231a380B43a9B191A5299FbDc0E56D7",
+        "0x293Fb4645a6B5186f7A8186A2d6fe59d64f686B9",
+        "0x6B7E602B39CAED0C8202421b64A8B04c75ec1c7B",
+        "0xdb313006460273F3AbaB82FC21bBeAC221152eEc",
+        "0x7c1a1517c5969f998F1A6E2142C6dCaEC091C065"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "7d6a0483eec20497007d902265722dbcabaeac699443a90c0d127c049b997aa5": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "471a697b52458819a6dbc84d23a6f4dd4032c47a86aef6ebc5733b52146afe26": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "22a977010165defb828b9b1bced692dfc5d8dcda77b5cf91b1094580d2870f94": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T03-07-02-566Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T03-07-02-566Z.json
new file mode 100644
index 0000000..2b0effc
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T03-07-02-566Z.json
@@ -0,0 +1,1866 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "5ffd3426f2d954c3c0b2f140ad7236726483a27ba99bc58d90791c82a67c6d1d": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+        "0x4b61edD0D0EfF522E30ff43BA6D59C9615B4BEe5",
+        "0xbA0D12f76fB6b387eDE0903aC440eeF26DFB586d",
+        "0xef5897693d6CDd1F02C7334B0Bbe8c05837F2080",
+        "0x6B023F114231a380B43a9B191A5299FbDc0E56D7",
+        "0x293Fb4645a6B5186f7A8186A2d6fe59d64f686B9",
+        "0x6B7E602B39CAED0C8202421b64A8B04c75ec1c7B",
+        "0xdb313006460273F3AbaB82FC21bBeAC221152eEc",
+        "0x7c1a1517c5969f998F1A6E2142C6dCaEC091C065"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "7d6a0483eec20497007d902265722dbcabaeac699443a90c0d127c049b997aa5": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "471a697b52458819a6dbc84d23a6f4dd4032c47a86aef6ebc5733b52146afe26": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "22a977010165defb828b9b1bced692dfc5d8dcda77b5cf91b1094580d2870f94": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T03-38-26-763Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T03-38-26-763Z.json
new file mode 100644
index 0000000..197215a
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T03-38-26-763Z.json
@@ -0,0 +1,800 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "beb7bc139344b119de7d3653629aba91747c4f24de51c36e5b4cc0727ae2364a": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0xE31E68cCDEAfd865f1454C8B0E94de6960db5d7A",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xE31E68cCDEAfd865f1454C8B0E94de6960db5d7A",
+        "0xfE6933117cf0e1AF9ec7D9f925ce0cc9D34767E8"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T03-38-49-517Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T03-38-49-517Z.json
new file mode 100644
index 0000000..bddfcdc
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T03-38-49-517Z.json
@@ -0,0 +1,801 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "beb7bc139344b119de7d3653629aba91747c4f24de51c36e5b4cc0727ae2364a": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": []
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0xfe6933117cf0e1af9ec7d9f925ce0cc9d34767e8",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xe31e68ccdeafd865f1454c8b0e94de6960db5d7a"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": []
+    }
+  }
+}
\ No newline at end of file
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T03-39-41-880Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T03-39-41-880Z.json
new file mode 100644
index 0000000..95cbc1b
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T03-39-41-880Z.json
@@ -0,0 +1,1158 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "beb7bc139344b119de7d3653629aba91747c4f24de51c36e5b4cc0727ae2364a": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": []
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0xfe6933117cf0e1af9ec7d9f925ce0cc9d34767e8",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xfe6933117cf0e1af9ec7d9f925ce0cc9d34767e8",
+        "0xff0c27e7429278F44197bb77f343861A7e9bd943",
+        "0xfE6933117cf0e1AF9ec7D9f925ce0cc9D34767E8",
+        "0xe31e68ccdeafd865f1454c8b0e94de6960db5d7a"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "7d7ced0156fc3add3d0e12dabf4151792ca5f3cf28f9768dce611852991ed631": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T03-40-00-624Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T03-40-00-624Z.json
new file mode 100644
index 0000000..4ef2127
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T03-40-00-624Z.json
@@ -0,0 +1,802 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "beb7bc139344b119de7d3653629aba91747c4f24de51c36e5b4cc0727ae2364a": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": []
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0xe31e68ccdeafd865f1454c8b0e94de6960db5d7a",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xfe6933117cf0e1af9ec7d9f925ce0cc9d34767e8",
+        "0xff0c27e7429278f44197bb77f343861a7e9bd943"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": []
+    }
+  }
+}
\ No newline at end of file
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T03-55-49-694Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T03-55-49-694Z.json
new file mode 100644
index 0000000..7658b9d
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T03-55-49-694Z.json
@@ -0,0 +1,1159 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "beb7bc139344b119de7d3653629aba91747c4f24de51c36e5b4cc0727ae2364a": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": []
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0xe31e68ccdeafd865f1454c8b0e94de6960db5d7a",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xe31e68ccdeafd865f1454c8b0e94de6960db5d7a",
+        "0x9e8EA5C12427473e989c390071AAC1DB85fE9ee3",
+        "0xff0c27e7429278F44197bb77f343861A7e9bd943",
+        "0xfe6933117cf0e1af9ec7d9f925ce0cc9d34767e8",
+        "0xff0c27e7429278f44197bb77f343861a7e9bd943"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "a4f1883b7338238b9c4e26e4de76a51a0e35b0f221931d89c7c3e148c6742ce4": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T04-19-17-370Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T04-19-17-370Z.json
new file mode 100644
index 0000000..d7a1959
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T04-19-17-370Z.json
@@ -0,0 +1,1865 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "beb7bc139344b119de7d3653629aba91747c4f24de51c36e5b4cc0727ae2364a": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": []
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0xe31e68ccdeafd865f1454c8b0e94de6960db5d7a",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xe31e68ccdeafd865f1454c8b0e94de6960db5d7a",
+        "0x48Cc9C9b758666F37fD3F88793Ad337Cd947F79A",
+        "0x9e8EA5C12427473e989c390071AAC1DB85fE9ee3",
+        "0xff0c27e7429278F44197bb77f343861A7e9bd943",
+        "0xfe6933117cf0e1af9ec7d9f925ce0cc9d34767e8",
+        "0xff0c27e7429278f44197bb77f343861a7e9bd943"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "a4f1883b7338238b9c4e26e4de76a51a0e35b0f221931d89c7c3e148c6742ce4": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "23ab2e0b163887c4440bc16e2a0cab51213d534f9a03483d889597df7451e7b2": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "7f7471ebbb4d146f675249199249c6cce8e2c9119c7e7bc702a0e1f690bd9b08": {
+      "address": "0xd33b32915cA66Ef9b7A27578e36bC5bb1D75A9da",
+      "txHash": "0x7ec17641ebd0f1dbecf3d294cd8ebdb76fc11cbd4d811e5105118c5f3a57ac45",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-22T18-41-09-330Z.json b/.openzeppelin/backups/citrea-prod-2025-08-22T18-41-09-330Z.json
new file mode 100644
index 0000000..f94cc3f
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-22T18-41-09-330Z.json
@@ -0,0 +1,3003 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "beb7bc139344b119de7d3653629aba91747c4f24de51c36e5b4cc0727ae2364a": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": []
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0xe31e68ccdeafd865f1454c8b0e94de6960db5d7a",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xe31e68ccdeafd865f1454c8b0e94de6960db5d7a",
+        "0x48Cc9C9b758666F37fD3F88793Ad337Cd947F79A",
+        "0x9e8EA5C12427473e989c390071AAC1DB85fE9ee3",
+        "0xff0c27e7429278F44197bb77f343861A7e9bd943",
+        "0xfe6933117cf0e1af9ec7d9f925ce0cc9d34767e8",
+        "0xff0c27e7429278f44197bb77f343861a7e9bd943"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "a4f1883b7338238b9c4e26e4de76a51a0e35b0f221931d89c7c3e148c6742ce4": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "23ab2e0b163887c4440bc16e2a0cab51213d534f9a03483d889597df7451e7b2": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "7f7471ebbb4d146f675249199249c6cce8e2c9119c7e7bc702a0e1f690bd9b08": {
+      "address": "0xd33b32915cA66Ef9b7A27578e36bC5bb1D75A9da",
+      "txHash": "0x7ec17641ebd0f1dbecf3d294cd8ebdb76fc11cbd4d811e5105118c5f3a57ac45",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "b637e210d137519a1ecbcb6afaaaa7ffd964e17e4fe1a1eed93f783ca757960c": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24901",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24339_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25457_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24901": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24339_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25457_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25442_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24339_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25442_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25457_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25442_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "d70cd015f2472a327a7b3c3f51ce82387c6058df566e147f13348f0ec756a97a": {
+      "address": "0x48Cc9C9b758666F37fD3F88793Ad337Cd947F79A",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24738_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24738_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24738_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x48Cc9C9b758666F37fD3F88793Ad337Cd947F79A",
+        "0xFB25d8Bf079Cf72ECe812725F015CCCee0235B88"
+      ]
+    },
+    "9379634d8942428c26234f6cf9663401660e704a50e9547f8a9f926b7618f730": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+        "0xA7a6b1f6aA012c8C94091E33C9e9cDb7F6477842"
+      ]
+    },
+    "21d0e72726907532dea517c6be3291e1c0525e7c3a7d75a502ef7a8d253c022f": {
+      "address": "0x3ac60f9245f5FbEcb044B36a19f2B36e8bce58D1",
+      "txHash": "0x52104ab26f260bde613f29080185cf88f51b6ed4fba21309d373348c77f052db",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24901",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24339_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25457_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24901": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24339_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25457_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25442_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24339_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25442_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25457_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25442_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/citrea-prod-2025-08-26T17-40-19-544Z.json b/.openzeppelin/backups/citrea-prod-2025-08-26T17-40-19-544Z.json
new file mode 100644
index 0000000..cecd8a8
--- /dev/null
+++ b/.openzeppelin/backups/citrea-prod-2025-08-26T17-40-19-544Z.json
@@ -0,0 +1,3710 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "beb7bc139344b119de7d3653629aba91747c4f24de51c36e5b4cc0727ae2364a": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": []
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0xe31e68ccdeafd865f1454c8b0e94de6960db5d7a",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xe31e68ccdeafd865f1454c8b0e94de6960db5d7a",
+        "0x48Cc9C9b758666F37fD3F88793Ad337Cd947F79A",
+        "0x9e8EA5C12427473e989c390071AAC1DB85fE9ee3",
+        "0xff0c27e7429278F44197bb77f343861A7e9bd943",
+        "0xfe6933117cf0e1af9ec7d9f925ce0cc9d34767e8",
+        "0xff0c27e7429278f44197bb77f343861a7e9bd943"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "a4f1883b7338238b9c4e26e4de76a51a0e35b0f221931d89c7c3e148c6742ce4": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "23ab2e0b163887c4440bc16e2a0cab51213d534f9a03483d889597df7451e7b2": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "7f7471ebbb4d146f675249199249c6cce8e2c9119c7e7bc702a0e1f690bd9b08": {
+      "address": "0xd33b32915cA66Ef9b7A27578e36bC5bb1D75A9da",
+      "txHash": "0x7ec17641ebd0f1dbecf3d294cd8ebdb76fc11cbd4d811e5105118c5f3a57ac45",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "b637e210d137519a1ecbcb6afaaaa7ffd964e17e4fe1a1eed93f783ca757960c": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24901",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24339_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25457_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24901": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24339_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25457_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25442_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24339_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25442_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25457_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25442_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "d70cd015f2472a327a7b3c3f51ce82387c6058df566e147f13348f0ec756a97a": {
+      "address": "0x48Cc9C9b758666F37fD3F88793Ad337Cd947F79A",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24738_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24738_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24738_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x48Cc9C9b758666F37fD3F88793Ad337Cd947F79A",
+        "0x6E9447eff6B97BedAa62d2A3c26439328371A2a1",
+        "0xFB25d8Bf079Cf72ECe812725F015CCCee0235B88"
+      ]
+    },
+    "9379634d8942428c26234f6cf9663401660e704a50e9547f8a9f926b7618f730": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+        "0xd569e868Ff29135bC8A7d910D28eB066a76cbf29",
+        "0xA7a6b1f6aA012c8C94091E33C9e9cDb7F6477842"
+      ]
+    },
+    "21d0e72726907532dea517c6be3291e1c0525e7c3a7d75a502ef7a8d253c022f": {
+      "address": "0x3ac60f9245f5FbEcb044B36a19f2B36e8bce58D1",
+      "txHash": "0x52104ab26f260bde613f29080185cf88f51b6ed4fba21309d373348c77f052db",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24901",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24339_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25457_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24901": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24339_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25457_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25442_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24339_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25442_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25457_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25442_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "d667f0d514e893bfd06938e0bb5fc2812f83f94c85e277e9d7dfea48e3159b96": {
+      "address": "0x3ac60f9245f5FbEcb044B36a19f2B36e8bce58D1",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15015",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14453_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15571_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15015": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14453_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15571_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15556_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14453_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15556_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15571_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15556_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "840626c0d66b95f0579d226d1d856564eea9a4c4b190a98da746db54afc55460": {
+      "address": "0xFCfE81b143621969eD95cB153516bdAd5Cbc5F86",
+      "txHash": "0x93db9b0bf3db50c647ef751ed8a3d91aaed4307ffd9d5d87957912cd2f53cbc7",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15015",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14453_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15571_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15015": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14453_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15571_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15556_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14453_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15556_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15571_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15556_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/unknown-5115-2025-08-22T02-00-57-899Z.json b/.openzeppelin/backups/unknown-5115-2025-08-22T02-00-57-899Z.json
new file mode 100644
index 0000000..1fcd87e
--- /dev/null
+++ b/.openzeppelin/backups/unknown-5115-2025-08-22T02-00-57-899Z.json
@@ -0,0 +1,800 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0x971F9bcE130743BB3eFb37aeAC2050cD44d7579a",
+      "kind": "uups"
+    },
+    {
+      "address": "0xe163497F304ad4b7482C84Bc82079d46050c6e93",
+      "kind": "uups"
+    },
+    {
+      "address": "0x59eb810fa5e7c0646902C29D9e8bfdaDf25Ce274",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "302f46445f2244b0b048e631541fc6c5254a7803330f9ebe164adf7f7e33939a": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x77CF00acf6310BAcf3123fA23cE997F86824c3b5",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)9869_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)10410_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)9869_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x77CF00acf6310BAcf3123fA23cE997F86824c3b5",
+        "0xC51E41A9aC52A9CdC4A0c8476B9DFE69E731Dbe1"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/backups/unknown-5115-2025-08-22T02-05-48-424Z.json b/.openzeppelin/backups/unknown-5115-2025-08-22T02-05-48-424Z.json
new file mode 100644
index 0000000..0aa93c1
--- /dev/null
+++ b/.openzeppelin/backups/unknown-5115-2025-08-22T02-05-48-424Z.json
@@ -0,0 +1,1156 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0x971F9bcE130743BB3eFb37aeAC2050cD44d7579a",
+      "kind": "uups"
+    },
+    {
+      "address": "0xe163497F304ad4b7482C84Bc82079d46050c6e93",
+      "kind": "uups"
+    },
+    {
+      "address": "0x59eb810fa5e7c0646902C29D9e8bfdaDf25Ce274",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "302f46445f2244b0b048e631541fc6c5254a7803330f9ebe164adf7f7e33939a": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x77CF00acf6310BAcf3123fA23cE997F86824c3b5",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)9869_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)10410_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)9869_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x77CF00acf6310BAcf3123fA23cE997F86824c3b5",
+        "0xe60e8B6290B3e3e6b2B59960829adbb469Eb2Da6",
+        "0xC51E41A9aC52A9CdC4A0c8476B9DFE69E731Dbe1"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18"
+      ]
+    },
+    "d1d724dd7b7aed8d6081ace035aebaf007e94c3d367e0c0d5c8f90d6e759414c": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/dev/unknown-5115.json b/.openzeppelin/dev/unknown-5115.json
index 53cb326..780bc76 100644
--- a/.openzeppelin/dev/unknown-5115.json
+++ b/.openzeppelin/dev/unknown-5115.json
@@ -2,11 +2,11 @@
   "manifestVersion": "3.2",
   "proxies": [
     {
-      "address": "0xe163497F304ad4b7482C84Bc82079d46050c6e93",
+      "address": "0x971F9bcE130743BB3eFb37aeAC2050cD44d7579a",
       "kind": "uups"
     },
     {
-      "address": "0x971F9bcE130743BB3eFb37aeAC2050cD44d7579a",
+      "address": "0xe163497F304ad4b7482C84Bc82079d46050c6e93",
       "kind": "uups"
     },
     {
@@ -15,59 +15,58 @@
     }
   ],
   "impls": {
-    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
-      "address": "0x96c9f11d3b324e240f8220cf6A1c23BAF7b12EDC",
-      "txHash": "0x51f971c4fce5bcbfb7057d19661415046a524ea70088ef0fcc2f4404e93a0e19",
+    "3a3c6d96b47cdefd7e4cb80b3efe3a6c7a6d9fb184b3e2f954ac26b13a7b0dcc": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
       "layout": {
         "solcVersion": "0.8.24",
         "storage": [
           {
-            "label": "core",
+            "label": "paymentToken",
             "offset": 0,
             "slot": "0",
-            "type": "t_address",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:31"
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
           },
           {
-            "label": "_nextId",
+            "label": "positionContract",
             "offset": 0,
             "slot": "1",
-            "type": "t_uint256",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:34"
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
           },
           {
-            "label": "_totalSupply",
+            "label": "markets",
             "offset": 0,
             "slot": "2",
-            "type": "t_uint256",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:37"
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
           },
           {
-            "label": "_positions",
+            "label": "marketTrees",
             "offset": 0,
             "slot": "3",
-            "type": "t_mapping(t_uint256,t_struct(Position)30514_storage)",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:40"
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
           },
           {
-            "label": "_ownedTokens",
+            "label": "_nextMarketId",
             "offset": 0,
             "slot": "4",
-            "type": "t_mapping(t_address,t_struct(UintSet)12303_storage)",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:43"
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
           },
           {
             "label": "__gap",
             "offset": 0,
             "slot": "5",
-            "type": "t_array(t_uint256)50_storage",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:46"
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
           }
         ],
         "types": {
@@ -79,264 +78,1842 @@
             "label": "bool",
             "numberOfBytes": "1"
           },
-          "t_mapping(t_address,t_bool)": {
-            "label": "mapping(address => bool)",
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
             "numberOfBytes": "32"
           },
-          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
-            "label": "mapping(address => mapping(address => bool))",
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
             "numberOfBytes": "32"
           },
-          "t_mapping(t_address,t_uint256)": {
-            "label": "mapping(address => uint256)",
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_address)": {
-            "label": "mapping(uint256 => address)",
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
             "numberOfBytes": "32"
           },
-          "t_string_storage": {
-            "label": "string",
+          "t_uint256": {
+            "label": "uint256",
             "numberOfBytes": "32"
           },
-          "t_struct(ERC721Storage)240_storage": {
-            "label": "struct ERC721Upgradeable.ERC721Storage",
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
             "members": [
               {
-                "label": "_name",
-                "type": "t_string_storage",
+                "label": "isActive",
+                "type": "t_bool",
                 "offset": 0,
                 "slot": "0"
               },
               {
-                "label": "_symbol",
-                "type": "t_string_storage",
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
                 "offset": 0,
                 "slot": "1"
               },
               {
-                "label": "_owners",
-                "type": "t_mapping(t_uint256,t_address)",
+                "label": "minTick",
+                "type": "t_int256",
                 "offset": 0,
                 "slot": "2"
               },
               {
-                "label": "_balances",
-                "type": "t_mapping(t_address,t_uint256)",
+                "label": "maxTick",
+                "type": "t_int256",
                 "offset": 0,
                 "slot": "3"
               },
               {
-                "label": "_tokenApprovals",
-                "type": "t_mapping(t_uint256,t_address)",
+                "label": "tickSpacing",
+                "type": "t_int256",
                 "offset": 0,
                 "slot": "4"
               },
               {
-                "label": "_operatorApprovals",
-                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "label": "numBins",
+                "type": "t_uint32",
                 "offset": 0,
                 "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
               }
             ],
-            "numberOfBytes": "192"
+            "numberOfBytes": "256"
           },
-          "t_struct(InitializableStorage)73_storage": {
-            "label": "struct Initializable.InitializableStorage",
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
             "members": [
               {
-                "label": "_initialized",
-                "type": "t_uint64",
+                "label": "sum",
+                "type": "t_uint256",
                 "offset": 0,
                 "slot": "0"
               },
               {
-                "label": "_initializing",
-                "type": "t_bool",
-                "offset": 8,
-                "slot": "0"
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
               }
             ],
-            "numberOfBytes": "32"
+            "numberOfBytes": "64"
           },
-          "t_struct(OwnableStorage)13_storage": {
-            "label": "struct OwnableUpgradeable.OwnableStorage",
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
             "members": [
               {
-                "label": "_owner",
-                "type": "t_address",
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
                 "offset": 0,
                 "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
               }
             ],
-            "numberOfBytes": "32"
-          },
-          "t_uint256": {
-            "label": "uint256",
-            "numberOfBytes": "32"
-          },
-          "t_uint64": {
-            "label": "uint64",
-            "numberOfBytes": "8"
-          },
-          "t_array(t_bytes32)dyn_storage": {
-            "label": "bytes32[]",
-            "numberOfBytes": "32"
-          },
-          "t_array(t_uint256)50_storage": {
-            "label": "uint256[50]",
-            "numberOfBytes": "1600"
-          },
-          "t_bytes32": {
-            "label": "bytes32",
-            "numberOfBytes": "32"
-          },
-          "t_int256": {
-            "label": "int256",
-            "numberOfBytes": "32"
+            "numberOfBytes": "96"
           },
-          "t_mapping(t_address,t_struct(UintSet)12303_storage)": {
-            "label": "mapping(address => struct EnumerableSet.UintSet)",
-            "numberOfBytes": "32"
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
           },
-          "t_mapping(t_bytes32,t_uint256)": {
-            "label": "mapping(bytes32 => uint256)",
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x6178e97FE629C7BE10c67CDc060E109AF229B68c",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)9869_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)10410_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)9869_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x6178e97FE629C7BE10c67CDc060E109AF229B68c",
+        "0xFad9b208E3f7b64cdD2a9361Eb63c8b8C8Eb8BdD"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "ba01dfe54af3e1b1f0ad74a48fac6babc71467ff23f6ce624818f994df73ca64": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15015",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14453_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15571_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15015": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14453_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15571_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15556_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14453_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15556_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15571_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15556_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "d70cd015f2472a327a7b3c3f51ce82387c6058df566e147f13348f0ec756a97a": {
+      "address": "0xFad9b208E3f7b64cdD2a9361Eb63c8b8C8Eb8BdD",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24764_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24764_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24764_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xFad9b208E3f7b64cdD2a9361Eb63c8b8C8Eb8BdD",
+        "0xC1BdbD391FeA333ff760cd74eb2b22Cc57993000",
+        "0x7F7082701Cb7D7a5E34D507EF842Eaa622784143",
+        "0xC1A353Df0F0701b74501657C9E16EC0e09A74B0c"
+      ]
+    },
+    "9379634d8942428c26234f6cf9663401660e704a50e9547f8a9f926b7618f730": {
+      "address": "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Position)30514_storage)": {
-            "label": "mapping(uint256 => struct ICLMSRPositionUpgradeable.Position)",
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+        "0x5fA83312300eb8f26253A1bEa798a7438B2fAF4d",
+        "0xbcBC6cac1d7011BF6CD3faBC25f6ecEe719e6210"
+      ]
+    },
+    "002bcecaf0d4bf43c26df43838d37bf1efe4df3653c1c0372c8fb523b77751ad": {
+      "address": "0x5Cd908141036CD72f4080af66688DfD60F5Ac636",
+      "txHash": "0x03edd0dd579c2aae76d2f9825d00dec3a5a1193411afc6a39860a978f7a857c6",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15015",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14453_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15571_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15015": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14453_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15571_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
             "numberOfBytes": "32"
           },
-          "t_struct(Position)30514_storage": {
-            "label": "struct ICLMSRPositionUpgradeable.Position",
+          "t_mapping(t_uint32,t_struct(Node)15556_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14453_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15556_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
             "members": [
               {
-                "label": "marketId",
+                "label": "sum",
                 "type": "t_uint256",
                 "offset": 0,
                 "slot": "0"
               },
               {
-                "label": "lowerTick",
-                "type": "t_int256",
+                "label": "pendingFactor",
+                "type": "t_uint192",
                 "offset": 0,
                 "slot": "1"
               },
               {
-                "label": "upperTick",
-                "type": "t_int256",
-                "offset": 0,
-                "slot": "2"
-              },
-              {
-                "label": "quantity",
-                "type": "t_uint128",
-                "offset": 0,
-                "slot": "3"
-              },
-              {
-                "label": "createdAt",
+                "label": "childPtr",
                 "type": "t_uint64",
-                "offset": 16,
-                "slot": "3"
+                "offset": 24,
+                "slot": "1"
               }
             ],
-            "numberOfBytes": "128"
+            "numberOfBytes": "64"
           },
-          "t_struct(Set)11762_storage": {
-            "label": "struct EnumerableSet.Set",
+          "t_struct(Tree)15571_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
             "members": [
               {
-                "label": "_values",
-                "type": "t_array(t_bytes32)dyn_storage",
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15556_storage)",
                 "offset": 0,
                 "slot": "0"
               },
               {
-                "label": "_positions",
-                "type": "t_mapping(t_bytes32,t_uint256)",
+                "label": "root",
+                "type": "t_uint32",
                 "offset": 0,
                 "slot": "1"
-              }
-            ],
-            "numberOfBytes": "64"
-          },
-          "t_struct(UintSet)12303_storage": {
-            "label": "struct EnumerableSet.UintSet",
-            "members": [
+              },
               {
-                "label": "_inner",
-                "type": "t_struct(Set)11762_storage",
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
                 "offset": 0,
-                "slot": "0"
+                "slot": "2"
               }
             ],
-            "numberOfBytes": "64"
+            "numberOfBytes": "96"
           },
-          "t_uint128": {
-            "label": "uint128",
-            "numberOfBytes": "16"
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
           }
         },
         "namespaces": {
-          "erc7201:openzeppelin.storage.Ownable": [
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
             {
-              "contract": "OwnableUpgradeable",
-              "label": "_owner",
-              "type": "t_address",
-              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
               "offset": 0,
               "slot": "0"
             }
           ],
-          "erc7201:openzeppelin.storage.ERC721": [
+          "erc7201:openzeppelin.storage.Pausable": [
             {
-              "contract": "ERC721Upgradeable",
-              "label": "_name",
-              "type": "t_string_storage",
-              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
               "offset": 0,
               "slot": "0"
-            },
-            {
-              "contract": "ERC721Upgradeable",
-              "label": "_symbol",
-              "type": "t_string_storage",
-              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
-              "offset": 0,
-              "slot": "1"
-            },
-            {
-              "contract": "ERC721Upgradeable",
-              "label": "_owners",
-              "type": "t_mapping(t_uint256,t_address)",
-              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
-              "offset": 0,
-              "slot": "2"
-            },
-            {
-              "contract": "ERC721Upgradeable",
-              "label": "_balances",
-              "type": "t_mapping(t_address,t_uint256)",
-              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
-              "offset": 0,
-              "slot": "3"
-            },
-            {
-              "contract": "ERC721Upgradeable",
-              "label": "_tokenApprovals",
-              "type": "t_mapping(t_uint256,t_address)",
-              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
-              "offset": 0,
-              "slot": "4"
-            },
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
             {
-              "contract": "ERC721Upgradeable",
-              "label": "_operatorApprovals",
-              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
-              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
               "offset": 0,
-              "slot": "5"
+              "slot": "0"
             }
           ],
           "erc7201:openzeppelin.storage.Initializable": [
@@ -358,14 +1935,11 @@
             }
           ]
         }
-      },
-      "allAddresses": [
-        "0x96c9f11d3b324e240f8220cf6A1c23BAF7b12EDC"
-      ]
+      }
     },
-    "707a2fc9bec931a48fb1b1311762f61ad1b99f4fbc9984075ed6dff65e1adda5": {
-      "address": "0xD9eB553f9D998ECC6b8F12D6BB9D69f20706972d",
-      "txHash": "0xc839ed89ccbcef8cad8379ab550ff395d10d2187a320984bc55965625993fd15",
+    "c78ac0fe3bdc7af4b55f3a3b54826faed8126f6998ceac379ebe3a7e1d561cf6": {
+      "address": "0xE0E8a766d1101F16baC88Cd148108709A1263bE8",
+      "txHash": "0x9f1449bef2cc0badb0383aae66ea060432f328968d9a51496822d703aa5edd59",
       "layout": {
         "solcVersion": "0.8.24",
         "storage": [
@@ -374,48 +1948,48 @@
             "offset": 0,
             "slot": "0",
             "type": "t_contract(IERC20)1482",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:69"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
           },
           {
             "label": "positionContract",
             "offset": 0,
             "slot": "1",
-            "type": "t_contract(ICLMSRPositionUpgradeable)14579",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:72"
+            "type": "t_contract(ICLMSRPosition)15041",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
           },
           {
             "label": "markets",
             "offset": 0,
             "slot": "2",
-            "type": "t_mapping(t_uint256,t_struct(Market)14049_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:77"
+            "type": "t_mapping(t_uint256,t_struct(Market)14473_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
           },
           {
             "label": "marketTrees",
             "offset": 0,
             "slot": "3",
-            "type": "t_mapping(t_uint256,t_struct(Tree)15135_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:80"
+            "type": "t_mapping(t_uint256,t_struct(Tree)15597_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
           },
           {
             "label": "_nextMarketId",
             "offset": 0,
             "slot": "4",
             "type": "t_uint256",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:83"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
           },
           {
             "label": "__gap",
             "offset": 0,
             "slot": "5",
             "type": "t_array(t_uint256)49_storage",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:86"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
           }
         ],
         "types": {
@@ -493,8 +2067,8 @@
             "label": "uint256[49]",
             "numberOfBytes": "1568"
           },
-          "t_contract(ICLMSRPositionUpgradeable)14579": {
-            "label": "contract ICLMSRPositionUpgradeable",
+          "t_contract(ICLMSRPosition)15041": {
+            "label": "contract ICLMSRPosition",
             "numberOfBytes": "20"
           },
           "t_contract(IERC20)1482": {
@@ -505,20 +2079,20 @@
             "label": "int256",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Market)14049_storage)": {
-            "label": "mapping(uint256 => struct ICLMSRMarketCoreUpgradeable.Market)",
+          "t_mapping(t_uint256,t_struct(Market)14473_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Tree)15135_storage)": {
+          "t_mapping(t_uint256,t_struct(Tree)15597_storage)": {
             "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint32,t_struct(Node)15120_storage)": {
+          "t_mapping(t_uint32,t_struct(Node)15582_storage)": {
             "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
             "numberOfBytes": "32"
           },
-          "t_struct(Market)14049_storage": {
-            "label": "struct ICLMSRMarketCoreUpgradeable.Market",
+          "t_struct(Market)14473_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
             "members": [
               {
                 "label": "isActive",
@@ -551,39 +2125,57 @@
                 "slot": "1"
               },
               {
-                "label": "minTick",
+                "label": "settlementValue",
                 "type": "t_int256",
                 "offset": 0,
                 "slot": "2"
               },
               {
-                "label": "maxTick",
+                "label": "minTick",
                 "type": "t_int256",
                 "offset": 0,
                 "slot": "3"
               },
               {
-                "label": "tickSpacing",
+                "label": "maxTick",
                 "type": "t_int256",
                 "offset": 0,
                 "slot": "4"
               },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "5"
+              },
               {
                 "label": "numBins",
                 "type": "t_uint32",
                 "offset": 0,
-                "slot": "5"
+                "slot": "6"
               },
               {
                 "label": "liquidityParameter",
                 "type": "t_uint256",
                 "offset": 0,
-                "slot": "6"
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "8"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "8"
               }
             ],
-            "numberOfBytes": "224"
+            "numberOfBytes": "288"
           },
-          "t_struct(Node)15120_storage": {
+          "t_struct(Node)15582_storage": {
             "label": "struct LazyMulSegmentTree.Node",
             "members": [
               {
@@ -607,12 +2199,12 @@
             ],
             "numberOfBytes": "64"
           },
-          "t_struct(Tree)15135_storage": {
+          "t_struct(Tree)15597_storage": {
             "label": "struct LazyMulSegmentTree.Tree",
             "members": [
               {
                 "label": "nodes",
-                "type": "t_mapping(t_uint32,t_struct(Node)15120_storage)",
+                "type": "t_mapping(t_uint32,t_struct(Node)15582_storage)",
                 "offset": 0,
                 "slot": "0"
               },
@@ -702,95 +2294,14 @@
             }
           ]
         }
-      }
-    },
-    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
-      "address": "0x8dc82fe1Bb0A384c06A77C57c0306786b022e6B8",
-      "txHash": "0x3a3e28a1d6326b6697bc42b68d89a63a3a5c9648ff32dedce64ebf60e87e489f",
-      "layout": {
-        "solcVersion": "0.8.24",
-        "storage": [],
-        "types": {
-          "t_address": {
-            "label": "address",
-            "numberOfBytes": "20"
-          },
-          "t_bool": {
-            "label": "bool",
-            "numberOfBytes": "1"
-          },
-          "t_struct(InitializableStorage)73_storage": {
-            "label": "struct Initializable.InitializableStorage",
-            "members": [
-              {
-                "label": "_initialized",
-                "type": "t_uint64",
-                "offset": 0,
-                "slot": "0"
-              },
-              {
-                "label": "_initializing",
-                "type": "t_bool",
-                "offset": 8,
-                "slot": "0"
-              }
-            ],
-            "numberOfBytes": "32"
-          },
-          "t_struct(OwnableStorage)13_storage": {
-            "label": "struct OwnableUpgradeable.OwnableStorage",
-            "members": [
-              {
-                "label": "_owner",
-                "type": "t_address",
-                "offset": 0,
-                "slot": "0"
-              }
-            ],
-            "numberOfBytes": "32"
-          },
-          "t_uint64": {
-            "label": "uint64",
-            "numberOfBytes": "8"
-          }
-        },
-        "namespaces": {
-          "erc7201:openzeppelin.storage.Ownable": [
-            {
-              "contract": "OwnableUpgradeable",
-              "label": "_owner",
-              "type": "t_address",
-              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
-              "offset": 0,
-              "slot": "0"
-            }
-          ],
-          "erc7201:openzeppelin.storage.Initializable": [
-            {
-              "contract": "Initializable",
-              "label": "_initialized",
-              "type": "t_uint64",
-              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
-              "offset": 0,
-              "slot": "0"
-            },
-            {
-              "contract": "Initializable",
-              "label": "_initializing",
-              "type": "t_bool",
-              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
-              "offset": 8,
-              "slot": "0"
-            }
-          ]
-        }
       },
       "allAddresses": [
-        "0x8dc82fe1Bb0A384c06A77C57c0306786b022e6B8"
+        "0xE0E8a766d1101F16baC88Cd148108709A1263bE8",
+        "0x5Cd908141036CD72f4080af66688DfD60F5Ac636"
       ]
     },
-    "c2f0777f45ba30e504f0933ed885290357d0ab75977392fed640dee0ef001909": {
-      "address": "0xD9eB553f9D998ECC6b8F12D6BB9D69f20706972d",
+    "d562eafb546fb98cc684d854b30b8458499cfede0c08dd1b8d761097b79102f9": {
+      "address": "0x5Cd908141036CD72f4080af66688DfD60F5Ac636",
       "layout": {
         "solcVersion": "0.8.24",
         "storage": [
@@ -799,48 +2310,48 @@
             "offset": 0,
             "slot": "0",
             "type": "t_contract(IERC20)1482",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:69"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
           },
           {
             "label": "positionContract",
             "offset": 0,
             "slot": "1",
-            "type": "t_contract(ICLMSRPositionUpgradeable)14741",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:72"
+            "type": "t_contract(ICLMSRPosition)15041",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
           },
           {
             "label": "markets",
             "offset": 0,
             "slot": "2",
-            "type": "t_mapping(t_uint256,t_struct(Market)14193_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:77"
+            "type": "t_mapping(t_uint256,t_struct(Market)14473_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
           },
           {
             "label": "marketTrees",
             "offset": 0,
             "slot": "3",
-            "type": "t_mapping(t_uint256,t_struct(Tree)15297_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:80"
+            "type": "t_mapping(t_uint256,t_struct(Tree)15597_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
           },
           {
             "label": "_nextMarketId",
             "offset": 0,
             "slot": "4",
             "type": "t_uint256",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:83"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
           },
           {
             "label": "__gap",
             "offset": 0,
             "slot": "5",
             "type": "t_array(t_uint256)49_storage",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:86"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
           }
         ],
         "types": {
@@ -918,8 +2429,8 @@
             "label": "uint256[49]",
             "numberOfBytes": "1568"
           },
-          "t_contract(ICLMSRPositionUpgradeable)14741": {
-            "label": "contract ICLMSRPositionUpgradeable",
+          "t_contract(ICLMSRPosition)15041": {
+            "label": "contract ICLMSRPosition",
             "numberOfBytes": "20"
           },
           "t_contract(IERC20)1482": {
@@ -930,20 +2441,20 @@
             "label": "int256",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Market)14193_storage)": {
-            "label": "mapping(uint256 => struct ICLMSRMarketCoreUpgradeable.Market)",
+          "t_mapping(t_uint256,t_struct(Market)14473_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Tree)15297_storage)": {
+          "t_mapping(t_uint256,t_struct(Tree)15597_storage)": {
             "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint32,t_struct(Node)15282_storage)": {
+          "t_mapping(t_uint32,t_struct(Node)15582_storage)": {
             "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
             "numberOfBytes": "32"
           },
-          "t_struct(Market)14193_storage": {
-            "label": "struct ICLMSRMarketCoreUpgradeable.Market",
+          "t_struct(Market)14473_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
             "members": [
               {
                 "label": "isActive",
@@ -1016,11 +2527,17 @@
                 "type": "t_bool",
                 "offset": 4,
                 "slot": "7"
+              },
+              {
+                "label": "settlementValue",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "8"
               }
             ],
-            "numberOfBytes": "256"
+            "numberOfBytes": "288"
           },
-          "t_struct(Node)15282_storage": {
+          "t_struct(Node)15582_storage": {
             "label": "struct LazyMulSegmentTree.Node",
             "members": [
               {
@@ -1044,12 +2561,12 @@
             ],
             "numberOfBytes": "64"
           },
-          "t_struct(Tree)15297_storage": {
+          "t_struct(Tree)15597_storage": {
             "label": "struct LazyMulSegmentTree.Tree",
             "members": [
               {
                 "label": "nodes",
-                "type": "t_mapping(t_uint32,t_struct(Node)15282_storage)",
+                "type": "t_mapping(t_uint32,t_struct(Node)15582_storage)",
                 "offset": 0,
                 "slot": "0"
               },
@@ -1141,9 +2658,9 @@
         }
       }
     },
-    "7213ddf437f22555b326d0adc1b7998f0f8e2fc5f8a1a6a2027f862fea530a5e": {
-      "address": "0x0265afe69861d8d0ef763Cb2fA45D86C5305d64f",
-      "txHash": "0x89258efb2249a8b0cc73c0c3a55208dc94efb4e8158e827f622bb4da7c17ddf7",
+    "e96aafcb014b18cd7d857bb8072c5f04bbdad9059aeff66e7fd3ff3f04c4ab19": {
+      "address": "0x00794120961E4D08346f64F2A620860bC9E2417B",
+      "txHash": "0xa9b0da54279cb4b85631e4f4ab3a4a9ff4b740aeea1f58eb19655970e478525b",
       "layout": {
         "solcVersion": "0.8.24",
         "storage": [
@@ -1152,48 +2669,48 @@
             "offset": 0,
             "slot": "0",
             "type": "t_contract(IERC20)1482",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:69"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
           },
           {
             "label": "positionContract",
             "offset": 0,
             "slot": "1",
-            "type": "t_contract(ICLMSRPositionUpgradeable)14741",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:72"
+            "type": "t_contract(ICLMSRPosition)15041",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
           },
           {
             "label": "markets",
             "offset": 0,
             "slot": "2",
-            "type": "t_mapping(t_uint256,t_struct(Market)14193_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:77"
+            "type": "t_mapping(t_uint256,t_struct(Market)14473_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
           },
           {
             "label": "marketTrees",
             "offset": 0,
             "slot": "3",
-            "type": "t_mapping(t_uint256,t_struct(Tree)15297_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:80"
+            "type": "t_mapping(t_uint256,t_struct(Tree)15597_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
           },
           {
             "label": "_nextMarketId",
             "offset": 0,
             "slot": "4",
             "type": "t_uint256",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:83"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
           },
           {
             "label": "__gap",
             "offset": 0,
             "slot": "5",
             "type": "t_array(t_uint256)49_storage",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:86"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
           }
         ],
         "types": {
@@ -1271,8 +2788,8 @@
             "label": "uint256[49]",
             "numberOfBytes": "1568"
           },
-          "t_contract(ICLMSRPositionUpgradeable)14741": {
-            "label": "contract ICLMSRPositionUpgradeable",
+          "t_contract(ICLMSRPosition)15041": {
+            "label": "contract ICLMSRPosition",
             "numberOfBytes": "20"
           },
           "t_contract(IERC20)1482": {
@@ -1283,20 +2800,20 @@
             "label": "int256",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Market)14193_storage)": {
-            "label": "mapping(uint256 => struct ICLMSRMarketCoreUpgradeable.Market)",
+          "t_mapping(t_uint256,t_struct(Market)14473_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Tree)15297_storage)": {
+          "t_mapping(t_uint256,t_struct(Tree)15597_storage)": {
             "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint32,t_struct(Node)15282_storage)": {
+          "t_mapping(t_uint32,t_struct(Node)15582_storage)": {
             "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
             "numberOfBytes": "32"
           },
-          "t_struct(Market)14193_storage": {
-            "label": "struct ICLMSRMarketCoreUpgradeable.Market",
+          "t_struct(Market)14473_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
             "members": [
               {
                 "label": "isActive",
@@ -1369,11 +2886,17 @@
                 "type": "t_bool",
                 "offset": 4,
                 "slot": "7"
+              },
+              {
+                "label": "settlementValue",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "8"
               }
             ],
-            "numberOfBytes": "256"
+            "numberOfBytes": "288"
           },
-          "t_struct(Node)15282_storage": {
+          "t_struct(Node)15582_storage": {
             "label": "struct LazyMulSegmentTree.Node",
             "members": [
               {
@@ -1397,12 +2920,12 @@
             ],
             "numberOfBytes": "64"
           },
-          "t_struct(Tree)15297_storage": {
+          "t_struct(Tree)15597_storage": {
             "label": "struct LazyMulSegmentTree.Tree",
             "members": [
               {
                 "label": "nodes",
-                "type": "t_mapping(t_uint32,t_struct(Node)15282_storage)",
+                "type": "t_mapping(t_uint32,t_struct(Node)15582_storage)",
                 "offset": 0,
                 "slot": "0"
               },
diff --git a/.openzeppelin/dev/unknown-5115.json.backup.1756229581 b/.openzeppelin/dev/unknown-5115.json.backup.1756229581
new file mode 100644
index 0000000..3dacc22
--- /dev/null
+++ b/.openzeppelin/dev/unknown-5115.json.backup.1756229581
@@ -0,0 +1,2312 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0x971F9bcE130743BB3eFb37aeAC2050cD44d7579a",
+      "kind": "uups"
+    },
+    {
+      "address": "0xe163497F304ad4b7482C84Bc82079d46050c6e93",
+      "kind": "uups"
+    },
+    {
+      "address": "0x59eb810fa5e7c0646902C29D9e8bfdaDf25Ce274",
+      "kind": "uups"
+    },
+    {
+      "address": "0x5839b8074d009BA4F52C639820245b83315173b5",
+      "kind": "uups"
+    },
+    {
+      "address": "0xA34bA8dafb3a6B7526b37d8A7C9dda4819A317ee",
+      "kind": "uups"
+    },
+    {
+      "address": "0x8002F29071B12a0F322656a39d3C6c8846a24ac2",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "3a3c6d96b47cdefd7e4cb80b3efe3a6c7a6d9fb184b3e2f954ac26b13a7b0dcc": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x6178e97FE629C7BE10c67CDc060E109AF229B68c",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)9869_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)10410_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)9869_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x6178e97FE629C7BE10c67CDc060E109AF229B68c",
+        "0xFad9b208E3f7b64cdD2a9361Eb63c8b8C8Eb8BdD"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "ba01dfe54af3e1b1f0ad74a48fac6babc71467ff23f6ce624818f994df73ca64": {
+      "address": "0xcD6dB5d6bD30db1c2Ce58BAdEfA62810CfD20abA",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15015",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14453_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15571_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15015": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14453_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15571_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15556_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14453_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15556_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15571_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15556_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "d70cd015f2472a327a7b3c3f51ce82387c6058df566e147f13348f0ec756a97a": {
+      "address": "0xFad9b208E3f7b64cdD2a9361Eb63c8b8C8Eb8BdD",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24738_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24738_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24738_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xFad9b208E3f7b64cdD2a9361Eb63c8b8C8Eb8BdD",
+        "0xC1A353Df0F0701b74501657C9E16EC0e09A74B0c"
+      ]
+    },
+    "9379634d8942428c26234f6cf9663401660e704a50e9547f8a9f926b7618f730": {
+      "address": "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xB39DEd204b3FE2390Bdc76158a112C0C56661C18",
+        "0xbcBC6cac1d7011BF6CD3faBC25f6ecEe719e6210"
+      ]
+    },
+    "002bcecaf0d4bf43c26df43838d37bf1efe4df3653c1c0372c8fb523b77751ad": {
+      "address": "0x5Cd908141036CD72f4080af66688DfD60F5Ac636",
+      "txHash": "0x03edd0dd579c2aae76d2f9825d00dec3a5a1193411afc6a39860a978f7a857c6",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15015",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14453_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15571_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15015": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14453_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15571_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15556_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14453_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15556_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15571_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15556_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c78ac0fe3bdc7af4b55f3a3b54826faed8126f6998ceac379ebe3a7e1d561cf6": {
+      "address": "0xE0E8a766d1101F16baC88Cd148108709A1263bE8",
+      "txHash": "0x9f1449bef2cc0badb0383aae66ea060432f328968d9a51496822d703aa5edd59",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15041",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14473_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15597_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15041": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14473_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15597_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15582_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14473_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "settlementValue",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "8"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "8"
+              }
+            ],
+            "numberOfBytes": "288"
+          },
+          "t_struct(Node)15582_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15597_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15582_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xE0E8a766d1101F16baC88Cd148108709A1263bE8"
+      ]
+    }
+  }
+}
diff --git a/.openzeppelin/prod/unknown-5115.json b/.openzeppelin/prod/unknown-5115.json
index 068dffa..480474d 100644
--- a/.openzeppelin/prod/unknown-5115.json
+++ b/.openzeppelin/prod/unknown-5115.json
@@ -2,75 +2,71 @@
   "manifestVersion": "3.2",
   "proxies": [
     {
-      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
-      "txHash": "0x31775c1cbd57e3b8424c7ff545a95b212fc02e27018692fd90e519209d4e1fd2",
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
       "kind": "uups"
     },
     {
-      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
-      "txHash": "0x42830469e55ae6c19bf382faa7a57d81f11c299cb7198a0f7f0f1deda724f28a",
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
       "kind": "uups"
     },
     {
       "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
-      "txHash": "0xe78b8245f2566a2415e42381ab3525a4da3d0009fbae20c25046788ba83bed81",
       "kind": "uups"
     }
   ],
   "impls": {
-    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
-      "address": "0xB842e4494cABC27F8E622176289EFd6121eDf2d6",
-      "txHash": "0x9b825e103b4d47d9147dc2111b3fe9ec0a926e7fe412af03cfb8e7266a392801",
+    "beb7bc139344b119de7d3653629aba91747c4f24de51c36e5b4cc0727ae2364a": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
       "layout": {
         "solcVersion": "0.8.24",
         "storage": [
           {
-            "label": "core",
+            "label": "paymentToken",
             "offset": 0,
             "slot": "0",
-            "type": "t_address",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:31"
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
           },
           {
-            "label": "_nextId",
+            "label": "positionContract",
             "offset": 0,
             "slot": "1",
-            "type": "t_uint256",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:34"
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
           },
           {
-            "label": "_totalSupply",
+            "label": "markets",
             "offset": 0,
             "slot": "2",
-            "type": "t_uint256",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:37"
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
           },
           {
-            "label": "_positions",
+            "label": "marketTrees",
             "offset": 0,
             "slot": "3",
-            "type": "t_mapping(t_uint256,t_struct(Position)30756_storage)",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:40"
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
           },
           {
-            "label": "_ownedTokens",
+            "label": "_nextMarketId",
             "offset": 0,
             "slot": "4",
-            "type": "t_mapping(t_address,t_struct(UintSet)12303_storage)",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:43"
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
           },
           {
             "label": "__gap",
             "offset": 0,
             "slot": "5",
-            "type": "t_array(t_uint256)50_storage",
-            "contract": "CLMSRPositionUpgradeable",
-            "src": "contracts/core/CLMSRPositionUpgradeable.sol:46"
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
           }
         ],
         "types": {
@@ -82,68 +78,6 @@
             "label": "bool",
             "numberOfBytes": "1"
           },
-          "t_mapping(t_address,t_bool)": {
-            "label": "mapping(address => bool)",
-            "numberOfBytes": "32"
-          },
-          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
-            "label": "mapping(address => mapping(address => bool))",
-            "numberOfBytes": "32"
-          },
-          "t_mapping(t_address,t_uint256)": {
-            "label": "mapping(address => uint256)",
-            "numberOfBytes": "32"
-          },
-          "t_mapping(t_uint256,t_address)": {
-            "label": "mapping(uint256 => address)",
-            "numberOfBytes": "32"
-          },
-          "t_string_storage": {
-            "label": "string",
-            "numberOfBytes": "32"
-          },
-          "t_struct(ERC721Storage)240_storage": {
-            "label": "struct ERC721Upgradeable.ERC721Storage",
-            "members": [
-              {
-                "label": "_name",
-                "type": "t_string_storage",
-                "offset": 0,
-                "slot": "0"
-              },
-              {
-                "label": "_symbol",
-                "type": "t_string_storage",
-                "offset": 0,
-                "slot": "1"
-              },
-              {
-                "label": "_owners",
-                "type": "t_mapping(t_uint256,t_address)",
-                "offset": 0,
-                "slot": "2"
-              },
-              {
-                "label": "_balances",
-                "type": "t_mapping(t_address,t_uint256)",
-                "offset": 0,
-                "slot": "3"
-              },
-              {
-                "label": "_tokenApprovals",
-                "type": "t_mapping(t_uint256,t_address)",
-                "offset": 0,
-                "slot": "4"
-              },
-              {
-                "label": "_operatorApprovals",
-                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
-                "offset": 0,
-                "slot": "5"
-              }
-            ],
-            "numberOfBytes": "192"
-          },
           "t_struct(InitializableStorage)73_storage": {
             "label": "struct Initializable.InitializableStorage",
             "members": [
@@ -174,6 +108,30 @@
             ],
             "numberOfBytes": "32"
           },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
           "t_uint256": {
             "label": "uint256",
             "numberOfBytes": "32"
@@ -182,164 +140,3551 @@
             "label": "uint64",
             "numberOfBytes": "8"
           },
-          "t_array(t_bytes32)dyn_storage": {
-            "label": "bytes32[]",
-            "numberOfBytes": "32"
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
           },
-          "t_array(t_uint256)50_storage": {
-            "label": "uint256[50]",
-            "numberOfBytes": "1600"
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
           },
-          "t_bytes32": {
-            "label": "bytes32",
-            "numberOfBytes": "32"
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
           },
           "t_int256": {
             "label": "int256",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_address,t_struct(UintSet)12303_storage)": {
-            "label": "mapping(address => struct EnumerableSet.UintSet)",
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_bytes32,t_uint256)": {
-            "label": "mapping(bytes32 => uint256)",
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Position)30756_storage)": {
-            "label": "mapping(uint256 => struct ICLMSRPositionUpgradeable.Position)",
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
             "numberOfBytes": "32"
           },
-          "t_struct(Position)30756_storage": {
-            "label": "struct ICLMSRPositionUpgradeable.Position",
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
             "members": [
               {
-                "label": "marketId",
-                "type": "t_uint256",
+                "label": "isActive",
+                "type": "t_bool",
                 "offset": 0,
                 "slot": "0"
               },
               {
-                "label": "lowerTick",
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
                 "type": "t_int256",
                 "offset": 0,
                 "slot": "1"
               },
               {
-                "label": "upperTick",
+                "label": "minTick",
                 "type": "t_int256",
                 "offset": 0,
                 "slot": "2"
               },
               {
-                "label": "quantity",
-                "type": "t_uint128",
+                "label": "maxTick",
+                "type": "t_int256",
                 "offset": 0,
                 "slot": "3"
               },
               {
-                "label": "createdAt",
-                "type": "t_uint64",
-                "offset": 16,
-                "slot": "3"
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
               }
             ],
-            "numberOfBytes": "128"
+            "numberOfBytes": "256"
           },
-          "t_struct(Set)11762_storage": {
-            "label": "struct EnumerableSet.Set",
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
             "members": [
               {
-                "label": "_values",
-                "type": "t_array(t_bytes32)dyn_storage",
+                "label": "sum",
+                "type": "t_uint256",
                 "offset": 0,
                 "slot": "0"
               },
               {
-                "label": "_positions",
-                "type": "t_mapping(t_bytes32,t_uint256)",
+                "label": "pendingFactor",
+                "type": "t_uint192",
                 "offset": 0,
                 "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
               }
             ],
             "numberOfBytes": "64"
           },
-          "t_struct(UintSet)12303_storage": {
-            "label": "struct EnumerableSet.UintSet",
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
             "members": [
               {
-                "label": "_inner",
-                "type": "t_struct(Set)11762_storage",
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
                 "offset": 0,
                 "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
               }
             ],
-            "numberOfBytes": "64"
+            "numberOfBytes": "96"
           },
-          "t_uint128": {
-            "label": "uint128",
-            "numberOfBytes": "16"
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
           }
         },
         "namespaces": {
-          "erc7201:openzeppelin.storage.Ownable": [
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
             {
-              "contract": "OwnableUpgradeable",
-              "label": "_owner",
-              "type": "t_address",
-              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
-              "offset": 0,
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
               "slot": "0"
             }
           ],
-          "erc7201:openzeppelin.storage.ERC721": [
+          "erc7201:openzeppelin.storage.Pausable": [
             {
-              "contract": "ERC721Upgradeable",
-              "label": "_name",
-              "type": "t_string_storage",
-              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
               "offset": 0,
               "slot": "0"
-            },
-            {
-              "contract": "ERC721Upgradeable",
-              "label": "_symbol",
-              "type": "t_string_storage",
-              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
-              "offset": 0,
-              "slot": "1"
-            },
-            {
-              "contract": "ERC721Upgradeable",
-              "label": "_owners",
-              "type": "t_mapping(t_uint256,t_address)",
-              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
-              "offset": 0,
-              "slot": "2"
-            },
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
             {
-              "contract": "ERC721Upgradeable",
-              "label": "_balances",
-              "type": "t_mapping(t_address,t_uint256)",
-              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
               "offset": 0,
-              "slot": "3"
-            },
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
             {
-              "contract": "ERC721Upgradeable",
-              "label": "_tokenApprovals",
-              "type": "t_mapping(t_uint256,t_address)",
-              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
               "offset": 0,
-              "slot": "4"
+              "slot": "0"
             },
             {
-              "contract": "ERC721Upgradeable",
-              "label": "_operatorApprovals",
-              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
-              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
-              "offset": 0,
-              "slot": "5"
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": []
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0xe31e68ccdeafd865f1454c8b0e94de6960db5d7a",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xe31e68ccdeafd865f1454c8b0e94de6960db5d7a",
+        "0x48Cc9C9b758666F37fD3F88793Ad337Cd947F79A",
+        "0x9e8EA5C12427473e989c390071AAC1DB85fE9ee3",
+        "0xff0c27e7429278F44197bb77f343861A7e9bd943",
+        "0xfe6933117cf0e1af9ec7d9f925ce0cc9d34767e8",
+        "0xff0c27e7429278f44197bb77f343861a7e9bd943"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "a4f1883b7338238b9c4e26e4de76a51a0e35b0f221931d89c7c3e148c6742ce4": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "23ab2e0b163887c4440bc16e2a0cab51213d534f9a03483d889597df7451e7b2": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "7f7471ebbb4d146f675249199249c6cce8e2c9119c7e7bc702a0e1f690bd9b08": {
+      "address": "0xd33b32915cA66Ef9b7A27578e36bC5bb1D75A9da",
+      "txHash": "0x7ec17641ebd0f1dbecf3d294cd8ebdb76fc11cbd4d811e5105118c5f3a57ac45",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "b637e210d137519a1ecbcb6afaaaa7ffd964e17e4fe1a1eed93f783ca757960c": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24901",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24339_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25457_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24901": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24339_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25457_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25442_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24339_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25442_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25457_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25442_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "d70cd015f2472a327a7b3c3f51ce82387c6058df566e147f13348f0ec756a97a": {
+      "address": "0x48Cc9C9b758666F37fD3F88793Ad337Cd947F79A",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24764_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24764_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24764_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x48Cc9C9b758666F37fD3F88793Ad337Cd947F79A",
+        "0xc82eff23C46744AB00E8261ad90B0266e181BD81",
+        "0x6E9447eff6B97BedAa62d2A3c26439328371A2a1",
+        "0xFB25d8Bf079Cf72ECe812725F015CCCee0235B88"
+      ]
+    },
+    "9379634d8942428c26234f6cf9663401660e704a50e9547f8a9f926b7618f730": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+        "0x5637a9f20B77C11D9529b40DD32F24C2dC3727dd",
+        "0xd569e868Ff29135bC8A7d910D28eB066a76cbf29",
+        "0xA7a6b1f6aA012c8C94091E33C9e9cDb7F6477842"
+      ]
+    },
+    "21d0e72726907532dea517c6be3291e1c0525e7c3a7d75a502ef7a8d253c022f": {
+      "address": "0x3ac60f9245f5FbEcb044B36a19f2B36e8bce58D1",
+      "txHash": "0x52104ab26f260bde613f29080185cf88f51b6ed4fba21309d373348c77f052db",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24901",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24339_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25457_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24901": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24339_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25457_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25442_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24339_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25442_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25457_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25442_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "d667f0d514e893bfd06938e0bb5fc2812f83f94c85e277e9d7dfea48e3159b96": {
+      "address": "0x3ac60f9245f5FbEcb044B36a19f2B36e8bce58D1",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15015",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14453_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15571_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15015": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14453_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15571_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15556_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14453_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15556_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15571_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15556_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "840626c0d66b95f0579d226d1d856564eea9a4c4b190a98da746db54afc55460": {
+      "address": "0xFCfE81b143621969eD95cB153516bdAd5Cbc5F86",
+      "txHash": "0x93db9b0bf3db50c647ef751ed8a3d91aaed4307ffd9d5d87957912cd2f53cbc7",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15015",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14453_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15571_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15015": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14453_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15571_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15556_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14453_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15556_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15571_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15556_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
             }
           ],
           "erc7201:openzeppelin.storage.Initializable": [
@@ -363,9 +3708,8 @@
         }
       }
     },
-    "6bddca59a1c0b1d32b9204a1042573cfd425cf61caebd815fe83cd58cace2de9": {
-      "address": "0x6336522cAb9801AdA28E8721B820d542d2F05b68",
-      "txHash": "0x4f1256fabfc05148953f99e1553bd5d26f1a129b9c7e84b2af9215b4f2fb7326",
+    "0bb7ae386948a42a630fc1d61b6aeebca88c427e7c01f4675a69b0a228fbc6af": {
+      "address": "0xFCfE81b143621969eD95cB153516bdAd5Cbc5F86",
       "layout": {
         "solcVersion": "0.8.24",
         "storage": [
@@ -373,49 +3717,49 @@
             "label": "paymentToken",
             "offset": 0,
             "slot": "0",
-            "type": "t_contract(IERC20)3402",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:69"
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
           },
           {
             "label": "positionContract",
             "offset": 0,
             "slot": "1",
-            "type": "t_contract(ICLMSRPositionUpgradeable)30919",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:72"
+            "type": "t_contract(ICLMSRPosition)15041",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
           },
           {
             "label": "markets",
             "offset": 0,
             "slot": "2",
-            "type": "t_mapping(t_uint256,t_struct(Market)30214_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:77"
+            "type": "t_mapping(t_uint256,t_struct(Market)14473_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
           },
           {
             "label": "marketTrees",
             "offset": 0,
             "slot": "3",
-            "type": "t_mapping(t_uint256,t_struct(Tree)31475_storage)",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:80"
+            "type": "t_mapping(t_uint256,t_struct(Tree)15597_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
           },
           {
             "label": "_nextMarketId",
             "offset": 0,
             "slot": "4",
             "type": "t_uint256",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:83"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
           },
           {
             "label": "__gap",
             "offset": 0,
             "slot": "5",
             "type": "t_array(t_uint256)49_storage",
-            "contract": "CLMSRMarketCoreUpgradeable",
-            "src": "contracts/core/CLMSRMarketCoreUpgradeable.sol:86"
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
           }
         ],
         "types": {
@@ -457,7 +3801,7 @@
             ],
             "numberOfBytes": "32"
           },
-          "t_struct(PausableStorage)559_storage": {
+          "t_struct(PausableStorage)224_storage": {
             "label": "struct PausableUpgradeable.PausableStorage",
             "members": [
               {
@@ -469,7 +3813,7 @@
             ],
             "numberOfBytes": "32"
           },
-          "t_struct(ReentrancyGuardStorage)623_storage": {
+          "t_struct(ReentrancyGuardStorage)288_storage": {
             "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
             "members": [
               {
@@ -493,11 +3837,11 @@
             "label": "uint256[49]",
             "numberOfBytes": "1568"
           },
-          "t_contract(ICLMSRPositionUpgradeable)30919": {
-            "label": "contract ICLMSRPositionUpgradeable",
+          "t_contract(ICLMSRPosition)15041": {
+            "label": "contract ICLMSRPosition",
             "numberOfBytes": "20"
           },
-          "t_contract(IERC20)3402": {
+          "t_contract(IERC20)1482": {
             "label": "contract IERC20",
             "numberOfBytes": "20"
           },
@@ -505,20 +3849,20 @@
             "label": "int256",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Market)30214_storage)": {
-            "label": "mapping(uint256 => struct ICLMSRMarketCoreUpgradeable.Market)",
+          "t_mapping(t_uint256,t_struct(Market)14473_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint256,t_struct(Tree)31475_storage)": {
+          "t_mapping(t_uint256,t_struct(Tree)15597_storage)": {
             "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
             "numberOfBytes": "32"
           },
-          "t_mapping(t_uint32,t_struct(Node)31460_storage)": {
+          "t_mapping(t_uint32,t_struct(Node)15582_storage)": {
             "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
             "numberOfBytes": "32"
           },
-          "t_struct(Market)30214_storage": {
-            "label": "struct ICLMSRMarketCoreUpgradeable.Market",
+          "t_struct(Market)14473_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
             "members": [
               {
                 "label": "isActive",
@@ -591,11 +3935,17 @@
                 "type": "t_bool",
                 "offset": 4,
                 "slot": "7"
+              },
+              {
+                "label": "settlementValue",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "8"
               }
             ],
-            "numberOfBytes": "256"
+            "numberOfBytes": "288"
           },
-          "t_struct(Node)31460_storage": {
+          "t_struct(Node)15582_storage": {
             "label": "struct LazyMulSegmentTree.Node",
             "members": [
               {
@@ -619,12 +3969,12 @@
             ],
             "numberOfBytes": "64"
           },
-          "t_struct(Tree)31475_storage": {
+          "t_struct(Tree)15597_storage": {
             "label": "struct LazyMulSegmentTree.Tree",
             "members": [
               {
                 "label": "nodes",
-                "type": "t_mapping(t_uint32,t_struct(Node)31460_storage)",
+                "type": "t_mapping(t_uint32,t_struct(Node)15582_storage)",
                 "offset": 0,
                 "slot": "0"
               },
@@ -716,12 +4066,61 @@
         }
       }
     },
-    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
-      "address": "0xB2a4A006330894Bf306cd002d27Bfd2441B15f0D",
-      "txHash": "0xcd65314333f14149b76588179e05b10a312c2ada29ac4266959617410174c4d9",
+    "97a1afb08a82a5ed50589a877691839fcd1fd573123e701d164779724de2a5d1": {
+      "address": "0xF1186Fd2A08BADd0DEFC73f6fEA1C70E554e0436",
+      "txHash": "0xdf271efccc1d8e23144a14b8ec9d874c5065e203d6abaab4287562783b3472a2",
       "layout": {
         "solcVersion": "0.8.24",
-        "storage": [],
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:68"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15041",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:71"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14473_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:76"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15597_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:79"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:82"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:85"
+          }
+        ],
         "types": {
           "t_address": {
             "label": "address",
@@ -761,12 +4160,240 @@
             ],
             "numberOfBytes": "32"
           },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
           "t_uint64": {
             "label": "uint64",
             "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15041": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14473_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15597_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15582_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14473_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              },
+              {
+                "label": "settlementValue",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "8"
+              }
+            ],
+            "numberOfBytes": "288"
+          },
+          "t_struct(Node)15582_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15597_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15582_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
           }
         },
         "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
           "erc7201:openzeppelin.storage.Ownable": [
             {
               "contract": "OwnableUpgradeable",
diff --git a/.openzeppelin/prod/unknown-5115.json.backup.1755831083669 b/.openzeppelin/prod/unknown-5115.json.backup.1755831083669
new file mode 100644
index 0000000..16f3e93
--- /dev/null
+++ b/.openzeppelin/prod/unknown-5115.json.backup.1755831083669
@@ -0,0 +1,1862 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "ea24f48f96da70700dd9ee16222acf344c51b1c8f545b3cbdf4e613a5825f353": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x61124Eb3c14956756B590421719846D28A0c6A7A",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)9869_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)10410_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)9869_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x61124Eb3c14956756B590421719846D28A0c6A7A",
+        "0x313072a7D169DA2DFD7643f2626b2AEeF242e97e",
+        "0xFf68B96E1157325069A60098Dafa91e8657ed9B2",
+        "0x7abCad89A5f5607500C5fa8AaAbAf86dA7DA8370",
+        "0xF6E24233255ca47Dc97BD1927d663Be1C025401c"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "a08500ab89e3ab0ffa775308343525aa3996d31ffd73c8321b25ac43f9d5dbc5": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "3e017a27770a72a1d7c681fd1d86794fb4e9ae04d8a875b85ba35fc1111474d0": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "09cdf27e401fc46950aa199f0b77065ae6f5c68e558b7c720178efd26a876a46": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/prod/unknown-5115.json.bak.1755831648 b/.openzeppelin/prod/unknown-5115.json.bak.1755831648
new file mode 100644
index 0000000..239d750
--- /dev/null
+++ b/.openzeppelin/prod/unknown-5115.json.bak.1755831648
@@ -0,0 +1,1863 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "5ffd3426f2d954c3c0b2f140ad7236726483a27ba99bc58d90791c82a67c6d1d": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)24739_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)11253_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)11253_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)24739_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)24739_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)10712_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)11253_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)10712_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+        "0x6B023F114231a380B43a9B191A5299FbDc0E56D7",
+        "0x293Fb4645a6B5186f7A8186A2d6fe59d64f686B9",
+        "0x6B7E602B39CAED0C8202421b64A8B04c75ec1c7B",
+        "0xdb313006460273F3AbaB82FC21bBeAC221152eEc",
+        "0x7c1a1517c5969f998F1A6E2142C6dCaEC091C065"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "7d6a0483eec20497007d902265722dbcabaeac699443a90c0d127c049b997aa5": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "471a697b52458819a6dbc84d23a6f4dd4032c47a86aef6ebc5733b52146afe26": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "22a977010165defb828b9b1bced692dfc5d8dcda77b5cf91b1094580d2870f94": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)3402",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)24902",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)24340_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)25458_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)559_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)623_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)24902": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)3402": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)24340_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)25458_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)25443_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)24340_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)25443_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)25458_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)25443_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/.openzeppelin/prod/unknown-5115.json.reset-backup.1755831156637 b/.openzeppelin/prod/unknown-5115.json.reset-backup.1755831156637
new file mode 100644
index 0000000..a6b6b52
--- /dev/null
+++ b/.openzeppelin/prod/unknown-5115.json.reset-backup.1755831156637
@@ -0,0 +1,1159 @@
+{
+  "manifestVersion": "3.2",
+  "proxies": [
+    {
+      "address": "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+      "kind": "uups"
+    },
+    {
+      "address": "0xB4c33Df898F8139D784ADE1aDCa9B5979898fE03",
+      "kind": "uups"
+    },
+    {
+      "address": "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d",
+      "kind": "uups"
+    }
+  ],
+  "impls": {
+    "ea24f48f96da70700dd9ee16222acf344c51b1c8f545b3cbdf4e613a5825f353": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    },
+    "c4b8cdce7ba7cd779f66587f4dd0d112d233936865438b59f935a3787a5856f5": {
+      "address": "0x61124Eb3c14956756B590421719846D28A0c6A7A",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "core",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_address",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:33"
+          },
+          {
+            "label": "_nextId",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:36"
+          },
+          {
+            "label": "_totalSupply",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_uint256",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:38"
+          },
+          {
+            "label": "_positions",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Position)19667_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:40"
+          },
+          {
+            "label": "_ownedTokens",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_mapping(t_address,t_struct(UintSet)10410_storage)",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:43"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)50_storage",
+            "contract": "CLMSRPosition",
+            "src": "contracts/core/CLMSRPosition.sol:48"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_mapping(t_address,t_bool)": {
+            "label": "mapping(address => bool)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
+            "label": "mapping(address => mapping(address => bool))",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_uint256)": {
+            "label": "mapping(address => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_address)": {
+            "label": "mapping(uint256 => address)",
+            "numberOfBytes": "32"
+          },
+          "t_string_storage": {
+            "label": "string",
+            "numberOfBytes": "32"
+          },
+          "t_struct(ERC721Storage)240_storage": {
+            "label": "struct ERC721Upgradeable.ERC721Storage",
+            "members": [
+              {
+                "label": "_name",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_symbol",
+                "type": "t_string_storage",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "_owners",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "_balances",
+                "type": "t_mapping(t_address,t_uint256)",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "_tokenApprovals",
+                "type": "t_mapping(t_uint256,t_address)",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "_operatorApprovals",
+                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+                "offset": 0,
+                "slot": "5"
+              }
+            ],
+            "numberOfBytes": "192"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_bytes32)dyn_storage": {
+            "label": "bytes32[]",
+            "numberOfBytes": "32"
+          },
+          "t_array(t_uint256)50_storage": {
+            "label": "uint256[50]",
+            "numberOfBytes": "1600"
+          },
+          "t_bytes32": {
+            "label": "bytes32",
+            "numberOfBytes": "32"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_address,t_struct(UintSet)10410_storage)": {
+            "label": "mapping(address => struct EnumerableSet.UintSet)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_bytes32,t_uint256)": {
+            "label": "mapping(bytes32 => uint256)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Position)19667_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRPosition.Position)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Position)19667_storage": {
+            "label": "struct ICLMSRPosition.Position",
+            "members": [
+              {
+                "label": "marketId",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "lowerTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "upperTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "quantity",
+                "type": "t_uint128",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "createdAt",
+                "type": "t_uint64",
+                "offset": 16,
+                "slot": "3"
+              }
+            ],
+            "numberOfBytes": "128"
+          },
+          "t_struct(Set)9869_storage": {
+            "label": "struct EnumerableSet.Set",
+            "members": [
+              {
+                "label": "_values",
+                "type": "t_array(t_bytes32)dyn_storage",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_positions",
+                "type": "t_mapping(t_bytes32,t_uint256)",
+                "offset": 0,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(UintSet)10410_storage": {
+            "label": "struct EnumerableSet.UintSet",
+            "members": [
+              {
+                "label": "_inner",
+                "type": "t_struct(Set)9869_storage",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_uint128": {
+            "label": "uint128",
+            "numberOfBytes": "16"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.ERC721": [
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_name",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_symbol",
+              "type": "t_string_storage",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
+              "offset": 0,
+              "slot": "1"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_owners",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
+              "offset": 0,
+              "slot": "2"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_balances",
+              "type": "t_mapping(t_address,t_uint256)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
+              "offset": 0,
+              "slot": "3"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_tokenApprovals",
+              "type": "t_mapping(t_uint256,t_address)",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
+              "offset": 0,
+              "slot": "4"
+            },
+            {
+              "contract": "ERC721Upgradeable",
+              "label": "_operatorApprovals",
+              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
+              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
+              "offset": 0,
+              "slot": "5"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0x61124Eb3c14956756B590421719846D28A0c6A7A",
+        "0x50C36ccA75a793fd58b4388AdA789CdD232Cc843",
+        "0x313072a7D169DA2DFD7643f2626b2AEeF242e97e",
+        "0xFf68B96E1157325069A60098Dafa91e8657ed9B2",
+        "0x7abCad89A5f5607500C5fa8AaAbAf86dA7DA8370",
+        "0xF6E24233255ca47Dc97BD1927d663Be1C025401c"
+      ]
+    },
+    "ab4fe899fe5da5cd8958c055b128e501b311c9421732f47f62593d7781d2a1c4": {
+      "address": "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      },
+      "allAddresses": [
+        "0xAE0CA6D58BD38b6190C1A0Fb50b6652a2792E186"
+      ]
+    },
+    "3a77bbf9da421697320ff076900cbcfff1f2dbfc7d3c5c2a5624b336f33a522c": {
+      "address": "0x86A7b43846bF2440C3514957766824220b260822",
+      "layout": {
+        "solcVersion": "0.8.24",
+        "storage": [
+          {
+            "label": "paymentToken",
+            "offset": 0,
+            "slot": "0",
+            "type": "t_contract(IERC20)1482",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:69"
+          },
+          {
+            "label": "positionContract",
+            "offset": 0,
+            "slot": "1",
+            "type": "t_contract(ICLMSRPosition)15016",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:72"
+          },
+          {
+            "label": "markets",
+            "offset": 0,
+            "slot": "2",
+            "type": "t_mapping(t_uint256,t_struct(Market)14454_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:77"
+          },
+          {
+            "label": "marketTrees",
+            "offset": 0,
+            "slot": "3",
+            "type": "t_mapping(t_uint256,t_struct(Tree)15572_storage)",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:80"
+          },
+          {
+            "label": "_nextMarketId",
+            "offset": 0,
+            "slot": "4",
+            "type": "t_uint256",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:83"
+          },
+          {
+            "label": "__gap",
+            "offset": 0,
+            "slot": "5",
+            "type": "t_array(t_uint256)49_storage",
+            "contract": "CLMSRMarketCore",
+            "src": "contracts/core/CLMSRMarketCore.sol:86"
+          }
+        ],
+        "types": {
+          "t_address": {
+            "label": "address",
+            "numberOfBytes": "20"
+          },
+          "t_bool": {
+            "label": "bool",
+            "numberOfBytes": "1"
+          },
+          "t_struct(InitializableStorage)73_storage": {
+            "label": "struct Initializable.InitializableStorage",
+            "members": [
+              {
+                "label": "_initialized",
+                "type": "t_uint64",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "_initializing",
+                "type": "t_bool",
+                "offset": 8,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(OwnableStorage)13_storage": {
+            "label": "struct OwnableUpgradeable.OwnableStorage",
+            "members": [
+              {
+                "label": "_owner",
+                "type": "t_address",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(PausableStorage)224_storage": {
+            "label": "struct PausableUpgradeable.PausableStorage",
+            "members": [
+              {
+                "label": "_paused",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_struct(ReentrancyGuardStorage)288_storage": {
+            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
+            "members": [
+              {
+                "label": "_status",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              }
+            ],
+            "numberOfBytes": "32"
+          },
+          "t_uint256": {
+            "label": "uint256",
+            "numberOfBytes": "32"
+          },
+          "t_uint64": {
+            "label": "uint64",
+            "numberOfBytes": "8"
+          },
+          "t_array(t_uint256)49_storage": {
+            "label": "uint256[49]",
+            "numberOfBytes": "1568"
+          },
+          "t_contract(ICLMSRPosition)15016": {
+            "label": "contract ICLMSRPosition",
+            "numberOfBytes": "20"
+          },
+          "t_contract(IERC20)1482": {
+            "label": "contract IERC20",
+            "numberOfBytes": "20"
+          },
+          "t_int256": {
+            "label": "int256",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Market)14454_storage)": {
+            "label": "mapping(uint256 => struct ICLMSRMarketCore.Market)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint256,t_struct(Tree)15572_storage)": {
+            "label": "mapping(uint256 => struct LazyMulSegmentTree.Tree)",
+            "numberOfBytes": "32"
+          },
+          "t_mapping(t_uint32,t_struct(Node)15557_storage)": {
+            "label": "mapping(uint32 => struct LazyMulSegmentTree.Node)",
+            "numberOfBytes": "32"
+          },
+          "t_struct(Market)14454_storage": {
+            "label": "struct ICLMSRMarketCore.Market",
+            "members": [
+              {
+                "label": "isActive",
+                "type": "t_bool",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "settled",
+                "type": "t_bool",
+                "offset": 1,
+                "slot": "0"
+              },
+              {
+                "label": "startTimestamp",
+                "type": "t_uint64",
+                "offset": 2,
+                "slot": "0"
+              },
+              {
+                "label": "endTimestamp",
+                "type": "t_uint64",
+                "offset": 10,
+                "slot": "0"
+              },
+              {
+                "label": "settlementTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "minTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "2"
+              },
+              {
+                "label": "maxTick",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "3"
+              },
+              {
+                "label": "tickSpacing",
+                "type": "t_int256",
+                "offset": 0,
+                "slot": "4"
+              },
+              {
+                "label": "numBins",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "5"
+              },
+              {
+                "label": "liquidityParameter",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "6"
+              },
+              {
+                "label": "positionEventsCursor",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "7"
+              },
+              {
+                "label": "positionEventsEmitted",
+                "type": "t_bool",
+                "offset": 4,
+                "slot": "7"
+              }
+            ],
+            "numberOfBytes": "256"
+          },
+          "t_struct(Node)15557_storage": {
+            "label": "struct LazyMulSegmentTree.Node",
+            "members": [
+              {
+                "label": "sum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "pendingFactor",
+                "type": "t_uint192",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "childPtr",
+                "type": "t_uint64",
+                "offset": 24,
+                "slot": "1"
+              }
+            ],
+            "numberOfBytes": "64"
+          },
+          "t_struct(Tree)15572_storage": {
+            "label": "struct LazyMulSegmentTree.Tree",
+            "members": [
+              {
+                "label": "nodes",
+                "type": "t_mapping(t_uint32,t_struct(Node)15557_storage)",
+                "offset": 0,
+                "slot": "0"
+              },
+              {
+                "label": "root",
+                "type": "t_uint32",
+                "offset": 0,
+                "slot": "1"
+              },
+              {
+                "label": "nextIndex",
+                "type": "t_uint32",
+                "offset": 4,
+                "slot": "1"
+              },
+              {
+                "label": "size",
+                "type": "t_uint32",
+                "offset": 8,
+                "slot": "1"
+              },
+              {
+                "label": "cachedRootSum",
+                "type": "t_uint256",
+                "offset": 0,
+                "slot": "2"
+              }
+            ],
+            "numberOfBytes": "96"
+          },
+          "t_uint192": {
+            "label": "uint192",
+            "numberOfBytes": "24"
+          },
+          "t_uint32": {
+            "label": "uint32",
+            "numberOfBytes": "4"
+          }
+        },
+        "namespaces": {
+          "erc7201:openzeppelin.storage.ReentrancyGuard": [
+            {
+              "contract": "ReentrancyGuardUpgradeable",
+              "label": "_status",
+              "type": "t_uint256",
+              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Pausable": [
+            {
+              "contract": "PausableUpgradeable",
+              "label": "_paused",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Ownable": [
+            {
+              "contract": "OwnableUpgradeable",
+              "label": "_owner",
+              "type": "t_address",
+              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
+              "offset": 0,
+              "slot": "0"
+            }
+          ],
+          "erc7201:openzeppelin.storage.Initializable": [
+            {
+              "contract": "Initializable",
+              "label": "_initialized",
+              "type": "t_uint64",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
+              "offset": 0,
+              "slot": "0"
+            },
+            {
+              "contract": "Initializable",
+              "label": "_initializing",
+              "type": "t_bool",
+              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
+              "offset": 8,
+              "slot": "0"
+            }
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/clmsr-sdk/dist/types.d.ts b/clmsr-sdk/dist/types.d.ts
index 1028c10..c3fb5e0 100644
--- a/clmsr-sdk/dist/types.d.ts
+++ b/clmsr-sdk/dist/types.d.ts
@@ -24,6 +24,9 @@ export interface MarketRaw {
     minTick: number;
     maxTick: number;
     tickSpacing: number;
+    isSettled?: boolean;
+    settlementValue?: string;
+    settlementTick?: number;
 }
 /** Market data for SDK calculations (숫자 객체만) */
 export interface Market {
@@ -31,6 +34,9 @@ export interface Market {
     minTick: Tick;
     maxTick: Tick;
     tickSpacing: Tick;
+    isSettled?: boolean;
+    settlementValue?: USDCAmount;
+    settlementTick?: Tick;
 }
 /** Market distribution data for SDK calculations (WAD 기반) */
 export interface MarketDistribution {
diff --git a/clmsr-sdk/dist/types.js b/clmsr-sdk/dist/types.js
index 45ec386..3720235 100644
--- a/clmsr-sdk/dist/types.js
+++ b/clmsr-sdk/dist/types.js
@@ -21,6 +21,13 @@ function mapMarket(raw) {
         minTick: raw.minTick,
         maxTick: raw.maxTick,
         tickSpacing: raw.tickSpacing,
+        ...(raw.isSettled !== undefined && { isSettled: raw.isSettled }),
+        ...(raw.settlementValue !== undefined && {
+            settlementValue: new big_js_1.default(raw.settlementValue),
+        }),
+        ...(raw.settlementTick !== undefined && {
+            settlementTick: raw.settlementTick,
+        }),
     };
 }
 /**
diff --git a/clmsr-sdk/dist/utils/math.d.ts b/clmsr-sdk/dist/utils/math.d.ts
index 7e55703..7e6cbe6 100644
--- a/clmsr-sdk/dist/utils/math.d.ts
+++ b/clmsr-sdk/dist/utils/math.d.ts
@@ -6,7 +6,7 @@ export declare const WAD: Big.Big;
 export declare const SCALE_DIFF: Big.Big;
 /** USDC precision constant: 1e6 */
 export declare const USDC_PRECISION: Big.Big;
-/** Maximum safe input for exp() function: 0.13 * 1e18 */
+/** Maximum safe input for exp() function: 1.0 * 1e18 */
 export declare const MAX_EXP_INPUT_WAD: Big.Big;
 /** Maximum number of chunks per transaction */
 export declare const MAX_CHUNKS_PER_TX = 1000;
diff --git a/clmsr-sdk/dist/utils/math.js b/clmsr-sdk/dist/utils/math.js
index f009781..99bf454 100644
--- a/clmsr-sdk/dist/utils/math.js
+++ b/clmsr-sdk/dist/utils/math.js
@@ -35,8 +35,8 @@ exports.WAD = new big_js_1.default("1e18");
 exports.SCALE_DIFF = new big_js_1.default("1e12");
 /** USDC precision constant: 1e6 */
 exports.USDC_PRECISION = new big_js_1.default("1000000");
-/** Maximum safe input for exp() function: 0.13 * 1e18 */
-exports.MAX_EXP_INPUT_WAD = new big_js_1.default("130000000000000000"); // 0.13 * 1e18
+/** Maximum safe input for exp() function: 1.0 * 1e18 */
+exports.MAX_EXP_INPUT_WAD = new big_js_1.default("1000000000000000000"); // 1.0 * 1e18
 /** Maximum number of chunks per transaction */
 exports.MAX_CHUNKS_PER_TX = 1000;
 /** Minimum and maximum factor bounds for segment tree operations */
diff --git a/clmsr-sdk/package.json b/clmsr-sdk/package.json
index f055c8b..1bec0b8 100644
--- a/clmsr-sdk/package.json
+++ b/clmsr-sdk/package.json
@@ -1,6 +1,6 @@
 {
   "name": "@whworjs7946/clmsr-v0",
-  "version": "1.8.0",
+  "version": "1.8.1",
   "description": "TypeScript SDK for CLMSR market calculations and utilities",
   "main": "dist/index.js",
   "module": "dist/index.js",
@@ -33,6 +33,9 @@
     "jest": "^29.5.0",
     "prettier": "^3.0.0",
     "ts-jest": "^29.1.0",
+    "typedoc": "^0.28.10",
+    "typedoc-docusaurus-theme": "^1.4.2",
+    "typedoc-plugin-markdown": "^4.8.1",
     "typescript": "^5.0.0"
   },
   "dependencies": {
diff --git a/clmsr-sdk/src/types.ts b/clmsr-sdk/src/types.ts
index 30c7670..bf792ae 100644
--- a/clmsr-sdk/src/types.ts
+++ b/clmsr-sdk/src/types.ts
@@ -39,6 +39,9 @@ export interface MarketRaw {
   minTick: number;
   maxTick: number;
   tickSpacing: number;
+  isSettled?: boolean; // 마켓 정산 여부
+  settlementValue?: string; // 정산값 (6 decimal) - "115500000"
+  settlementTick?: number; // 정산 틱 (정수) - 115
 }
 
 // ============================================================================
@@ -51,6 +54,9 @@ export interface Market {
   minTick: Tick;
   maxTick: Tick;
   tickSpacing: Tick;
+  isSettled?: boolean; // 마켓 정산 여부
+  settlementValue?: USDCAmount; // 정산값 (6 decimal)
+  settlementTick?: Tick; // 정산 틱 (정수)
 }
 
 /** Market distribution data for SDK calculations (WAD 기반) */
@@ -88,6 +94,13 @@ export function mapMarket(raw: MarketRaw): Market {
     minTick: raw.minTick,
     maxTick: raw.maxTick,
     tickSpacing: raw.tickSpacing,
+    ...(raw.isSettled !== undefined && { isSettled: raw.isSettled }),
+    ...(raw.settlementValue !== undefined && {
+      settlementValue: new Big(raw.settlementValue),
+    }),
+    ...(raw.settlementTick !== undefined && {
+      settlementTick: raw.settlementTick,
+    }),
   };
 }
 
diff --git a/clmsr-sdk/src/utils/math.ts b/clmsr-sdk/src/utils/math.ts
index 925657c..67ceeec 100644
--- a/clmsr-sdk/src/utils/math.ts
+++ b/clmsr-sdk/src/utils/math.ts
@@ -19,8 +19,8 @@ export const SCALE_DIFF = new Big("1e12");
 /** USDC precision constant: 1e6 */
 export const USDC_PRECISION = new Big("1000000");
 
-/** Maximum safe input for exp() function: 0.13 * 1e18 */
-export const MAX_EXP_INPUT_WAD = new Big("130000000000000000"); // 0.13 * 1e18
+/** Maximum safe input for exp() function: 1.0 * 1e18 */
+export const MAX_EXP_INPUT_WAD = new Big("1000000000000000000"); // 1.0 * 1e18
 
 /** Maximum number of chunks per transaction */
 export const MAX_CHUNKS_PER_TX = 1000;
diff --git a/clmsr-sdk/tests/sdk.test.ts b/clmsr-sdk/tests/sdk.test.ts
index 9075528..557199f 100644
--- a/clmsr-sdk/tests/sdk.test.ts
+++ b/clmsr-sdk/tests/sdk.test.ts
@@ -26,19 +26,15 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
 
     // 400개 bin (100000부터 140000까지, 100씩 증가)
     const binFactors = [];
-    const binFactorsWad = [];
     for (let i = 0; i < 400; i++) {
       // LMSR 초기 분포: 모든 bin이 동일한 확률 (exp(0) = 1.0)
-      binFactors.push("1.0"); // 문자열 배열 (표시용)
-      binFactorsWad.push("1000000000000000000"); // WAD 문자열 배열
+      binFactors.push("1000000000000000000"); // WAD 문자열 배열
     }
 
     // Raw 데이터를 생성한 후 어댑터를 통해 변환
     const rawDistribution: MarketDistributionRaw = {
-      totalSum: "400", // 표시용 decimal 값
-      totalSumWad: "400000000000000000000", // 계산용 WAD 값 (400 * 1e18)
+      totalSum: "400000000000000000000", // 계산용 WAD 값 (400 * 1e18)
       binFactors,
-      binFactorsWad,
     };
 
     distribution = mapDistribution(rawDistribution);
@@ -52,7 +48,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
       const small = sdk.calculateOpenCost(
         range.lower,
         range.upper,
-        toUSDC("20"), // 20달러 베팅
+        toMicroUSDC("20"), // 20달러 베팅
         distribution,
         market
       );
@@ -60,7 +56,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
       const large = sdk.calculateOpenCost(
         range.lower,
         range.upper,
-        toUSDC("100"), // 100달러 베팅 (5배 증가)
+        toMicroUSDC("100"), // 100달러 베팅 (5배 증가)
         distribution,
         market
       );
@@ -83,21 +79,21 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
       const cost1x = sdk.calculateOpenCost(
         range.lower,
         range.upper,
-        toUSDC("1"),
+        toMicroUSDC("1"),
         distribution,
         market
       );
       const cost2x = sdk.calculateOpenCost(
         range.lower,
         range.upper,
-        toUSDC("2"),
+        toMicroUSDC("2"),
         distribution,
         market
       );
       const cost4x = sdk.calculateOpenCost(
         range.lower,
         range.upper,
-        toUSDC("4"),
+        toMicroUSDC("4"),
         distribution,
         market
       );
@@ -112,7 +108,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
 
   describe("🎯 LMSR 핵심 특성 - 범위 효과 (Range Effect)", () => {
     test("넓은 범위일수록 더 비싸다", () => {
-      const quantity = toUSDC("10");
+      const quantity = toMicroUSDC("10");
 
       const narrow = sdk.calculateOpenCost(
         119000,
@@ -143,7 +139,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
     });
 
     test("같은 확률이라면 범위가 넓어도 비슷한 가격", () => {
-      const quantity = toUSDC("1");
+      const quantity = toMicroUSDC("1");
 
       // 같은 확률이지만 다른 크기의 범위
       const small = sdk.calculateOpenCost(
@@ -176,7 +172,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
   describe("🎯 LMSR 핵심 특성 - 수학적 일관성", () => {
     test("동일한 입력에 대해 항상 같은 결과를 반환한다 (순수 함수)", () => {
       const range = { lower: 115000, upper: 125000 };
-      const quantity = toUSDC("50");
+      const quantity = toMicroUSDC("50");
 
       // 같은 파라미터로 여러 번 호출
       const result1 = sdk.calculateOpenCost(
@@ -204,7 +200,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
 
     test("매수 비용은 항상 양수이다", () => {
       const range = { lower: 115000, upper: 125000 };
-      const quantity = toUSDC("1");
+      const quantity = toMicroUSDC("1");
 
       const result = sdk.calculateOpenCost(
         range.lower,
@@ -221,7 +217,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
 
   describe("🎯 LMSR 핵심 특성 - 확률과 가격의 관계", () => {
     test("같은 확률이면 비슷한 가격이다 (균등분포)", () => {
-      const quantity = toUSDC("5");
+      const quantity = toMicroUSDC("5");
 
       // 균등분포에서는 모든 영역이 같은 확률
       const range1 = sdk.calculateOpenCost(
@@ -251,7 +247,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
     });
 
     test("전체 범위 베팅은 최대 비용", () => {
-      const quantity = toUSDC("1");
+      const quantity = toMicroUSDC("1");
 
       // 전체 범위
       const fullRange = sdk.calculateOpenCost(
@@ -288,8 +284,8 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
   describe("🎯 포지션 관리 일관성", () => {
     test("증가 vs 처음부터 큰 포지션 - 수수료 차이", () => {
       const range = { lower: 115000, upper: 125000 };
-      const smallQuantity = toUSDC("5");
-      const additionalQuantity = toUSDC("5");
+      const smallQuantity = toMicroUSDC("5");
+      const additionalQuantity = toMicroUSDC("5");
 
       // 처음부터 큰 포지션
       const bigPosition = sdk.calculateOpenCost(
@@ -338,8 +334,8 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
 
     test("전체 포지션 닫기 vs 부분 닫기의 일관성", () => {
       const range = { lower: 115000, upper: 125000 };
-      const totalQuantity = toUSDC("10");
-      const partialQuantity = toUSDC("5");
+      const totalQuantity = toMicroUSDC("10");
+      const partialQuantity = toMicroUSDC("5");
 
       const position = {
         lowerTick: range.lower,
@@ -389,8 +385,8 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
       const range = { lower: 115000, upper: 125000 }; // $1150-$1250 범위
 
       // 더 작은 비용으로 테스트 (오버플로우 방지)
-      const smallCost = toUSDC("0.1");
-      const largeCost = toUSDC("1");
+      const smallCost = toMicroUSDC("0.1");
+      const largeCost = toMicroUSDC("1");
 
       const smallQuantity = sdk.calculateQuantityFromCost(
         range.lower,
@@ -417,7 +413,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
 
     test("역함수 근사 정확도", () => {
       const range = { lower: 115000, upper: 125000 }; // $1150-$1250 범위
-      const targetCost = toUSDC("20"); // 적당한 베팅 비용으로 테스트 (오버플로우 방지)
+      const targetCost = toMicroUSDC("20"); // 적당한 베팅 비용으로 테스트 (오버플로우 방지)
 
       // 역함수로 수량 계산
       const inverseResult = sdk.calculateQuantityFromCost(
@@ -448,8 +444,8 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
   describe("🎯 클레임 로직 검증", () => {
     test("승리 포지션은 전액 클레임", () => {
       const winningPositions = [
-        { lowerTick: 100000, upperTick: 110000, quantity: toUSDC("100") }, // 정산가 포함
-        { lowerTick: 100500, upperTick: 110000, quantity: toUSDC("50") }, // 정산가 포함
+        { lowerTick: 100000, upperTick: 110000, quantity: toMicroUSDC("100") }, // 정산가 포함
+        { lowerTick: 100500, upperTick: 110000, quantity: toMicroUSDC("50") }, // 정산가 포함
       ];
 
       // Settlement range: [100500, 100510) - one tick spacing
@@ -477,8 +473,8 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
 
     test("패배 포지션은 클레임 없음", () => {
       const losingPositions = [
-        { lowerTick: 130000, upperTick: 140000, quantity: toUSDC("100") }, // 정산가 미포함
-        { lowerTick: 90000, upperTick: 100000, quantity: toUSDC("50") }, // 정산가 미포함 (정확히 범위 밖)
+        { lowerTick: 130000, upperTick: 140000, quantity: toMicroUSDC("100") }, // 정산가 미포함
+        { lowerTick: 90000, upperTick: 100000, quantity: toMicroUSDC("50") }, // 정산가 미포함 (정확히 범위 밖)
       ];
 
       // Settlement range: [100500, 100510) - one tick spacing
@@ -501,7 +497,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
         sdk.calculateOpenCost(
           125000,
           115000, // upper < lower
-          toUSDC("1"),
+          toMicroUSDC("1"),
           distribution,
           market
         );
@@ -511,7 +507,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
         sdk.calculateOpenCost(
           115000,
           125000,
-          toUSDC("-1"), // 음수 수량
+          toMicroUSDC("-1"), // 음수 수량
           distribution,
           market
         );
@@ -522,13 +518,13 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
       const position = {
         lowerTick: 115000,
         upperTick: 125000,
-        quantity: toUSDC("5"),
+        quantity: toMicroUSDC("5"),
       };
 
       expect(() => {
         sdk.calculateDecreaseProceeds(
           position,
-          toUSDC("10"), // 보유량보다 많이 매도
+          toMicroUSDC("10"), // 보유량보다 많이 매도
           distribution,
           market
         );
@@ -539,8 +535,8 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
   describe("🎯 수학적 일관성", () => {
     test("증분 계산의 일관성 (additivity)", () => {
       const range = { lower: 115000, upper: 125000 };
-      const quantity1 = toUSDC("2");
-      const quantity2 = toUSDC("3");
+      const quantity1 = toMicroUSDC("2");
+      const quantity2 = toMicroUSDC("3");
 
       // 직접 계산
       const directResult = sdk.calculateOpenCost(
@@ -584,7 +580,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
     });
 
     test("균등 분포에서 같은 크기 범위는 비슷한 가격", () => {
-      const quantity = toUSDC("1");
+      const quantity = toMicroUSDC("1");
 
       // 균등 분포에서 같은 크기의 범위
       const range1 = sdk.calculateOpenCost(
@@ -623,7 +619,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
       // - exp(x)가 안전하게 계산 가능한 최대값 x = 0.13
       // - α = 1000일 때, 임계점: quantity/α = 0.13 → quantity = 130 USDC
       // - 150 USDC > 130 USDC이므로 safeExp chunking 필요
-      const largeQuantity = toUSDC("150"); // 150 USDC (> 0.13 * 1000)
+      const largeQuantity = toMicroUSDC("150"); // 150 USDC (> 0.13 * 1000)
 
       const result = sdk.calculateOpenCost(
         range.lower,
@@ -635,13 +631,13 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
 
       // 결과가 유효한 범위 안에 있어야 함
       expect(result.cost.gt(0)).toBe(true);
-      expect(result.cost.lt(toUSDC("1000"))).toBe(true); // 비용이 너무 크지 않아야 함
+      expect(result.cost.lt(toMicroUSDC("1000"))).toBe(true); // 비용이 너무 크지 않아야 함
       expect(result.averagePrice.gt(0)).toBe(true);
     });
 
     test("WAD 스케일링이 정확히 동작한다", () => {
       const range = { lower: 115000, upper: 125000 };
-      const quantity = toUSDC("1"); // 작은 수량으로 테스트 (스케일링 검증용)
+      const quantity = toMicroUSDC("1"); // 작은 수량으로 테스트 (스케일링 검증용)
 
       const result = sdk.calculateOpenCost(
         range.lower,
@@ -677,18 +673,15 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
       expect(result.cost.toString()).toBe(result2.cost.toString());
     });
 
-    test("binFactorsWad 배열이 올바르게 처리된다", () => {
+    test("binFactors 배열이 올바르게 처리된다", () => {
       // 분포를 수정해서 특정 bin만 다른 값을 가지도록 함
       const modifiedRaw: MarketDistributionRaw = {
-        totalSum: "402", // 2.0이 추가된 상태
-        totalSumWad: "402000000000000000000", // 402 * 1e18
-        binFactors: [...Array(400).fill("1.0")],
-        binFactorsWad: [...Array(400).fill("1000000000000000000")],
+        totalSum: "402000000000000000000", // 402 * 1e18
+        binFactors: [...Array(400).fill("1000000000000000000")],
       };
 
       // 특정 bin의 factor를 2.0으로 변경
-      modifiedRaw.binFactors[50] = "2.0";
-      modifiedRaw.binFactorsWad[50] = "2000000000000000000"; // 2.0 * 1e18
+      modifiedRaw.binFactors[50] = "2000000000000000000"; // 2.0 * 1e18
 
       const modifiedDist = mapDistribution(modifiedRaw);
 
@@ -699,7 +692,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
       const cost1 = sdk.calculateOpenCost(
         range1.lower,
         range1.upper,
-        toUSDC("10"),
+        toMicroUSDC("10"),
         modifiedDist,
         market
       );
@@ -707,7 +700,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
       const cost2 = sdk.calculateOpenCost(
         range2.lower,
         range2.upper,
-        toUSDC("10"),
+        toMicroUSDC("10"),
         modifiedDist,
         market
       );
@@ -730,7 +723,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
       const range = { lower: 115000, upper: 125000 }; // $1150-$1250 범위
 
       // 26 USDC (임계값)는 성공해야 함
-      const quantity26 = toUSDC("26"); // 26 USDC = 0.13 * α
+      const quantity26 = toMicroUSDC("26"); // 26 USDC = 0.13 * α
       const result26 = sdk.calculateOpenCost(
         range.lower,
         range.upper,
@@ -741,7 +734,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
       expect(result26.cost.gt(0)).toBe(true);
 
       // 26.3 USDC (임계값 초과)도 chunk-split으로 처리되어야 함
-      const quantity263 = toUSDC("26.2987691303341730"); // 임계값 초과
+      const quantity263 = toMicroUSDC("26.2987691303341730"); // 임계값 초과
       const result263 = sdk.calculateOpenCost(
         range.lower,
         range.upper,
@@ -752,7 +745,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
       expect(result263.cost.gt(0)).toBe(true);
 
       // 더 큰 수량도 처리되어야 함 (1000 USDC)
-      const quantity1000 = toUSDC("1000");
+      const quantity1000 = toMicroUSDC("1000");
       const result1000 = sdk.calculateOpenCost(
         range.lower,
         range.upper,
@@ -768,7 +761,7 @@ describe("CLMSR SDK - LMSR 수학적 특성 테스트", () => {
         upperTick: range.upper,
         quantity: quantity1000,
       };
-      const sellQuantity = toUSDC("500");
+      const sellQuantity = toMicroUSDC("500");
       const sellResult = sdk.calculateSellProceeds(
         position,
         sellQuantity,
diff --git a/clmsr-sdk/yarn.lock b/clmsr-sdk/yarn.lock
index 6936870..074bede 100644
--- a/clmsr-sdk/yarn.lock
+++ b/clmsr-sdk/yarn.lock
@@ -310,6 +310,17 @@
   resolved "https://registry.npmjs.org/@eslint/js/-/js-8.57.1.tgz"
   integrity sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==
 
+"@gerrit0/mini-shiki@^3.9.0":
+  version "3.11.0"
+  resolved "https://registry.yarnpkg.com/@gerrit0/mini-shiki/-/mini-shiki-3.11.0.tgz#48cf239da282f2753cac7c3562ad830abc6eccbb"
+  integrity sha512-ooCDMAOKv71O7MszbXjSQGcI6K5T6NKlemQZOBHLq7Sv/oXCRfYbZ7UgbzFdl20lSXju6Juds4I3y30R6rHA4Q==
+  dependencies:
+    "@shikijs/engine-oniguruma" "^3.11.0"
+    "@shikijs/langs" "^3.11.0"
+    "@shikijs/themes" "^3.11.0"
+    "@shikijs/types" "^3.11.0"
+    "@shikijs/vscode-textmate" "^10.0.2"
+
 "@humanwhocodes/config-array@^0.13.0":
   version "0.13.0"
   resolved "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.13.0.tgz"
@@ -629,6 +640,41 @@
     "@nodelib/fs.scandir" "2.1.5"
     fastq "^1.6.0"
 
+"@shikijs/engine-oniguruma@^3.11.0":
+  version "3.11.0"
+  resolved "https://registry.yarnpkg.com/@shikijs/engine-oniguruma/-/engine-oniguruma-3.11.0.tgz#a1c0f40e0255c8484cd1fceac9c7fa1ea8f2e5b9"
+  integrity sha512-4DwIjIgETK04VneKbfOE4WNm4Q7WC1wo95wv82PoHKdqX4/9qLRUwrfKlmhf0gAuvT6GHy0uc7t9cailk6Tbhw==
+  dependencies:
+    "@shikijs/types" "3.11.0"
+    "@shikijs/vscode-textmate" "^10.0.2"
+
+"@shikijs/langs@^3.11.0":
+  version "3.11.0"
+  resolved "https://registry.yarnpkg.com/@shikijs/langs/-/langs-3.11.0.tgz#a99ad5b2fb79849c7f00063edd609aac2515af54"
+  integrity sha512-Njg/nFL4HDcf/ObxcK2VeyidIq61EeLmocrwTHGGpOQx0BzrPWM1j55XtKQ1LvvDWH15cjQy7rg96aJ1/l63uw==
+  dependencies:
+    "@shikijs/types" "3.11.0"
+
+"@shikijs/themes@^3.11.0":
+  version "3.11.0"
+  resolved "https://registry.yarnpkg.com/@shikijs/themes/-/themes-3.11.0.tgz#616547ef5aad491c3e57b0f090c452d1a9f7bc45"
+  integrity sha512-BhhWRzCTEk2CtWt4S4bgsOqPJRkapvxdsifAwqP+6mk5uxboAQchc0etiJ0iIasxnMsb764qGD24DK9albcU9Q==
+  dependencies:
+    "@shikijs/types" "3.11.0"
+
+"@shikijs/types@3.11.0", "@shikijs/types@^3.11.0":
+  version "3.11.0"
+  resolved "https://registry.yarnpkg.com/@shikijs/types/-/types-3.11.0.tgz#d5bda9febcd3bde3ab08f19f5da8441a3797aab9"
+  integrity sha512-RB7IMo2E7NZHyfkqAuaf4CofyY8bPzjWPjJRzn6SEak3b46fIQyG6Vx5fG/obqkfppQ+g8vEsiD7Uc6lqQt32Q==
+  dependencies:
+    "@shikijs/vscode-textmate" "^10.0.2"
+    "@types/hast" "^3.0.4"
+
+"@shikijs/vscode-textmate@^10.0.2":
+  version "10.0.2"
+  resolved "https://registry.yarnpkg.com/@shikijs/vscode-textmate/-/vscode-textmate-10.0.2.tgz#a90ab31d0cc1dfb54c66a69e515bf624fa7b2224"
+  integrity sha512-83yeghZ2xxin3Nj8z1NMd/NCuca+gsYXswywDy5bHvwlWL8tpTQmzGeUuHd9FC3E/SBEMvzJRwWEOz5gGes9Qg==
+
 "@sinclair/typebox@^0.27.8":
   version "0.27.8"
   resolved "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz"
@@ -698,6 +744,13 @@
   dependencies:
     "@types/node" "*"
 
+"@types/hast@^3.0.4":
+  version "3.0.4"
+  resolved "https://registry.yarnpkg.com/@types/hast/-/hast-3.0.4.tgz#1d6b39993b82cea6ad783945b0508c25903e15aa"
+  integrity sha512-WPs+bbQw5aCj+x6laNGWLH3wviHtoCv/P3+otBhbOhJgG8qtpdAMlTCxLtsTWA7LH1Oh/bFCHsBn0TPS5m30EQ==
+  dependencies:
+    "@types/unist" "*"
+
 "@types/istanbul-lib-coverage@*", "@types/istanbul-lib-coverage@^2.0.0", "@types/istanbul-lib-coverage@^2.0.1", "@types/istanbul-lib-coverage@^2.0.6":
   version "2.0.6"
   resolved "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz"
@@ -747,6 +800,11 @@
   resolved "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.3.tgz"
   integrity sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==
 
+"@types/unist@*":
+  version "3.0.3"
+  resolved "https://registry.yarnpkg.com/@types/unist/-/unist-3.0.3.tgz#acaab0f919ce69cce629c2d4ed2eb4adc1b6c20c"
+  integrity sha512-ko/gIFJRv177XgZsZcBwnqJN5x/Gien8qNOn0D5bQU/zAzVf9Zt3BlcUiLqhV9y4ARk0GbT3tnUiPNgnTXzc/Q==
+
 "@types/yargs-parser@*":
   version "21.0.3"
   resolved "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.3.tgz"
@@ -1227,6 +1285,11 @@ emoji-regex@^8.0.0:
   resolved "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz"
   integrity sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==
 
+entities@^4.4.0:
+  version "4.5.0"
+  resolved "https://registry.yarnpkg.com/entities/-/entities-4.5.0.tgz#5d268ea5e7113ec74c4d033b79ea5a35a488fb48"
+  integrity sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==
+
 error-ex@^1.3.1:
   version "1.3.2"
   resolved "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz"
@@ -2245,6 +2308,13 @@ lines-and-columns@^1.1.6:
   resolved "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz"
   integrity sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==
 
+linkify-it@^5.0.0:
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/linkify-it/-/linkify-it-5.0.0.tgz#9ef238bfa6dc70bd8e7f9572b52d369af569b421"
+  integrity sha512-5aHCbzQRADcdP+ATqnDuhhJ/MRIqDkZX5pyjFHRRysS8vZ5AbqGEoFIb6pYHPZ+L/OC2Lc+xT8uHVVR5CAK/wQ==
+  dependencies:
+    uc.micro "^2.0.0"
+
 locate-path@^5.0.0:
   version "5.0.0"
   resolved "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz"
@@ -2276,6 +2346,11 @@ lru-cache@^5.1.1:
   dependencies:
     yallist "^3.0.2"
 
+lunr@^2.3.9:
+  version "2.3.9"
+  resolved "https://registry.yarnpkg.com/lunr/-/lunr-2.3.9.tgz#18b123142832337dd6e964df1a5a7707b25d35e1"
+  integrity sha512-zTU3DaZaF3Rt9rhN3uBMGQD3dD2/vFQqnvZCDv4dl5iOzq2IZQqTxu90r4E5J+nP70J3ilqVCrbho2eWaeW8Ow==
+
 make-dir@^4.0.0:
   version "4.0.0"
   resolved "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz"
@@ -2295,6 +2370,23 @@ makeerror@1.0.12:
   dependencies:
     tmpl "1.0.5"
 
+markdown-it@^14.1.0:
+  version "14.1.0"
+  resolved "https://registry.yarnpkg.com/markdown-it/-/markdown-it-14.1.0.tgz#3c3c5992883c633db4714ccb4d7b5935d98b7d45"
+  integrity sha512-a54IwgWPaeBCAAsv13YgmALOF1elABB08FxO9i+r4VFk5Vl4pKokRPeX8u5TCgSsPi6ec1otfLjdOpVcgbpshg==
+  dependencies:
+    argparse "^2.0.1"
+    entities "^4.4.0"
+    linkify-it "^5.0.0"
+    mdurl "^2.0.0"
+    punycode.js "^2.3.1"
+    uc.micro "^2.1.0"
+
+mdurl@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/mdurl/-/mdurl-2.0.0.tgz#80676ec0433025dd3e17ee983d0fe8de5a2237e0"
+  integrity sha512-Lf+9+2r+Tdp5wXDXC4PcIBjTDtq4UKjCPMQhKIuzpJNW0b96kVqSwW0bT7FhRSfmAiFYgP+SCRvdrDozfh0U5w==
+
 merge-stream@^2.0.0:
   version "2.0.0"
   resolved "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz"
@@ -2339,6 +2431,13 @@ minimatch@^5.0.1:
   dependencies:
     brace-expansion "^2.0.1"
 
+minimatch@^9.0.5:
+  version "9.0.5"
+  resolved "https://registry.yarnpkg.com/minimatch/-/minimatch-9.0.5.tgz#d74f9dd6b57d83d8e98cfb82133b03978bc929e5"
+  integrity sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==
+  dependencies:
+    brace-expansion "^2.0.1"
+
 ms@^2.1.3:
   version "2.1.3"
   resolved "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz"
@@ -2535,6 +2634,11 @@ prompts@^2.0.1:
     kleur "^3.0.3"
     sisteransi "^1.0.5"
 
+punycode.js@^2.3.1:
+  version "2.3.1"
+  resolved "https://registry.yarnpkg.com/punycode.js/-/punycode.js-2.3.1.tgz#6b53e56ad75588234e79f4affa90972c7dd8cdb7"
+  integrity sha512-uxFIHU0YlHYhDQtV4R9J6a52SLx28BCjT+4ieh7IGbgwVJWO+km431c4yRlREUAsAmt/uMjQUyQHNEPf0M39CA==
+
 punycode@^2.1.0:
   version "2.3.1"
   resolved "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz"
@@ -2803,11 +2907,37 @@ type-fest@^4.41.0:
   resolved "https://registry.npmjs.org/type-fest/-/type-fest-4.41.0.tgz"
   integrity sha512-TeTSQ6H5YHvpqVwBRcnLDCBnDOHWYu7IvGbHT6N8AOymcr9PJGjc1GTtiWZTYg0NCgYwvnYWEkVChQAr9bjfwA==
 
+typedoc-docusaurus-theme@^1.4.2:
+  version "1.4.2"
+  resolved "https://registry.yarnpkg.com/typedoc-docusaurus-theme/-/typedoc-docusaurus-theme-1.4.2.tgz#0c9c538af868007347449c616578b63e111275f0"
+  integrity sha512-i9YYDcScLD0WUiX8I+LXHX3ZVvRDlJsmRo9l/uWrFT37cHlMz4Ay0GOnWzHUBnnwAo1uzYOw9RjUXznbWozBEA==
+
+typedoc-plugin-markdown@^4.8.1:
+  version "4.8.1"
+  resolved "https://registry.yarnpkg.com/typedoc-plugin-markdown/-/typedoc-plugin-markdown-4.8.1.tgz#481359c42e2738be84ad7581267c5b2255cb0431"
+  integrity sha512-ug7fc4j0SiJxSwBGLncpSo8tLvrT9VONvPUQqQDTKPxCoFQBADLli832RGPtj6sfSVJebNSrHZQRUdEryYH/7g==
+
+typedoc@^0.28.10:
+  version "0.28.10"
+  resolved "https://registry.yarnpkg.com/typedoc/-/typedoc-0.28.10.tgz#566a19201e7469dc5ca3cc436049655e0beb0201"
+  integrity sha512-zYvpjS2bNJ30SoNYfHSRaFpBMZAsL7uwKbWwqoCNFWjcPnI3e/mPLh2SneH9mX7SJxtDpvDgvd9/iZxGbo7daw==
+  dependencies:
+    "@gerrit0/mini-shiki" "^3.9.0"
+    lunr "^2.3.9"
+    markdown-it "^14.1.0"
+    minimatch "^9.0.5"
+    yaml "^2.8.0"
+
 typescript@^5.0.0:
   version "5.8.3"
   resolved "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz"
   integrity sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==
 
+uc.micro@^2.0.0, uc.micro@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/uc.micro/-/uc.micro-2.1.0.tgz#f8d3f7d0ec4c3dea35a7e3c8efa4cb8b45c9e7ee"
+  integrity sha512-ARDJmphmdvUk6Glw7y9DQ2bFkKBHwQHLi2lsaH6PPmz/Ka9sFOBsBluozhDltWmnv9u/cF6Rt87znRTPV+yp/A==
+
 undici-types@~7.8.0:
   version "7.8.0"
   resolved "https://registry.npmjs.org/undici-types/-/undici-types-7.8.0.tgz"
@@ -2888,6 +3018,11 @@ yallist@^3.0.2:
   resolved "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz"
   integrity sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==
 
+yaml@^2.8.0:
+  version "2.8.1"
+  resolved "https://registry.yarnpkg.com/yaml/-/yaml-2.8.1.tgz#1870aa02b631f7e8328b93f8bc574fac5d6c4d79"
+  integrity sha512-lcYcMxX2PO9XMGvAJkJ3OsNMw+/7FKes7/hgerGUYWIoWu5j/+YQqcZr5JnPZWzOsEBgMbSbiSTn/dv/69Mkpw==
+
 yargs-parser@^21.1.1:
   version "21.1.1"
   resolved "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz"
diff --git a/clmsr-subgraph/abis/CLMSRMarketCore.json b/clmsr-subgraph/abis/CLMSRMarketCore.json
index 981a550..5ea46ad 100644
--- a/clmsr-subgraph/abis/CLMSRMarketCore.json
+++ b/clmsr-subgraph/abis/CLMSRMarketCore.json
@@ -7,22 +7,12 @@
       "inputs": [
         {
           "internalType": "address",
-          "name": "_paymentToken",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "_positionContract",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "_managerContract",
+          "name": "target",
           "type": "address"
         }
       ],
-      "stateMutability": "nonpayable",
-      "type": "constructor"
+      "name": "AddressEmptyCode",
+      "type": "error"
     },
     {
       "inputs": [
@@ -40,11 +30,6 @@
       "name": "BinCountExceedsLimit",
       "type": "error"
     },
-    {
-      "inputs": [],
-      "name": "ContractPaused",
-      "type": "error"
-    },
     {
       "inputs": [
         {
@@ -61,16 +46,52 @@
       "name": "CostExceedsMaximum",
       "type": "error"
     },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "implementation",
+          "type": "address"
+        }
+      ],
+      "name": "ERC1967InvalidImplementation",
+      "type": "error"
+    },
+    {
+      "inputs": [],
+      "name": "ERC1967NonPayable",
+      "type": "error"
+    },
+    {
+      "inputs": [],
+      "name": "EnforcedPause",
+      "type": "error"
+    },
+    {
+      "inputs": [],
+      "name": "ExpectedPause",
+      "type": "error"
+    },
     {
       "inputs": [],
       "name": "FactorOutOfBounds",
       "type": "error"
     },
+    {
+      "inputs": [],
+      "name": "FailedCall",
+      "type": "error"
+    },
     {
       "inputs": [],
       "name": "IncompleteChunkProcessing",
       "type": "error"
     },
+    {
+      "inputs": [],
+      "name": "InvalidInitialization",
+      "type": "error"
+    },
     {
       "inputs": [],
       "name": "InvalidLiquidityParameter",
@@ -166,17 +187,6 @@
       "name": "InvalidTimeRange",
       "type": "error"
     },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        }
-      ],
-      "name": "MarketAlreadyExists",
-      "type": "error"
-    },
     {
       "inputs": [
         {
@@ -225,6 +235,33 @@
       "name": "MarketNotStarted",
       "type": "error"
     },
+    {
+      "inputs": [],
+      "name": "NotInitializing",
+      "type": "error"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "owner",
+          "type": "address"
+        }
+      ],
+      "name": "OwnableInvalidOwner",
+      "type": "error"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "account",
+          "type": "address"
+        }
+      ],
+      "name": "OwnableUnauthorizedAccount",
+      "type": "error"
+    },
     {
       "inputs": [],
       "name": "ReentrancyGuardReentrantCall",
@@ -246,6 +283,22 @@
       "name": "TreeNotInitialized",
       "type": "error"
     },
+    {
+      "inputs": [],
+      "name": "UUPSUnauthorizedCallContext",
+      "type": "error"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "bytes32",
+          "name": "slot",
+          "type": "bytes32"
+        }
+      ],
+      "name": "UUPSUnsupportedProxiableUUID",
+      "type": "error"
+    },
     {
       "inputs": [
         {
@@ -262,6 +315,37 @@
       "name": "ZeroAddress",
       "type": "error"
     },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": false,
+          "internalType": "uint256",
+          "name": "step",
+          "type": "uint256"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint256",
+          "name": "value1",
+          "type": "uint256"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint256",
+          "name": "value2",
+          "type": "uint256"
+        },
+        {
+          "indexed": false,
+          "internalType": "string",
+          "name": "message",
+          "type": "string"
+        }
+      ],
+      "name": "DebugSellProceeds",
+      "type": "event"
+    },
     {
       "anonymous": false,
       "inputs": [
@@ -294,6 +378,19 @@
       "name": "EmergencyUnpaused",
       "type": "event"
     },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": false,
+          "internalType": "uint64",
+          "name": "version",
+          "type": "uint64"
+        }
+      ],
+      "name": "Initialized",
+      "type": "event"
+    },
     {
       "anonymous": false,
       "inputs": [
@@ -368,6 +465,82 @@
       "name": "MarketSettled",
       "type": "event"
     },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": true,
+          "internalType": "uint256",
+          "name": "marketId",
+          "type": "uint256"
+        },
+        {
+          "indexed": false,
+          "internalType": "int256",
+          "name": "settlementValue",
+          "type": "int256"
+        }
+      ],
+      "name": "MarketSettlementValueSubmitted",
+      "type": "event"
+    },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": true,
+          "internalType": "uint256",
+          "name": "marketId",
+          "type": "uint256"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint64",
+          "name": "newStartTimestamp",
+          "type": "uint64"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint64",
+          "name": "newEndTimestamp",
+          "type": "uint64"
+        }
+      ],
+      "name": "MarketTimingUpdated",
+      "type": "event"
+    },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "previousOwner",
+          "type": "address"
+        },
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "newOwner",
+          "type": "address"
+        }
+      ],
+      "name": "OwnershipTransferred",
+      "type": "event"
+    },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": false,
+          "internalType": "address",
+          "name": "account",
+          "type": "address"
+        }
+      ],
+      "name": "Paused",
+      "type": "event"
+    },
     {
       "anonymous": false,
       "inputs": [
@@ -455,6 +628,37 @@
       "name": "PositionDecreased",
       "type": "event"
     },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": true,
+          "internalType": "uint256",
+          "name": "marketId",
+          "type": "uint256"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint256",
+          "name": "from",
+          "type": "uint256"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint256",
+          "name": "to",
+          "type": "uint256"
+        },
+        {
+          "indexed": false,
+          "internalType": "bool",
+          "name": "done",
+          "type": "bool"
+        }
+      ],
+      "name": "PositionEventsProgress",
+      "type": "event"
+    },
     {
       "anonymous": false,
       "inputs": [
@@ -603,6 +807,32 @@
       "name": "RangeFactorApplied",
       "type": "event"
     },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": false,
+          "internalType": "address",
+          "name": "account",
+          "type": "address"
+        }
+      ],
+      "name": "Unpaused",
+      "type": "event"
+    },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "implementation",
+          "type": "address"
+        }
+      ],
+      "name": "Upgraded",
+      "type": "event"
+    },
     {
       "inputs": [],
       "name": "MAX_LIQUIDITY_PARAMETER",
@@ -642,6 +872,32 @@
       "stateMutability": "view",
       "type": "function"
     },
+    {
+      "inputs": [],
+      "name": "UPGRADE_INTERFACE_VERSION",
+      "outputs": [
+        {
+          "internalType": "string",
+          "name": "",
+          "type": "string"
+        }
+      ],
+      "stateMutability": "view",
+      "type": "function"
+    },
+    {
+      "inputs": [],
+      "name": "_nextMarketId",
+      "outputs": [
+        {
+          "internalType": "uint256",
+          "name": "",
+          "type": "uint256"
+        }
+      ],
+      "stateMutability": "view",
+      "type": "function"
+    },
     {
       "inputs": [
         {
@@ -790,6 +1046,40 @@
       "stateMutability": "view",
       "type": "function"
     },
+    {
+      "inputs": [
+        {
+          "internalType": "uint256",
+          "name": "marketId",
+          "type": "uint256"
+        },
+        {
+          "internalType": "int256",
+          "name": "lowerTick",
+          "type": "int256"
+        },
+        {
+          "internalType": "int256",
+          "name": "upperTick",
+          "type": "int256"
+        },
+        {
+          "internalType": "uint256",
+          "name": "cost",
+          "type": "uint256"
+        }
+      ],
+      "name": "calculateQuantityFromCost",
+      "outputs": [
+        {
+          "internalType": "uint128",
+          "name": "quantity",
+          "type": "uint128"
+        }
+      ],
+      "stateMutability": "view",
+      "type": "function"
+    },
     {
       "inputs": [
         {
@@ -835,11 +1125,6 @@
     },
     {
       "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        },
         {
           "internalType": "int256",
           "name": "minTick",
@@ -872,7 +1157,13 @@
         }
       ],
       "name": "createMarket",
-      "outputs": [],
+      "outputs": [
+        {
+          "internalType": "uint256",
+          "name": "marketId",
+          "type": "uint256"
+        }
+      ],
       "stateMutability": "nonpayable",
       "type": "function"
     },
@@ -911,16 +1202,21 @@
       "type": "function"
     },
     {
-      "inputs": [],
-      "name": "getManagerContract",
-      "outputs": [
+      "inputs": [
         {
-          "internalType": "address",
-          "name": "",
-          "type": "address"
+          "internalType": "uint256",
+          "name": "marketId",
+          "type": "uint256"
+        },
+        {
+          "internalType": "uint256",
+          "name": "scanLimit",
+          "type": "uint256"
         }
       ],
-      "stateMutability": "view",
+      "name": "emitPositionSettledBatch",
+      "outputs": [],
+      "stateMutability": "nonpayable",
       "type": "function"
     },
     {
@@ -984,6 +1280,21 @@
               "internalType": "uint256",
               "name": "liquidityParameter",
               "type": "uint256"
+            },
+            {
+              "internalType": "uint32",
+              "name": "positionEventsCursor",
+              "type": "uint32"
+            },
+            {
+              "internalType": "bool",
+              "name": "positionEventsEmitted",
+              "type": "bool"
+            },
+            {
+              "internalType": "int256",
+              "name": "settlementValue",
+              "type": "int256"
             }
           ],
           "internalType": "struct ICLMSRMarketCore.Market",
@@ -1103,26 +1414,31 @@
       "type": "function"
     },
     {
-      "inputs": [],
-      "name": "isPaused",
-      "outputs": [
+      "inputs": [
         {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
+          "internalType": "address",
+          "name": "_paymentToken",
+          "type": "address"
+        },
+        {
+          "internalType": "address",
+          "name": "_positionContract",
+          "type": "address"
         }
       ],
-      "stateMutability": "view",
+      "name": "initialize",
+      "outputs": [],
+      "stateMutability": "nonpayable",
       "type": "function"
     },
     {
       "inputs": [],
-      "name": "managerContract",
+      "name": "isPaused",
       "outputs": [
         {
-          "internalType": "address",
+          "internalType": "bool",
           "name": "",
-          "type": "address"
+          "type": "bool"
         }
       ],
       "stateMutability": "view",
@@ -1221,6 +1537,21 @@
           "internalType": "uint256",
           "name": "liquidityParameter",
           "type": "uint256"
+        },
+        {
+          "internalType": "uint32",
+          "name": "positionEventsCursor",
+          "type": "uint32"
+        },
+        {
+          "internalType": "bool",
+          "name": "positionEventsEmitted",
+          "type": "bool"
+        },
+        {
+          "internalType": "int256",
+          "name": "settlementValue",
+          "type": "int256"
         }
       ],
       "stateMutability": "view",
@@ -1265,6 +1596,19 @@
       "stateMutability": "nonpayable",
       "type": "function"
     },
+    {
+      "inputs": [],
+      "name": "owner",
+      "outputs": [
+        {
+          "internalType": "address",
+          "name": "",
+          "type": "address"
+        }
+      ],
+      "stateMutability": "view",
+      "type": "function"
+    },
     {
       "inputs": [
         {
@@ -1346,6 +1690,26 @@
       "stateMutability": "nonpayable",
       "type": "function"
     },
+    {
+      "inputs": [],
+      "name": "proxiableUUID",
+      "outputs": [
+        {
+          "internalType": "bytes32",
+          "name": "",
+          "type": "bytes32"
+        }
+      ],
+      "stateMutability": "view",
+      "type": "function"
+    },
+    {
+      "inputs": [],
+      "name": "renounceOwnership",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
     {
       "inputs": [
         {
@@ -1355,7 +1719,7 @@
         },
         {
           "internalType": "int256",
-          "name": "settlementTick",
+          "name": "settlementValue",
           "type": "int256"
         }
       ],
@@ -1364,186 +1728,272 @@
       "stateMutability": "nonpayable",
       "type": "function"
     },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "newOwner",
+          "type": "address"
+        }
+      ],
+      "name": "transferOwnership",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
     {
       "inputs": [],
       "name": "unpause",
       "outputs": [],
       "stateMutability": "nonpayable",
       "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "uint256",
+          "name": "marketId",
+          "type": "uint256"
+        },
+        {
+          "internalType": "uint64",
+          "name": "newStartTimestamp",
+          "type": "uint64"
+        },
+        {
+          "internalType": "uint64",
+          "name": "newEndTimestamp",
+          "type": "uint64"
+        }
+      ],
+      "name": "updateMarketTiming",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "newImplementation",
+          "type": "address"
+        },
+        {
+          "internalType": "bytes",
+          "name": "data",
+          "type": "bytes"
+        }
+      ],
+      "name": "upgradeToAndCall",
+      "outputs": [],
+      "stateMutability": "payable",
+      "type": "function"
     }
   ],
-  "bytecode": "0x60e034620001b257601f620052d438819003918201601f19168301916001600160401b03831184841017620001b757808492606094604052833981010312620001b2576200004d81620001cd565b6200006960406200006160208501620001cd565b9301620001cd565b6001600055916001600160a01b0391821680158015620001a7575b80156200019c575b6200018a576080521660a05260c0526040516150f19081620001e382396080518181816109e9015281816143040152614878015260a0518181816106ea015281816109a401528181610c6701528181610cd701528181610d2e015281816110870152818161115c0152818161132501528181611403015281816119470152818161199601528181611c9a01528181611cdf01528181611d7901528181611dd1015281816125af015281816126a9015281816126f90152818161299c015281816129e301526134a4015260c0518181816101ce01528181610b8e015281816117cb0152818161230d0152818161251801528181612ecb01526130600152f35b60405163d92e233d60e01b8152600490fd5b50828416156200008c565b508282161562000084565b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001b25756fe60a080604052600436101561001357600080fd5b60009060e0908235821c908163070ab8c914612ea65750806309f28be61461098e57806313b6eb0914612e7f5780632710ac80146110535780632d6ce61d1461265b5780632ed66650146126395780633013ce29146109d35780633d65117b146125785780633f4ba83a14612505578063449a03881461245157806344a1a58e146122f95780635c975abb14610f8a5780636084fa03146118f1578063692c3fc71461189a5780636da66355146117805780636ec469b1146116515780637404d9571461163357806379334798146113af5780637ed54782146112ee5780638a69614e146111145780639fc46ecb14611058578063a3a6b8ce14611053578063b1283e7714610fad578063b187bd2614610f8a578063b762d83414610b7d578063bcb1732214610b59578063c9ac6b3114610a18578063d41c3a65146109d3578063e9eb3ba51461098e578063eb44fdd314610865578063f0b7f3b11461057c5763f980b80c1461018357600080fd5b34610578578060031936011261057857600435906001600160401b039060843582811690602480359160643590604435908590036105735760a4359687168097036105735760c435937f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361055c5760ff6001541661054a5761022689600052600260205263ffffffff60056040600020015416151590565b610532578181121561050957898313156105095761024d8361024883856132a5565b6132be565b61050957878610156104f75766038d7ea4c68000851080156104e5575b6104d3576102818361027c83856132a5565b61336e565b938a8513806104c6575b1561048c5763ffffffff8095169485158015610480575b61045f57908a87878e9488888f8f8f908b928b926040519a6102c38c61313e565b60018c5260208c019385855260408d0192835260608d0193845260808d0195865260a08d0196875260c08d019788528c019788526101008c01998a526101208c019a8b528d52600260205260408d209a511515928b549051151560081b61ff0016915160101b69ffffffffffffffff000016926001600160401b0360501b905160501b169360ff169071ffffffffffffffffffffffffffffffffffff19161717171788555160018801555160028701555160038601555160048501556005840191511663ffffffff1982541617905551906006015573__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__9060036020526040832090823b1561045b57604484928994604051958694859363d886284b60e01b855260048501528301525af4801561045057610438575b50507f2453c1a297c658a5b6905526d84f0b4ac79c0d9cc5fb5601664602efee53121497604051968752602087015260408601526060850152608084015260a083015260c0820152a280f35b61044190613115565b61044c5789386103ec565b8980fd5b6040513d84823e3d90fd5b8380fd5b60405163515eb6ff60e11b815260048101879052620f424081840152604490fd5b50620f424086116102a2565b60649060136040519162461bcd60e51b83526020600484015282015272125b9d985b1a59081c985b99d94818dbdd5b9d606a1b6044820152fd5b50620f424085131561028b565b604051630b281d1960e31b8152600490fd5b50683635c9adc5dea00000851161026a565b60405163536a71af60e01b8152600490fd5b60405163040b1c7360e21b81526004810191909152602481019190915260448101829052606490fd5b6040516311453d1960e31b8152600481018a90528490fd5b60405163ab35696f60e01b8152600490fd5b60405163d86ad9cf60e01b81523360048201528490fd5b600080fd5b5080fd5b82346108625760a03660031901126108625760446024600435813583356105a16130a5565b906084359160ff6001541661054a576001600160801b03906105c1613564565b1690811561084a576000858152600260209081526040909120600581015491989163ffffffff161561083257805460ff811615610820576001600160401b0390818160101c16421061080e5760501c1642116107fc576106296106238261317b565b876132de565b61063b6106358261317b565b846132de565b8286136107df578286146107df5761066290600461065988866132a5565b910154906132be565b6107c35764e8d4a510008084029064e8d4a50fff61068283868a8c61432a565b0104948086116107a75750906106b7869261069d873361481d565b8860005260028b526006604060002001549085858b613dd0565b6040516330906fad60e21b81523360048201529788018790528701526064860181905260848601829052868660a48160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af195861561079b5760009661076c575b506040519384528684015260408301526060820152827fc33c3b4ea19b40f02901978a93e787a0caa1d6fd23dfa228ae891fe96867e17160803393a46001600055604051908152f35b9095508681813d8311610794575b610784818361315a565b8101031261057357519487610723565b503d61077a565b6040513d6000823e3d90fd5b859150886040519263f6daf99360e01b84526004840152820152fd5b604051631150381b60e11b815260048101869052808801839052fd5b50604051631150381b60e11b815260048101869052808801839052fd5b60405163b2094b5960e01b8152600490fd5b604051630ee8c41760e31b8152600490fd5b604051635a90bb8d60e11b8152600490fd5b604051634cba20ef60e01b8152600481018890528890fd5b604051633b59e48960e11b8152600481018390528690fd5b80fd5b503461057857602036600319011261057857604051600435926108878261313e565b8082528060208301528060408301528060608301528060808301528060a08301528060c0830152808383015261010090808284015280610120809401526108e485600052600260205263ffffffff60056040600020015416151590565b1561097557906109026040836101409786955260026020522061317b565b906040519482511515865260208301511515602087015260408301516001600160401b03809116604088015260608401511660608701526080830151608087015260a083015160a087015260c083015160c0870152808301519086015263ffffffff818301511690850152015190820152f35b604051634cba20ef60e01b815260048101869052602490fd5b82346108625780600319360112610862576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b82346108625780600319360112610862576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5090346108625760803660031901126108625750600435906024803560443591610a406130a5565b610a6086600052600260205263ffffffff60056040600020015416151590565b15610b42576001600160801b0316938415610b2b57856000526002602052610a8b604060002061317b565b90610a9682856132de565b610aa082866132de565b848413610b0e57848414610b0e5790610ac691610abd85876132a5565b910151906132be565b610af2575060209364e8d4a50fff92610ae89264e8d4a510008096029261432a565b0104604051908152f35b9160449260405192631150381b60e11b84526004840152820152fd5b604484868560405192631150381b60e11b84526004840152820152fd5b50604051633b59e48960e11b815260048101859052fd5b50604051634cba20ef60e01b815260048101869052fd5b82346108625780600319360112610862576020604051683635c9adc5dea000008152f35b823461086257610b8c366130ff565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610f7257610bdc82600052600260205263ffffffff60056040600020015416151590565b15610f5957818352600260205260408320805460ff8160081c16610f405760028201548084128015610f33575b610f0857506101009083600184015561ffff1916179055817fca3a568dfb73dd7b7b3c0b28f130edbf4b688f534869c3de083664c43c11430e6020604051848152a260405163348dbbed60e21b8152600481019290925282826024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa918215610efd578392610e4e575b50825b8251811015610e4a57600581901b83016020015160405163eb02c30160e01b81526004810182905290919060a09081816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa918215610e12578792610e1d575b50506040516331a9108f60e11b815260048101849052926020846024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015610e12576001948891610de3575b5085602084015113159283610dd5575b7f1a81eb5d53aa7bec98cadd0a6303be87e540f77ba90e63cd945e49b8eb697b0a916040918515610dcd57606001516001600160801b0316945b825195865215156020860152868060a01b031693a301610ca2565b508994610db2565b604081015187129350610d78565b610e05915060203d602011610e0b575b610dfd818361315a565b810190613277565b88610d68565b503d610df3565b6040513d89823e3d90fd5b610e3c9250803d10610e43575b610e34818361315a565b810190613204565b8680610d0f565b503d610e2a565b8380f35b9091503d8084833e610e60818361315a565b810160208282031261045b5781516001600160401b0392838211610ee1570181601f82011215610ef9578051928311610ee5578260051b9060405193610ea9602084018661315a565b8452602080850192820101928311610ee157602001905b828210610ed1575050509083610c9f565b8151815260209182019101610ec0565b8580fd5b634e487b7160e01b85526041600452602485fd5b8480fd5b6040513d85823e3d90fd5b6003830154604051638a228b0d60e01b81526004810186905260248101929092526044820152606490fd5b5060038301548413610c09565b604051634e0558fb60e01b815260048101859052602490fd5b604051634cba20ef60e01b815260048101839052602490fd5b60405163d86ad9cf60e01b8152336004820152602490fd5b8234610862578060031936011261086257602060ff600154166040519015158152f35b5034610578576020366003190112610578576040610140926004358152600260205220908154916001600160401b03916001820154906002830154600384015490600485015493600663ffffffff600588015416960154966040519860ff811615158a5260ff8160081c16151560208b0152818160101c1660408b015260501c166060890152608088015260a087015260c0860152840152610100830152610120820152f35b61304a565b82346108625760203660031901126108625760405163eb02c30160e01b8152600480359082015260a0816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561079b57602092916110f5575b5064e8d4a50fff610ae864e8d4a5100092836001600160801b0360608301511602908051906040878201519101519161361e565b61110e915060a03d60a011610e4357610e34818361315a565b826110c1565b82346108625760209081600319360112610862576004359060ff6001541661054a5761113e613564565b60405163eb02c30160e01b8152600481018390526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693919060a082602481885afa9182156112e35784926112c2575b506040516331a9108f60e11b815260048101849052908682602481895afa9182156112b7578592611298575b5033911603610f72578051835260028552846111e16040852061317b565b01511561127f57506111f281613487565b926111fd84336142af565b803b1561127b57828091602460405180948193630e3298ef60e21b83528760048401525af18015610efd57611267575b5090600191604051908482527ff18ca9717b47ea7629d17b5d7b2ede46e864155725629e7d0347924c2f6d112d863393a355604051908152f35b6112718391613115565b610578578461122d565b8280fd5b602490516040519063b23e5f9f60e01b82526004820152fd5b6112b0919250873d8911610e0b57610dfd818361315a565b90876111c3565b6040513d87823e3d90fd5b6112dc91925060a03d60a011610e4357610e34818361315a565b9086611197565b6040513d86823e3d90fd5b82346108625760403660031901126108625761130861308f565b60405163eb02c30160e01b8152600480359082015260a0816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa92831561079b5760209364e8d4a50fff92610ae89291611390575b5064e8d4a51000938151906040866001600160801b03898601519316029301519161432a565b6113a9915060a03d60a011610e4357610e34818361315a565b8561136a565b8234610862576113be366130d5565b9060ff6001541661054a576113d1613564565b6001600160801b039081811693841561161a5760405163eb02c30160e01b8152600481018290526001600160a01b03957f000000000000000000000000000000000000000000000000000000000000000087169160a081602481865afa90811561079b576000916115fb575b506040516331a9108f60e11b8152600481018590526020988982602481885afa91821561079b576000926115dc575b5033911603610f725761147f8151613587565b805188820190815190604084019064e8d4a50fff6114ab83519264e8d4a5100093848a0296879261432a565b010499808b116115be57506060928994928c6114e8936114cb8e3361481d565b600286519451915192856000525260066040600020015493613dd0565b01511601948486116115a857813b1561057357604051630168610b60e51b8152600481018490526001600160801b0387166024820152916000908390604490829084905af190811561079b577fa9efae0c21a2db158c2af2d36b5c18dc14d792a79dfab662442466a80095ea5f9261158892611599575b50604080516001600160801b039687168152958816602087015285015233939081906060820190565b0390a3600160005560405191168152f35b6115a290613115565b8861155f565b634e487b7160e01b600052601160045260246000fd5b8a6044916040519163f6daf99360e01b835260048301526024820152fd5b6115f49192508a3d8c11610e0b57610dfd818361315a565b908a61146c565b611614915060a03d60a011610e4357610e34818361315a565b8861143d565b604051633b59e48960e11b815260048101869052602490fd5b82346108625780600319360112610862576020604051620f42408152f35b50903461086257611661366130ff565b9261168282600052600260205263ffffffff60056040600020015416151590565b15610f59578183526020936002855261169d6040852061317b565b916116a883836132de565b8201519081810191821285821290801582169115161761176c57916116ce918693613389565b928452600382526040808520905163694f552560e01b8152600481019190915263ffffffff9182166024820152921660448301528160648173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af49182156117605791611733575b50604051908152f35b90508181813d8311611759575b61174a818361315a565b8101031261057357513861172a565b503d611740565b604051903d90823e3d90fd5b634e487b7160e01b85526011600452602485fd5b82346108625760208060031936011261057857600435906001600160401b0380831161045b573660238401121561045b57826004013590811161045b57366024828501011161045b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610f72578382601f1992806024604051976118178588601f860116018a61315a565b828952018388013785010152600160ff1981541617600155604051918083528351938482850152855b85811061188657505050906040817f375c0abd968f4602b557f6ac9a48ffc89820233aa9becc5d7ff1176fd09eafff9386838784010152601f339601168101030190a280f35b818101830151858201604001528201611840565b82346108625760203660031901126108625760406080916004358152600360205220600181015490600263ffffffff91015490604051928181168452818160201c16602085015260401c1660408301526060820152f35b823461086257611900366130d5565b60ff6001541661054a57611912613564565b6001600160801b0382161561229a5760405163eb02c30160e01b8152600481018490526001600160a01b03929060a0816024817f000000000000000000000000000000000000000000000000000000000000000088165afa90811561079b576000916122da575b506040516331a9108f60e11b8152600481018690526020816024817f000000000000000000000000000000000000000000000000000000000000000089165afa90811561079b576000916122bb575b508433911603610f72576119dc8151613587565b6001600160801b036060820151166001600160801b0383161161229a57805160208201805190604084019164e8d4a50fff611a2e84519564e8d4a51000968794856001600160801b038c16029261361e565b01049580871061227c575083519051915192816000526002602052604060002090611a67611a6060068401549361317b565b8686613389565b608052916040516330ed1f5d60e01b81528160048201526701cdda4faccd0000602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561079b5760009161224a575b50806000198101116115a85760001981016001600160801b038a16840211611f035750604051906316cf339960e21b928383526001600160801b038a16026004830152602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561079b57600091611ed1575b506040519063ec6e92cd60e01b8252600482015260208160248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561079b57600091611e9f575b50604051918252670de0b6b3a76400006004830152602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561079b57600091611e6d575b50662386f26fc1000081108015611e5b575b611e495773__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__91836000526003602052604060002090833b15610573576040516330f27d1f60e01b8152608051600482019390935263ffffffff9182166024820152911660448201526064810182905291600090839060849082905af490811561079b5760008051602061509c83398151915292602092611e3a575b50604051908152a45b611c6683336142af565b6001600160801b0360608184169201511603936001600160801b0385116115a8576001600160801b0385169384611d7657807f0000000000000000000000000000000000000000000000000000000000000000163b156105735760008091602460405180948193630e3298ef60e21b83528760048401527f0000000000000000000000000000000000000000000000000000000000000000165af1801561079b576040967fe3a918fd34698242cc99d5ba0987edaa47d8f5b8ed601ef29e08a9b7d72ecc49928692611d67575b505b87516001600160801b0395861681529416602085015260408401523392606090a3600160005582519182526020820152f35b611d7090613115565b88611d33565b807f0000000000000000000000000000000000000000000000000000000000000000163b1561057357604051630168610b60e51b8152600481018390526001600160801b0387166024820152906000908290604490829084907f0000000000000000000000000000000000000000000000000000000000000000165af1801561079b576040967fe3a918fd34698242cc99d5ba0987edaa47d8f5b8ed601ef29e08a9b7d72ecc49928692611e2b575b50611d35565b611e3490613115565b88611e25565b611e4390613115565b8b611c53565b60405163a2f9e7b560e01b8152600490fd5b5068056bc75e2d631000008111611bc4565b906020823d602011611e97575b81611e876020938361315a565b810103126108625750518a611bb2565b3d9150611e7a565b90506020813d602011611ec9575b81611eba6020938361315a565b8101031261057357518b611b6c565b3d9150611ead565b90506020813d602011611efb575b81611eec6020938361315a565b8101031261057357518b611b2c565b3d9150611edf565b9397969991611f2660009c949a929c198601826001600160801b038b16026135eb565b60001981019081116115a857611f446103e891600019880190613605565b11612225576001600160801b03881602966000975b8015158061221a575b156121f5578c9060001987018111156121ef5760001987015b604051926316cf339960e21b8452816004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561079b576000936121bb575b506040519263ec6e92cd60e01b8452600484015260208360248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561079b57600093612187575b50604051926316cf339960e21b8452670de0b6b3a76400006004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561079b57600093612153575b50662386f26fc1000083108015612141575b611e49578b600052600360205260406000209173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b1561057357600084938f6120d660405196879384936330f27d1f60e01b8552608051916004860190949392916060926080830196835263ffffffff80921660208401521660408201520152565b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af492831561079b578a8e60008051602061509c83398151915260208f949861212c9961212699612132575b50604051908152a46135de565b9861360f565b97611f59565b61213b90613115565b38612119565b5068056bc75e2d631000008311612060565b90926020823d60201161217f575b8161216e6020938361315a565b81010312610862575051918f61204e565b3d9150612161565b90926020823d6020116121b3575b816121a26020938361315a565b81010312610862575051918f612000565b3d9150612195565b90926020823d6020116121e7575b816121d66020938361315a565b81010312610862575051918f611fc0565b3d91506121c9565b80611f7b565b9650975097509794509750505015611c5c575b6040516332581cb160e01b8152600490fd5b506103e88910611f62565b876001600160801b036024928160405193633b59e48960e11b85521602166004820152fd5b90506020813d602011612274575b816122656020938361315a565b8101031261057357518c611ab8565b3d9150612258565b604490876040519163f6daf99360e01b835260048301526024820152fd5b604051633b59e48960e11b81526001600160801b0383166004820152602490fd5b6122d4915060203d602011610e0b57610dfd818361315a565b866119c8565b6122f3915060a03d60a011610e4357610e34818361315a565b85611979565b823461086257612308366130bb565b9291907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610f725761235b82600052600260205263ffffffff60056040600020015416151590565b15610f5957818352602093600285526123766040852061317b565b9161238183826132de565b61238b83836132de565b818113612434579161239e918693613389565b928452600382526040808520905163049bebd960e31b8152600481019190915263ffffffff9182166024820152921660448301528180606481015b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af491821561176057916124075750604051908152f35b90508181813d831161242d575b61241e818361315a565b8101031261057357518261172a565b503d612414565b60449160405191631150381b60e11b835260048301526024820152fd5b823461086257612460366130bb565b92919061248382600052600260205263ffffffff60056040600020015416151590565b15610f59578183526020936002855261249e6040852061317b565b916124a983826132de565b6124b383836132de565b81811361243457916124c6918693613389565b928452600382526040808520905163694f552560e01b8152600481019190915263ffffffff9182166024820152921660448301528180606481016123d9565b82346108625780600319360112610862577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610f725760ff1960015416600155337ff5cbf596165cc457b2cd92e8d8450827ee314968160a5696402d75766fc52caf8280a280f35b82346108625760403660031901126108625761259261308f565b60405163eb02c30160e01b8152600480359082015260a0816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa92831561079b5760209364e8d4a50fff92610ae8929161261a575b5064e8d4a51000938151906040866001600160801b03898601519316029301519161361e565b612633915060a03d60a011610e4357610e34818361315a565b856125f4565b8234610862578060031936011261086257602060405166038d7ea4c680008152f35b82346108625760403660031901126108625760243560ff6001541661054a57612682613564565b60405163eb02c30160e01b815260048035908201526001600160a01b03919060a0816024817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561079b57600091612e60575b506040516331a9108f60e11b815260048035908201526020816024817f000000000000000000000000000000000000000000000000000000000000000088165afa90811561079b57600091612e41575b508333911603610f725761273f8151613587565b64e8d4a51000906001600160801b0391808360608401511602825192602081019264e8d4a50fff61277a84865197604086019889519161361e565b01049580871061227c575051915192519382600052600260205260406000206127b16127aa60068301549261317b565b8787613389565b9190926040516330ed1f5d60e01b81528260048201526701cdda4faccd0000602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561079b57600091612e0f575b506000199181838101116115a8578183018711612b1957505050604051906316cf339960e21b948583526004830152602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561079b57600091612ae7575b506040519063ec6e92cd60e01b8252600482015260208160248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561079b57600091612ab5575b50604051938452670de0b6b3a76400006004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561079b57600093612a81575b50662386f26fc1000083108015612a6f575b611e495773__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90846000526003602052604060002091803b15610573576040516330f27d1f60e01b8152600481019390935263ffffffff938416602484015292166044820152606481018390529190600090839060849082905af490811561079b5760008051602061509c83398151915292602092612a60575b50604051908152a45b61299981336142af565b817f0000000000000000000000000000000000000000000000000000000000000000163b156105735760008092602460405180958193630e3298ef60e21b835260043560048401527f0000000000000000000000000000000000000000000000000000000000000000165af191821561079b57602092612a51575b5060405181815233907f467bc11eddf702a2091fefc23d3064f17939ba1005bd43304f15604c9b6f2a9b8460043592a36001600055604051908152f35b612a5a90613115565b82612a14565b612a6990613115565b88612986565b5068056bc75e2d6310000083116128f9565b90926020823d602011612aad575b81612a9c6020938361315a565b8101031261086257505191886128e7565b3d9150612a8f565b90506020813d602011612adf575b81612ad06020938361315a565b810103126105735751896128a1565b3d9150612ac3565b90506020813d602011612b11575b81612b026020938361315a565b81010312610573575189612861565b3d9150612af5565b612b31838394959b98939d99969d9a979a01836135eb565b8481019081116115a857612b4b6103e89186860190613605565b11612df55750956000965b80151580612dea575b15612dc857828401811115612dc2578383015b604051906316cf339960e21b82528060048301528b602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561079b57600092612d8e575b506040519163ec6e92cd60e01b8352600483015260208260248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561079b57600092612d5a575b50604051916316cf339960e21b8352670de0b6b3a76400006004840152602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561079b57600092612d26575b50662386f26fc1000082108015612d14575b611e495786600052600360205260406000209273__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b15610573576040516330f27d1f60e01b8152600481019490945263ffffffff8c811660248601528f1660448501526064840183905260008460848173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af493841561079b57898960008051602061509c8339815191526020612d08978f95612d0e9a6121325750604051908152a46135de565b9761360f565b96612b56565b5068056bc75e2d631000008211612c58565b90916020823d602011612d52575b81612d416020938361315a565b81010312610862575051908e612c46565b3d9150612d34565b90916020823d602011612d86575b81612d756020938361315a565b81010312610862575051908e612bf8565b3d9150612d68565b90916020823d602011612dba575b81612da96020938361315a565b81010312610862575051908e612bb8565b3d9150612d9c565b80612b72565b98509950505050505050501561298f576040516332581cb160e01b8152600490fd5b506103e88810612b5f565b604051633b59e48960e11b81529116600482015260249150fd5b90506020813d602011612e39575b81612e2a6020938361315a565b8101031261057357518b612801565b3d9150612e1d565b612e5a915060203d602011610e0b57610dfd818361315a565b8461272b565b612e79915060a03d60a011610e4357610e34818361315a565b836126db565b8234610862576020366003190112610862576020612e9e600435613487565b604051908152f35b83903461057857608036600319011261057857604435906024359060043590606435907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036130355750612f1a82600052600260205263ffffffff60056040600020015416151590565b15610f59578185526002602052612f336040862061317b565b612f3d81856132de565b612f4781866132de565b84841361301757612f5a86918686613389565b848352600360205260408320929173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90813b1561045b576040516330f27d1f60e01b8152600481019590955263ffffffff908116602486015291909116604484015260648301849052829060849082905af4801561300c57612fe8575b50602060008051602061509c83398151915291604051908152a480f35b60008051602061509c8339815191529195613004602092613115565b959150612fcb565b6040513d88823e3d90fd5b6044848660405191631150381b60e11b835260048301526024820152fd5b63d86ad9cf60e01b8152336004820152602490fd5b34610573576000366003190112610573576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b602435906001600160801b038216820361057357565b606435906001600160801b038216820361057357565b606090600319011261057357600435906024359060443590565b606090600319011261057357600435906024356001600160801b0381168103610573579060443590565b6040906003190112610573576004359060243590565b6001600160401b03811161312857604052565b634e487b7160e01b600052604160045260246000fd5b61014081019081106001600160401b0382111761312857604052565b90601f801991011681019081106001600160401b0382111761312857604052565b906040516131888161313e565b61012060068294805460ff81161515855260ff8160081c16151560208601526001600160401b0390818160101c16604087015260501c16606085015260018101546080850152600281015460a0850152600381015460c0850152600481015460e085015263ffffffff6005820154166101008501520154910152565b908160a091031261057357604051906001600160401b039060a0830182811184821017613128576040528051835260208101516020840152604081015160408401526060810151906001600160801b03821682036105735760809160608501520151908116810361057357608082015290565b9081602091031261057357516001600160a01b03811681036105735790565b90816020910312610573575190565b818103929160001380158285131691841216176115a857565b81156132c8570790565b634e487b7160e01b600052601260045260246000fd5b9060a0810180518084128015613361575b613336575060e061330461330f9251856132a5565b9201918251906132be565b613317575050565b6044925051604051916382fe647b60e01b835260048301526024820152fd5b60c0830151604051638a228b0d60e01b81526004810186905260248101929092526044820152606490fd5b5060c083015184136132ef565b81156132c857600160ff1b81146000198314166115a8570590565b92906133cc6133bb916133c46133a560a08701978851906132a5565b9160e087019263ffffffff95869185519061336e565b169751906132a5565b90519061336e565b60001981019081136001166115a85781610100911693015116808410908161347d575b5015613438578183116133fe57565b60405162461bcd60e51b8152602060048201526012602482015271496e76616c69642072616e67652062696e7360701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f52616e67652062696e73206f7574206f6620626f756e647300000000000000006044820152606490fd5b90508210386133ef565b60405163eb02c30160e01b8152600481019190915260a0816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561079b57600091613545575b50805160005260026020526134f5604060002061317b565b60208101511561353e5760806020830151910151809113159081613530575b501561352a57606001516001600160801b031690565b50600090565b905060408201511338613514565b5050600090565b61355e915060a03d60a011610e4357610e34818361315a565b386134dd565b600260005414613575576002600055565b604051633ee5aeb560e01b8152600490fd5b600052600260205260406000205460ff811615610820576001600160401b0390818160101c16421061080e5760501c1642116107fc57565b6000198101919082116115a857565b906103e89182039182116115a857565b919082039182116115a857565b919082018092116115a857565b80156132c8576000190490565b81156132c8570490565b60001981146115a85760010190565b91610120939161364061363b856000526002602052604060002090565b61317b565b9361364c858484613389565b96909501516040516330ed1f5d60e01b8152600481018290526701cdda4faccd0000602482015290959060208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af48015613ad9576136ab91600091613db1575b506135bf565b968786116136c25750506136bf95506149f8565b90565b9092506137169591935073__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__60206136f7866000526003602052604060002090565b604051809981926304afd7ff60e21b8352600483019190602083019252565b0381845af4938415613ad95761378097600095613d8b575b5061374760209495966000526003602052604060002090565b60405163694f552560e01b8152600481019190915263ffffffff9182166024820152921660448301529095869190829081906064820190565b03915af4938415613ad957600094613d6a575b508115613994576103e86137b8866137b36137ae82886135eb565b6135bf565b613605565b11613d49579093926000919082905b84151580613d3e575b15613d30576138119596878611600014613d295787915b6040516316cf339960e21b8152600481018490526024810186905297602090899081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613ad95761386098602091600091613d0c575b50604051809a819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613ad9576138bd98602091600091613cef575b50604051809a81926316cf339960e21b835260048301919060206040840193670de0b6b3a764000081520152565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613ad957600098613cce575b506138ef886135f8565b8111613b52575b80151580613b41575b613994576040516330ed1f5d60e01b815260048101829052602481019890985260208860448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613ad957600098613b18575b508761395a61395f92846135de565b6135eb565b908115613994578181116139a6575b5081156139945761398a916139849197966135de565b9361360f565b95949592936137c7565b604051635fba374760e11b8152600490fd5b6040516316cf339960e21b8152600481019190915260248101829052909260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4918215613ad957613a1792602091600091613afb575b506040518094819263360816cf60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4918215613ad957613a6f92602091600091613ade575b506040516330ed1f5d60e01b815260048101889052602481019190915292839081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613ad957613aa192600092613aa8575b506135eb565b913861396e565b613acb91925060203d602011613ad2575b613ac3818361315a565b810190613296565b9038613a9b565b503d613ab9565b61079b565b613af59150823d8411613ad257613ac3818361315a565b38613a46565b613b129150823d8411613ad257613ac3818361315a565b386139f7565b61395a985090613b3961395f9260203d602011613ad257613ac3818361315a565b98509061394b565b50613b4b816135f8565b88116138ff565b96509050613b6a613b62856135ce565b86858961489c565b90858211613cc6575b6040516316cf339960e21b8152600481018390526024810185905260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613ad957613be191602091600091613ca9575b506040518093819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613ad957613c3e91602091600091613c8c575b50604051809381926316cf339960e21b835260048301919060206040840193670de0b6b3a764000081520152565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613ad957600091613c6d575b50966138f6565b613c86915060203d602011613ad257613ac3818361315a565b38613c66565b613ca39150823d8411613ad257613ac3818361315a565b38613c10565b613cc09150823d8411613ad257613ac3818361315a565b38613bc1565b859150613b73565b613ce891985060203d602011613ad257613ac3818361315a565b96386138e5565b613d069150823d8411613ad257613ac3818361315a565b3861388f565b613d239150823d8411613ad257613ac3818361315a565b38613840565b85916137e7565b509450505090506139945790565b506103e884106137d0565b604051633b59e48960e11b81526001600160801b0384166004820152602490fd5b613d8491945060203d602011613ad257613ac3818361315a565b9238613793565b6020949550613da961374791863d8811613ad257613ac3818361315a565b95945061372e565b613dca915060203d602011613ad257613ac3818361315a565b386136a5565b9193929092826000526002602052613dee611a60604060002061317b565b90916040516330ed1f5d60e01b81528160048201526701cdda4faccd0000602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561079b5760009161427d575b50806000198101116115a8576000198101851161400b5750604051936316cf339960e21b85526004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561079b57600093613fd7575b506040519263ec6e92cd60e01b8452600484015260208360248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561079b57600093613fa3575b50662386f26fc1000083108015613f91575b611e495773__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90846000526003602052604060002091803b15610573576040516330f27d1f60e01b8152600481019390935263ffffffff938416602484015292166044820152606481018390529190600090839060849082905af490811561079b5760008051602061509c83398151915292602092613f82575b50604051908152a4565b613f8b90613115565b38613f78565b5068056bc75e2d631000008311613eeb565b9092506020813d602011613fcf575b81613fbf6020938361315a565b8101031261057357519138613ed9565b3d9150613fb2565b9092506020813d602011614003575b81613ff36020938361315a565b8101031261057357519138613e99565b3d9150613fe6565b9361402260009998949692979399198601826135eb565b806000198101116115a8576103e890614042906000198881019101613605565b1161425b57936000945b80151580614250575b1561424057600019820181111561423a5760001982015b604051906316cf339960e21b825280600483015289602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561079b57600092614206575b506040519163ec6e92cd60e01b8352600483015260208260248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561079b576000926141d2575b50662386f26fc10000821080156141c0575b611e495784600052600360205260406000209273__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b15610573576040516330f27d1f60e01b8152600481019490945263ffffffff8a811660248601528d1660448501526064840183905260008460848173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af493841561079b57878760008051602061509c83398151915260206141b4978d956141ba9a6121325750604051908152a46135de565b9561360f565b9461404c565b5068056bc75e2d631000008211614104565b9091506020813d6020116141fe575b816141ee6020938361315a565b81010312610573575190386140f2565b3d91506141e1565b9091506020813d602011614232575b816142226020938361315a565b81010312610573575190386140b2565b3d9150614215565b8061406c565b9798505050505050505061220857565b506103e88610614055565b604051633b59e48960e11b81526001600160801b039091166004820152602490fd5b90506020813d6020116142a7575b816142986020938361315a565b81010312610573575138613e3d565b3d915061428b565b90806142b9575050565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830191909152815260808101906001600160401b0382118183101761312857614328916040527f000000000000000000000000000000000000000000000000000000000000000061503f565b565b91610120939161434761363b856000526002602052604060002090565b93614353858484613389565b96909501516040516330ed1f5d60e01b8152600481018290526701cdda4faccd0000602482015290959060208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af48015613ad9576143b191600091613db157506135bf565b968786116143c55750506136bf9550614e08565b9092506143fa9591935073__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__60206136f7866000526003602052604060002090565b0381845af4938415613ad95761442a97600095613d8b575061374760209495966000526003602052604060002090565b03915af4938415613ad9576000946147fc575b508115613994576103e8614458866137b36137ae82886135eb565b11613d49579093926000919082905b841515806147f1575b15613d30576144b09596878611600014613d295787916040516316cf339960e21b8152600481018490526024810186905297602090899081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613ad9576144fe98602091600091613d0c5750604051809a819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613ad9576000986147d0575b50614530886135f8565b81116146f4575b801515806146e3575b613994576040516330ed1f5d60e01b815260048101829052602481019890985260208860448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613ad9576000986146ba575b508761395a61459b92846135de565b9281841115613994576040516316cf339960e21b815260048101859052602481019290925260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4918215613ad95761461292602091600091613afb57506040518094819263360816cf60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4918215613ad95761466992602091600091613ade57506040516330ed1f5d60e01b815260048101889052602481019190915292839081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613ad95761469a92600092613aa857506135eb565b918115613994576146b0916139849197966135de565b9594959293614467565b61395a9850906146db61459b9260203d602011613ad257613ac3818361315a565b98509061458c565b506146ed816135f8565b8811614540565b96509050614704613b62856135ce565b908582116147c8575b6040516316cf339960e21b8152600481018390526024810185905260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613ad95761477a91602091600091613ca957506040518093819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613ad9576000916147a9575b5096614537565b6147c2915060203d602011613ad257613ac3818361315a565b386147a2565b85915061470d565b6147ea91985060203d602011613ad257613ac3818361315a565b9638614526565b506103e88410614470565b61481691945060203d602011613ad257613ac3818361315a565b923861443d565b9080614827575050565b6040516323b872dd60e01b60208201526001600160a01b039092166024830152306044830152606480830191909152815260a08101906001600160401b0382118183101761312857614328916040527f000000000000000000000000000000000000000000000000000000000000000061503f565b9091939280156149f3576148b081866135eb565b6000198101919082116115a8576148c691613605565b9182156149ea575b6040516330ed1f5d60e01b808252600482018390526701cdda4faccd000060248301529260209173__$cbaf8988f3c8d5491808e1d52afb16035a$__908381604481855af4801561079b5784916000916149bb575b509560446040518094819382528860048301526802b5e3af16b188000060248301525af492831561079b5760009361498b575b505011614980575b50808210156149785750915b8083116149745750565b9150565b90509161496a565b600a9150043861495e565b9080929350813d83116149b4575b6149a3818361315a565b810103126105735751903880614956565b503d614999565b82819392503d83116149e3575b6149d2818361315a565b810103126105735783905138614923565b503d6149c8565b600192506148ce565b505050565b9293909173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__614a25856000526003602052604060002090565b906040958651956304afd7ff60e21b8752602098898880614a4f6004988983019190602083019252565b0381875af4978815613ad957600098614de9575b5073__$cbaf8988f3c8d5491808e1d52afb16035a$__958951926316cf339960e21b948585528c8580614aa68d888d840160209093929193604081019481520152565b03818c5af4948515613ad957614ade958e91600091614dcc575b508d518097819263ec6e92cd60e01b83528c83019190602083019252565b03818c5af4948515613ad957614b1d958e91600091614daf575b508d51809781928a83528c8301919060206040840193670de0b6b3a764000081520152565b03818c5af4948515613ad957600095614d90575b508c8c614b4e611a6061363b856000526002602052604060002090565b9990918b614b9f614b69876000526003602052604060002090565b925163694f552560e01b815291820192835263ffffffff948516602084015293909b1660408201528a9283918291606090910190565b03915af4968715613ad957600097614d71575b50614bbc856135f8565b8711614d5b5750505050614bfd9089614bd5858a6135de565b918a51809481926330ed1f5d60e01b988984528a840160209093929193604081019481520152565b0381895af4908115613ad957614c1a92600092614d4357506135eb565b958615614d33578015614d335786811115614d255787519182528382019081526020810196909652948790869081906040015b0381865af4948515613ad957614c85958891600091614d08575b5087518097819263360816cf60e01b83528683019190602083019252565b0381865af4958615613ad9578795600097614ce5575b505190815290810192835260208301949094528391829081906040015b03915af4918215613ad957600092614ccf57505090565b6136bf9250803d10613ad257613ac3818361315a565b614cb8919750614d0190873d8911613ad257613ac3818361315a565b9690614c9b565b614d1f9150823d8411613ad257613ac3818361315a565b38614c67565b505050505050505050600090565b8751635fba374760e11b81528490fd5b613acb9192508b3d8d11613ad257613ac3818361315a565b9750975097509750505050506136bf945061361e565b614d899197508d803d10613ad257613ac3818361315a565b9538614bb2565b614da89195508d803d10613ad257613ac3818361315a565b9338614b31565b614dc69150823d8411613ad257613ac3818361315a565b38614af8565b614de39150823d8411613ad257613ac3818361315a565b38614ac0565b614e019198508a3d8c11613ad257613ac3818361315a565b9638614a63565b9293909173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__614e35856000526003602052604060002090565b906040958651956304afd7ff60e21b8752602098898880614e5f6004988983019190602083019252565b0381875af4978815613ad957600098615020575b5073__$cbaf8988f3c8d5491808e1d52afb16035a$__958951926316cf339960e21b948585528c8580614eb68d888d840160209093929193604081019481520152565b03818c5af4948515613ad957614eed958e91600091614dcc57508d518097819263ec6e92cd60e01b83528c83019190602083019252565b03818c5af4948515613ad957600095615001575b508c8c614f1e611a6061363b856000526002602052604060002090565b9990918b614f39614b69876000526003602052604060002090565b03915af4968715613ad957600097614fe2575b508a15614fd257614f5c856135f8565b8711614fbc5750505050614f759089614bd5858a6135de565b0381895af4908115613ad957614f9292600092614d4357506135eb565b86811115614d25578751918252838201908152602081019690965294879086908190604001614c4d565b9750975097509750505050506136bf945061432a565b8b51635fba374760e11b81528890fd5b614ffa9197508d803d10613ad257613ac3818361315a565b9538614f4c565b6150199195508d803d10613ad257613ac3818361315a565b9338614f01565b6150389198508a3d8c11613ad257613ac3818361315a565b9638614e73565b906000602091828151910182855af11561079b576000513d61509257506001600160a01b0381163b155b6150705750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b6001141561506956fe221f633c06e4399f005a7cec7ba7c4ff189e3fe19092cbafe32a5f176ffc797fa2646970667358221220b8c5d368e431ee24e29990c7399eac5ea22c815adfb784b7a1cce76765928e9464736f6c63430008180033",
-  "deployedBytecode": "0x60a080604052600436101561001357600080fd5b60009060e0908235821c908163070ab8c914612ea65750806309f28be61461098e57806313b6eb0914612e7f5780632710ac80146110535780632d6ce61d1461265b5780632ed66650146126395780633013ce29146109d35780633d65117b146125785780633f4ba83a14612505578063449a03881461245157806344a1a58e146122f95780635c975abb14610f8a5780636084fa03146118f1578063692c3fc71461189a5780636da66355146117805780636ec469b1146116515780637404d9571461163357806379334798146113af5780637ed54782146112ee5780638a69614e146111145780639fc46ecb14611058578063a3a6b8ce14611053578063b1283e7714610fad578063b187bd2614610f8a578063b762d83414610b7d578063bcb1732214610b59578063c9ac6b3114610a18578063d41c3a65146109d3578063e9eb3ba51461098e578063eb44fdd314610865578063f0b7f3b11461057c5763f980b80c1461018357600080fd5b34610578578060031936011261057857600435906001600160401b039060843582811690602480359160643590604435908590036105735760a4359687168097036105735760c435937f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361055c5760ff6001541661054a5761022689600052600260205263ffffffff60056040600020015416151590565b610532578181121561050957898313156105095761024d8361024883856132a5565b6132be565b61050957878610156104f75766038d7ea4c68000851080156104e5575b6104d3576102818361027c83856132a5565b61336e565b938a8513806104c6575b1561048c5763ffffffff8095169485158015610480575b61045f57908a87878e9488888f8f8f908b928b926040519a6102c38c61313e565b60018c5260208c019385855260408d0192835260608d0193845260808d0195865260a08d0196875260c08d019788528c019788526101008c01998a526101208c019a8b528d52600260205260408d209a511515928b549051151560081b61ff0016915160101b69ffffffffffffffff000016926001600160401b0360501b905160501b169360ff169071ffffffffffffffffffffffffffffffffffff19161717171788555160018801555160028701555160038601555160048501556005840191511663ffffffff1982541617905551906006015573__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__9060036020526040832090823b1561045b57604484928994604051958694859363d886284b60e01b855260048501528301525af4801561045057610438575b50507f2453c1a297c658a5b6905526d84f0b4ac79c0d9cc5fb5601664602efee53121497604051968752602087015260408601526060850152608084015260a083015260c0820152a280f35b61044190613115565b61044c5789386103ec565b8980fd5b6040513d84823e3d90fd5b8380fd5b60405163515eb6ff60e11b815260048101879052620f424081840152604490fd5b50620f424086116102a2565b60649060136040519162461bcd60e51b83526020600484015282015272125b9d985b1a59081c985b99d94818dbdd5b9d606a1b6044820152fd5b50620f424085131561028b565b604051630b281d1960e31b8152600490fd5b50683635c9adc5dea00000851161026a565b60405163536a71af60e01b8152600490fd5b60405163040b1c7360e21b81526004810191909152602481019190915260448101829052606490fd5b6040516311453d1960e31b8152600481018a90528490fd5b60405163ab35696f60e01b8152600490fd5b60405163d86ad9cf60e01b81523360048201528490fd5b600080fd5b5080fd5b82346108625760a03660031901126108625760446024600435813583356105a16130a5565b906084359160ff6001541661054a576001600160801b03906105c1613564565b1690811561084a576000858152600260209081526040909120600581015491989163ffffffff161561083257805460ff811615610820576001600160401b0390818160101c16421061080e5760501c1642116107fc576106296106238261317b565b876132de565b61063b6106358261317b565b846132de565b8286136107df578286146107df5761066290600461065988866132a5565b910154906132be565b6107c35764e8d4a510008084029064e8d4a50fff61068283868a8c61432a565b0104948086116107a75750906106b7869261069d873361481d565b8860005260028b526006604060002001549085858b613dd0565b6040516330906fad60e21b81523360048201529788018790528701526064860181905260848601829052868660a48160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af195861561079b5760009661076c575b506040519384528684015260408301526060820152827fc33c3b4ea19b40f02901978a93e787a0caa1d6fd23dfa228ae891fe96867e17160803393a46001600055604051908152f35b9095508681813d8311610794575b610784818361315a565b8101031261057357519487610723565b503d61077a565b6040513d6000823e3d90fd5b859150886040519263f6daf99360e01b84526004840152820152fd5b604051631150381b60e11b815260048101869052808801839052fd5b50604051631150381b60e11b815260048101869052808801839052fd5b60405163b2094b5960e01b8152600490fd5b604051630ee8c41760e31b8152600490fd5b604051635a90bb8d60e11b8152600490fd5b604051634cba20ef60e01b8152600481018890528890fd5b604051633b59e48960e11b8152600481018390528690fd5b80fd5b503461057857602036600319011261057857604051600435926108878261313e565b8082528060208301528060408301528060608301528060808301528060a08301528060c0830152808383015261010090808284015280610120809401526108e485600052600260205263ffffffff60056040600020015416151590565b1561097557906109026040836101409786955260026020522061317b565b906040519482511515865260208301511515602087015260408301516001600160401b03809116604088015260608401511660608701526080830151608087015260a083015160a087015260c083015160c0870152808301519086015263ffffffff818301511690850152015190820152f35b604051634cba20ef60e01b815260048101869052602490fd5b82346108625780600319360112610862576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b82346108625780600319360112610862576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5090346108625760803660031901126108625750600435906024803560443591610a406130a5565b610a6086600052600260205263ffffffff60056040600020015416151590565b15610b42576001600160801b0316938415610b2b57856000526002602052610a8b604060002061317b565b90610a9682856132de565b610aa082866132de565b848413610b0e57848414610b0e5790610ac691610abd85876132a5565b910151906132be565b610af2575060209364e8d4a50fff92610ae89264e8d4a510008096029261432a565b0104604051908152f35b9160449260405192631150381b60e11b84526004840152820152fd5b604484868560405192631150381b60e11b84526004840152820152fd5b50604051633b59e48960e11b815260048101859052fd5b50604051634cba20ef60e01b815260048101869052fd5b82346108625780600319360112610862576020604051683635c9adc5dea000008152f35b823461086257610b8c366130ff565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610f7257610bdc82600052600260205263ffffffff60056040600020015416151590565b15610f5957818352600260205260408320805460ff8160081c16610f405760028201548084128015610f33575b610f0857506101009083600184015561ffff1916179055817fca3a568dfb73dd7b7b3c0b28f130edbf4b688f534869c3de083664c43c11430e6020604051848152a260405163348dbbed60e21b8152600481019290925282826024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa918215610efd578392610e4e575b50825b8251811015610e4a57600581901b83016020015160405163eb02c30160e01b81526004810182905290919060a09081816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa918215610e12578792610e1d575b50506040516331a9108f60e11b815260048101849052926020846024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015610e12576001948891610de3575b5085602084015113159283610dd5575b7f1a81eb5d53aa7bec98cadd0a6303be87e540f77ba90e63cd945e49b8eb697b0a916040918515610dcd57606001516001600160801b0316945b825195865215156020860152868060a01b031693a301610ca2565b508994610db2565b604081015187129350610d78565b610e05915060203d602011610e0b575b610dfd818361315a565b810190613277565b88610d68565b503d610df3565b6040513d89823e3d90fd5b610e3c9250803d10610e43575b610e34818361315a565b810190613204565b8680610d0f565b503d610e2a565b8380f35b9091503d8084833e610e60818361315a565b810160208282031261045b5781516001600160401b0392838211610ee1570181601f82011215610ef9578051928311610ee5578260051b9060405193610ea9602084018661315a565b8452602080850192820101928311610ee157602001905b828210610ed1575050509083610c9f565b8151815260209182019101610ec0565b8580fd5b634e487b7160e01b85526041600452602485fd5b8480fd5b6040513d85823e3d90fd5b6003830154604051638a228b0d60e01b81526004810186905260248101929092526044820152606490fd5b5060038301548413610c09565b604051634e0558fb60e01b815260048101859052602490fd5b604051634cba20ef60e01b815260048101839052602490fd5b60405163d86ad9cf60e01b8152336004820152602490fd5b8234610862578060031936011261086257602060ff600154166040519015158152f35b5034610578576020366003190112610578576040610140926004358152600260205220908154916001600160401b03916001820154906002830154600384015490600485015493600663ffffffff600588015416960154966040519860ff811615158a5260ff8160081c16151560208b0152818160101c1660408b015260501c166060890152608088015260a087015260c0860152840152610100830152610120820152f35b61304a565b82346108625760203660031901126108625760405163eb02c30160e01b8152600480359082015260a0816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561079b57602092916110f5575b5064e8d4a50fff610ae864e8d4a5100092836001600160801b0360608301511602908051906040878201519101519161361e565b61110e915060a03d60a011610e4357610e34818361315a565b826110c1565b82346108625760209081600319360112610862576004359060ff6001541661054a5761113e613564565b60405163eb02c30160e01b8152600481018390526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693919060a082602481885afa9182156112e35784926112c2575b506040516331a9108f60e11b815260048101849052908682602481895afa9182156112b7578592611298575b5033911603610f72578051835260028552846111e16040852061317b565b01511561127f57506111f281613487565b926111fd84336142af565b803b1561127b57828091602460405180948193630e3298ef60e21b83528760048401525af18015610efd57611267575b5090600191604051908482527ff18ca9717b47ea7629d17b5d7b2ede46e864155725629e7d0347924c2f6d112d863393a355604051908152f35b6112718391613115565b610578578461122d565b8280fd5b602490516040519063b23e5f9f60e01b82526004820152fd5b6112b0919250873d8911610e0b57610dfd818361315a565b90876111c3565b6040513d87823e3d90fd5b6112dc91925060a03d60a011610e4357610e34818361315a565b9086611197565b6040513d86823e3d90fd5b82346108625760403660031901126108625761130861308f565b60405163eb02c30160e01b8152600480359082015260a0816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa92831561079b5760209364e8d4a50fff92610ae89291611390575b5064e8d4a51000938151906040866001600160801b03898601519316029301519161432a565b6113a9915060a03d60a011610e4357610e34818361315a565b8561136a565b8234610862576113be366130d5565b9060ff6001541661054a576113d1613564565b6001600160801b039081811693841561161a5760405163eb02c30160e01b8152600481018290526001600160a01b03957f000000000000000000000000000000000000000000000000000000000000000087169160a081602481865afa90811561079b576000916115fb575b506040516331a9108f60e11b8152600481018590526020988982602481885afa91821561079b576000926115dc575b5033911603610f725761147f8151613587565b805188820190815190604084019064e8d4a50fff6114ab83519264e8d4a5100093848a0296879261432a565b010499808b116115be57506060928994928c6114e8936114cb8e3361481d565b600286519451915192856000525260066040600020015493613dd0565b01511601948486116115a857813b1561057357604051630168610b60e51b8152600481018490526001600160801b0387166024820152916000908390604490829084905af190811561079b577fa9efae0c21a2db158c2af2d36b5c18dc14d792a79dfab662442466a80095ea5f9261158892611599575b50604080516001600160801b039687168152958816602087015285015233939081906060820190565b0390a3600160005560405191168152f35b6115a290613115565b8861155f565b634e487b7160e01b600052601160045260246000fd5b8a6044916040519163f6daf99360e01b835260048301526024820152fd5b6115f49192508a3d8c11610e0b57610dfd818361315a565b908a61146c565b611614915060a03d60a011610e4357610e34818361315a565b8861143d565b604051633b59e48960e11b815260048101869052602490fd5b82346108625780600319360112610862576020604051620f42408152f35b50903461086257611661366130ff565b9261168282600052600260205263ffffffff60056040600020015416151590565b15610f59578183526020936002855261169d6040852061317b565b916116a883836132de565b8201519081810191821285821290801582169115161761176c57916116ce918693613389565b928452600382526040808520905163694f552560e01b8152600481019190915263ffffffff9182166024820152921660448301528160648173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af49182156117605791611733575b50604051908152f35b90508181813d8311611759575b61174a818361315a565b8101031261057357513861172a565b503d611740565b604051903d90823e3d90fd5b634e487b7160e01b85526011600452602485fd5b82346108625760208060031936011261057857600435906001600160401b0380831161045b573660238401121561045b57826004013590811161045b57366024828501011161045b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610f72578382601f1992806024604051976118178588601f860116018a61315a565b828952018388013785010152600160ff1981541617600155604051918083528351938482850152855b85811061188657505050906040817f375c0abd968f4602b557f6ac9a48ffc89820233aa9becc5d7ff1176fd09eafff9386838784010152601f339601168101030190a280f35b818101830151858201604001528201611840565b82346108625760203660031901126108625760406080916004358152600360205220600181015490600263ffffffff91015490604051928181168452818160201c16602085015260401c1660408301526060820152f35b823461086257611900366130d5565b60ff6001541661054a57611912613564565b6001600160801b0382161561229a5760405163eb02c30160e01b8152600481018490526001600160a01b03929060a0816024817f000000000000000000000000000000000000000000000000000000000000000088165afa90811561079b576000916122da575b506040516331a9108f60e11b8152600481018690526020816024817f000000000000000000000000000000000000000000000000000000000000000089165afa90811561079b576000916122bb575b508433911603610f72576119dc8151613587565b6001600160801b036060820151166001600160801b0383161161229a57805160208201805190604084019164e8d4a50fff611a2e84519564e8d4a51000968794856001600160801b038c16029261361e565b01049580871061227c575083519051915192816000526002602052604060002090611a67611a6060068401549361317b565b8686613389565b608052916040516330ed1f5d60e01b81528160048201526701cdda4faccd0000602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561079b5760009161224a575b50806000198101116115a85760001981016001600160801b038a16840211611f035750604051906316cf339960e21b928383526001600160801b038a16026004830152602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561079b57600091611ed1575b506040519063ec6e92cd60e01b8252600482015260208160248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561079b57600091611e9f575b50604051918252670de0b6b3a76400006004830152602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561079b57600091611e6d575b50662386f26fc1000081108015611e5b575b611e495773__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__91836000526003602052604060002090833b15610573576040516330f27d1f60e01b8152608051600482019390935263ffffffff9182166024820152911660448201526064810182905291600090839060849082905af490811561079b5760008051602061509c83398151915292602092611e3a575b50604051908152a45b611c6683336142af565b6001600160801b0360608184169201511603936001600160801b0385116115a8576001600160801b0385169384611d7657807f0000000000000000000000000000000000000000000000000000000000000000163b156105735760008091602460405180948193630e3298ef60e21b83528760048401527f0000000000000000000000000000000000000000000000000000000000000000165af1801561079b576040967fe3a918fd34698242cc99d5ba0987edaa47d8f5b8ed601ef29e08a9b7d72ecc49928692611d67575b505b87516001600160801b0395861681529416602085015260408401523392606090a3600160005582519182526020820152f35b611d7090613115565b88611d33565b807f0000000000000000000000000000000000000000000000000000000000000000163b1561057357604051630168610b60e51b8152600481018390526001600160801b0387166024820152906000908290604490829084907f0000000000000000000000000000000000000000000000000000000000000000165af1801561079b576040967fe3a918fd34698242cc99d5ba0987edaa47d8f5b8ed601ef29e08a9b7d72ecc49928692611e2b575b50611d35565b611e3490613115565b88611e25565b611e4390613115565b8b611c53565b60405163a2f9e7b560e01b8152600490fd5b5068056bc75e2d631000008111611bc4565b906020823d602011611e97575b81611e876020938361315a565b810103126108625750518a611bb2565b3d9150611e7a565b90506020813d602011611ec9575b81611eba6020938361315a565b8101031261057357518b611b6c565b3d9150611ead565b90506020813d602011611efb575b81611eec6020938361315a565b8101031261057357518b611b2c565b3d9150611edf565b9397969991611f2660009c949a929c198601826001600160801b038b16026135eb565b60001981019081116115a857611f446103e891600019880190613605565b11612225576001600160801b03881602966000975b8015158061221a575b156121f5578c9060001987018111156121ef5760001987015b604051926316cf339960e21b8452816004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561079b576000936121bb575b506040519263ec6e92cd60e01b8452600484015260208360248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561079b57600093612187575b50604051926316cf339960e21b8452670de0b6b3a76400006004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561079b57600093612153575b50662386f26fc1000083108015612141575b611e49578b600052600360205260406000209173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b1561057357600084938f6120d660405196879384936330f27d1f60e01b8552608051916004860190949392916060926080830196835263ffffffff80921660208401521660408201520152565b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af492831561079b578a8e60008051602061509c83398151915260208f949861212c9961212699612132575b50604051908152a46135de565b9861360f565b97611f59565b61213b90613115565b38612119565b5068056bc75e2d631000008311612060565b90926020823d60201161217f575b8161216e6020938361315a565b81010312610862575051918f61204e565b3d9150612161565b90926020823d6020116121b3575b816121a26020938361315a565b81010312610862575051918f612000565b3d9150612195565b90926020823d6020116121e7575b816121d66020938361315a565b81010312610862575051918f611fc0565b3d91506121c9565b80611f7b565b9650975097509794509750505015611c5c575b6040516332581cb160e01b8152600490fd5b506103e88910611f62565b876001600160801b036024928160405193633b59e48960e11b85521602166004820152fd5b90506020813d602011612274575b816122656020938361315a565b8101031261057357518c611ab8565b3d9150612258565b604490876040519163f6daf99360e01b835260048301526024820152fd5b604051633b59e48960e11b81526001600160801b0383166004820152602490fd5b6122d4915060203d602011610e0b57610dfd818361315a565b866119c8565b6122f3915060a03d60a011610e4357610e34818361315a565b85611979565b823461086257612308366130bb565b9291907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610f725761235b82600052600260205263ffffffff60056040600020015416151590565b15610f5957818352602093600285526123766040852061317b565b9161238183826132de565b61238b83836132de565b818113612434579161239e918693613389565b928452600382526040808520905163049bebd960e31b8152600481019190915263ffffffff9182166024820152921660448301528180606481015b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af491821561176057916124075750604051908152f35b90508181813d831161242d575b61241e818361315a565b8101031261057357518261172a565b503d612414565b60449160405191631150381b60e11b835260048301526024820152fd5b823461086257612460366130bb565b92919061248382600052600260205263ffffffff60056040600020015416151590565b15610f59578183526020936002855261249e6040852061317b565b916124a983826132de565b6124b383836132de565b81811361243457916124c6918693613389565b928452600382526040808520905163694f552560e01b8152600481019190915263ffffffff9182166024820152921660448301528180606481016123d9565b82346108625780600319360112610862577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610f725760ff1960015416600155337ff5cbf596165cc457b2cd92e8d8450827ee314968160a5696402d75766fc52caf8280a280f35b82346108625760403660031901126108625761259261308f565b60405163eb02c30160e01b8152600480359082015260a0816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa92831561079b5760209364e8d4a50fff92610ae8929161261a575b5064e8d4a51000938151906040866001600160801b03898601519316029301519161361e565b612633915060a03d60a011610e4357610e34818361315a565b856125f4565b8234610862578060031936011261086257602060405166038d7ea4c680008152f35b82346108625760403660031901126108625760243560ff6001541661054a57612682613564565b60405163eb02c30160e01b815260048035908201526001600160a01b03919060a0816024817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561079b57600091612e60575b506040516331a9108f60e11b815260048035908201526020816024817f000000000000000000000000000000000000000000000000000000000000000088165afa90811561079b57600091612e41575b508333911603610f725761273f8151613587565b64e8d4a51000906001600160801b0391808360608401511602825192602081019264e8d4a50fff61277a84865197604086019889519161361e565b01049580871061227c575051915192519382600052600260205260406000206127b16127aa60068301549261317b565b8787613389565b9190926040516330ed1f5d60e01b81528260048201526701cdda4faccd0000602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561079b57600091612e0f575b506000199181838101116115a8578183018711612b1957505050604051906316cf339960e21b948583526004830152602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561079b57600091612ae7575b506040519063ec6e92cd60e01b8252600482015260208160248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561079b57600091612ab5575b50604051938452670de0b6b3a76400006004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561079b57600093612a81575b50662386f26fc1000083108015612a6f575b611e495773__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90846000526003602052604060002091803b15610573576040516330f27d1f60e01b8152600481019390935263ffffffff938416602484015292166044820152606481018390529190600090839060849082905af490811561079b5760008051602061509c83398151915292602092612a60575b50604051908152a45b61299981336142af565b817f0000000000000000000000000000000000000000000000000000000000000000163b156105735760008092602460405180958193630e3298ef60e21b835260043560048401527f0000000000000000000000000000000000000000000000000000000000000000165af191821561079b57602092612a51575b5060405181815233907f467bc11eddf702a2091fefc23d3064f17939ba1005bd43304f15604c9b6f2a9b8460043592a36001600055604051908152f35b612a5a90613115565b82612a14565b612a6990613115565b88612986565b5068056bc75e2d6310000083116128f9565b90926020823d602011612aad575b81612a9c6020938361315a565b8101031261086257505191886128e7565b3d9150612a8f565b90506020813d602011612adf575b81612ad06020938361315a565b810103126105735751896128a1565b3d9150612ac3565b90506020813d602011612b11575b81612b026020938361315a565b81010312610573575189612861565b3d9150612af5565b612b31838394959b98939d99969d9a979a01836135eb565b8481019081116115a857612b4b6103e89186860190613605565b11612df55750956000965b80151580612dea575b15612dc857828401811115612dc2578383015b604051906316cf339960e21b82528060048301528b602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561079b57600092612d8e575b506040519163ec6e92cd60e01b8352600483015260208260248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561079b57600092612d5a575b50604051916316cf339960e21b8352670de0b6b3a76400006004840152602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561079b57600092612d26575b50662386f26fc1000082108015612d14575b611e495786600052600360205260406000209273__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b15610573576040516330f27d1f60e01b8152600481019490945263ffffffff8c811660248601528f1660448501526064840183905260008460848173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af493841561079b57898960008051602061509c8339815191526020612d08978f95612d0e9a6121325750604051908152a46135de565b9761360f565b96612b56565b5068056bc75e2d631000008211612c58565b90916020823d602011612d52575b81612d416020938361315a565b81010312610862575051908e612c46565b3d9150612d34565b90916020823d602011612d86575b81612d756020938361315a565b81010312610862575051908e612bf8565b3d9150612d68565b90916020823d602011612dba575b81612da96020938361315a565b81010312610862575051908e612bb8565b3d9150612d9c565b80612b72565b98509950505050505050501561298f576040516332581cb160e01b8152600490fd5b506103e88810612b5f565b604051633b59e48960e11b81529116600482015260249150fd5b90506020813d602011612e39575b81612e2a6020938361315a565b8101031261057357518b612801565b3d9150612e1d565b612e5a915060203d602011610e0b57610dfd818361315a565b8461272b565b612e79915060a03d60a011610e4357610e34818361315a565b836126db565b8234610862576020366003190112610862576020612e9e600435613487565b604051908152f35b83903461057857608036600319011261057857604435906024359060043590606435907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036130355750612f1a82600052600260205263ffffffff60056040600020015416151590565b15610f59578185526002602052612f336040862061317b565b612f3d81856132de565b612f4781866132de565b84841361301757612f5a86918686613389565b848352600360205260408320929173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90813b1561045b576040516330f27d1f60e01b8152600481019590955263ffffffff908116602486015291909116604484015260648301849052829060849082905af4801561300c57612fe8575b50602060008051602061509c83398151915291604051908152a480f35b60008051602061509c8339815191529195613004602092613115565b959150612fcb565b6040513d88823e3d90fd5b6044848660405191631150381b60e11b835260048301526024820152fd5b63d86ad9cf60e01b8152336004820152602490fd5b34610573576000366003190112610573576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b602435906001600160801b038216820361057357565b606435906001600160801b038216820361057357565b606090600319011261057357600435906024359060443590565b606090600319011261057357600435906024356001600160801b0381168103610573579060443590565b6040906003190112610573576004359060243590565b6001600160401b03811161312857604052565b634e487b7160e01b600052604160045260246000fd5b61014081019081106001600160401b0382111761312857604052565b90601f801991011681019081106001600160401b0382111761312857604052565b906040516131888161313e565b61012060068294805460ff81161515855260ff8160081c16151560208601526001600160401b0390818160101c16604087015260501c16606085015260018101546080850152600281015460a0850152600381015460c0850152600481015460e085015263ffffffff6005820154166101008501520154910152565b908160a091031261057357604051906001600160401b039060a0830182811184821017613128576040528051835260208101516020840152604081015160408401526060810151906001600160801b03821682036105735760809160608501520151908116810361057357608082015290565b9081602091031261057357516001600160a01b03811681036105735790565b90816020910312610573575190565b818103929160001380158285131691841216176115a857565b81156132c8570790565b634e487b7160e01b600052601260045260246000fd5b9060a0810180518084128015613361575b613336575060e061330461330f9251856132a5565b9201918251906132be565b613317575050565b6044925051604051916382fe647b60e01b835260048301526024820152fd5b60c0830151604051638a228b0d60e01b81526004810186905260248101929092526044820152606490fd5b5060c083015184136132ef565b81156132c857600160ff1b81146000198314166115a8570590565b92906133cc6133bb916133c46133a560a08701978851906132a5565b9160e087019263ffffffff95869185519061336e565b169751906132a5565b90519061336e565b60001981019081136001166115a85781610100911693015116808410908161347d575b5015613438578183116133fe57565b60405162461bcd60e51b8152602060048201526012602482015271496e76616c69642072616e67652062696e7360701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f52616e67652062696e73206f7574206f6620626f756e647300000000000000006044820152606490fd5b90508210386133ef565b60405163eb02c30160e01b8152600481019190915260a0816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561079b57600091613545575b50805160005260026020526134f5604060002061317b565b60208101511561353e5760806020830151910151809113159081613530575b501561352a57606001516001600160801b031690565b50600090565b905060408201511338613514565b5050600090565b61355e915060a03d60a011610e4357610e34818361315a565b386134dd565b600260005414613575576002600055565b604051633ee5aeb560e01b8152600490fd5b600052600260205260406000205460ff811615610820576001600160401b0390818160101c16421061080e5760501c1642116107fc57565b6000198101919082116115a857565b906103e89182039182116115a857565b919082039182116115a857565b919082018092116115a857565b80156132c8576000190490565b81156132c8570490565b60001981146115a85760010190565b91610120939161364061363b856000526002602052604060002090565b61317b565b9361364c858484613389565b96909501516040516330ed1f5d60e01b8152600481018290526701cdda4faccd0000602482015290959060208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af48015613ad9576136ab91600091613db1575b506135bf565b968786116136c25750506136bf95506149f8565b90565b9092506137169591935073__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__60206136f7866000526003602052604060002090565b604051809981926304afd7ff60e21b8352600483019190602083019252565b0381845af4938415613ad95761378097600095613d8b575b5061374760209495966000526003602052604060002090565b60405163694f552560e01b8152600481019190915263ffffffff9182166024820152921660448301529095869190829081906064820190565b03915af4938415613ad957600094613d6a575b508115613994576103e86137b8866137b36137ae82886135eb565b6135bf565b613605565b11613d49579093926000919082905b84151580613d3e575b15613d30576138119596878611600014613d295787915b6040516316cf339960e21b8152600481018490526024810186905297602090899081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613ad95761386098602091600091613d0c575b50604051809a819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613ad9576138bd98602091600091613cef575b50604051809a81926316cf339960e21b835260048301919060206040840193670de0b6b3a764000081520152565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613ad957600098613cce575b506138ef886135f8565b8111613b52575b80151580613b41575b613994576040516330ed1f5d60e01b815260048101829052602481019890985260208860448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613ad957600098613b18575b508761395a61395f92846135de565b6135eb565b908115613994578181116139a6575b5081156139945761398a916139849197966135de565b9361360f565b95949592936137c7565b604051635fba374760e11b8152600490fd5b6040516316cf339960e21b8152600481019190915260248101829052909260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4918215613ad957613a1792602091600091613afb575b506040518094819263360816cf60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4918215613ad957613a6f92602091600091613ade575b506040516330ed1f5d60e01b815260048101889052602481019190915292839081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613ad957613aa192600092613aa8575b506135eb565b913861396e565b613acb91925060203d602011613ad2575b613ac3818361315a565b810190613296565b9038613a9b565b503d613ab9565b61079b565b613af59150823d8411613ad257613ac3818361315a565b38613a46565b613b129150823d8411613ad257613ac3818361315a565b386139f7565b61395a985090613b3961395f9260203d602011613ad257613ac3818361315a565b98509061394b565b50613b4b816135f8565b88116138ff565b96509050613b6a613b62856135ce565b86858961489c565b90858211613cc6575b6040516316cf339960e21b8152600481018390526024810185905260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613ad957613be191602091600091613ca9575b506040518093819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613ad957613c3e91602091600091613c8c575b50604051809381926316cf339960e21b835260048301919060206040840193670de0b6b3a764000081520152565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613ad957600091613c6d575b50966138f6565b613c86915060203d602011613ad257613ac3818361315a565b38613c66565b613ca39150823d8411613ad257613ac3818361315a565b38613c10565b613cc09150823d8411613ad257613ac3818361315a565b38613bc1565b859150613b73565b613ce891985060203d602011613ad257613ac3818361315a565b96386138e5565b613d069150823d8411613ad257613ac3818361315a565b3861388f565b613d239150823d8411613ad257613ac3818361315a565b38613840565b85916137e7565b509450505090506139945790565b506103e884106137d0565b604051633b59e48960e11b81526001600160801b0384166004820152602490fd5b613d8491945060203d602011613ad257613ac3818361315a565b9238613793565b6020949550613da961374791863d8811613ad257613ac3818361315a565b95945061372e565b613dca915060203d602011613ad257613ac3818361315a565b386136a5565b9193929092826000526002602052613dee611a60604060002061317b565b90916040516330ed1f5d60e01b81528160048201526701cdda4faccd0000602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561079b5760009161427d575b50806000198101116115a8576000198101851161400b5750604051936316cf339960e21b85526004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561079b57600093613fd7575b506040519263ec6e92cd60e01b8452600484015260208360248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561079b57600093613fa3575b50662386f26fc1000083108015613f91575b611e495773__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90846000526003602052604060002091803b15610573576040516330f27d1f60e01b8152600481019390935263ffffffff938416602484015292166044820152606481018390529190600090839060849082905af490811561079b5760008051602061509c83398151915292602092613f82575b50604051908152a4565b613f8b90613115565b38613f78565b5068056bc75e2d631000008311613eeb565b9092506020813d602011613fcf575b81613fbf6020938361315a565b8101031261057357519138613ed9565b3d9150613fb2565b9092506020813d602011614003575b81613ff36020938361315a565b8101031261057357519138613e99565b3d9150613fe6565b9361402260009998949692979399198601826135eb565b806000198101116115a8576103e890614042906000198881019101613605565b1161425b57936000945b80151580614250575b1561424057600019820181111561423a5760001982015b604051906316cf339960e21b825280600483015289602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561079b57600092614206575b506040519163ec6e92cd60e01b8352600483015260208260248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561079b576000926141d2575b50662386f26fc10000821080156141c0575b611e495784600052600360205260406000209273__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b15610573576040516330f27d1f60e01b8152600481019490945263ffffffff8a811660248601528d1660448501526064840183905260008460848173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af493841561079b57878760008051602061509c83398151915260206141b4978d956141ba9a6121325750604051908152a46135de565b9561360f565b9461404c565b5068056bc75e2d631000008211614104565b9091506020813d6020116141fe575b816141ee6020938361315a565b81010312610573575190386140f2565b3d91506141e1565b9091506020813d602011614232575b816142226020938361315a565b81010312610573575190386140b2565b3d9150614215565b8061406c565b9798505050505050505061220857565b506103e88610614055565b604051633b59e48960e11b81526001600160801b039091166004820152602490fd5b90506020813d6020116142a7575b816142986020938361315a565b81010312610573575138613e3d565b3d915061428b565b90806142b9575050565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830191909152815260808101906001600160401b0382118183101761312857614328916040527f000000000000000000000000000000000000000000000000000000000000000061503f565b565b91610120939161434761363b856000526002602052604060002090565b93614353858484613389565b96909501516040516330ed1f5d60e01b8152600481018290526701cdda4faccd0000602482015290959060208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af48015613ad9576143b191600091613db157506135bf565b968786116143c55750506136bf9550614e08565b9092506143fa9591935073__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__60206136f7866000526003602052604060002090565b0381845af4938415613ad95761442a97600095613d8b575061374760209495966000526003602052604060002090565b03915af4938415613ad9576000946147fc575b508115613994576103e8614458866137b36137ae82886135eb565b11613d49579093926000919082905b841515806147f1575b15613d30576144b09596878611600014613d295787916040516316cf339960e21b8152600481018490526024810186905297602090899081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613ad9576144fe98602091600091613d0c5750604051809a819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613ad9576000986147d0575b50614530886135f8565b81116146f4575b801515806146e3575b613994576040516330ed1f5d60e01b815260048101829052602481019890985260208860448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613ad9576000986146ba575b508761395a61459b92846135de565b9281841115613994576040516316cf339960e21b815260048101859052602481019290925260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4918215613ad95761461292602091600091613afb57506040518094819263360816cf60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4918215613ad95761466992602091600091613ade57506040516330ed1f5d60e01b815260048101889052602481019190915292839081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613ad95761469a92600092613aa857506135eb565b918115613994576146b0916139849197966135de565b9594959293614467565b61395a9850906146db61459b9260203d602011613ad257613ac3818361315a565b98509061458c565b506146ed816135f8565b8811614540565b96509050614704613b62856135ce565b908582116147c8575b6040516316cf339960e21b8152600481018390526024810185905260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613ad95761477a91602091600091613ca957506040518093819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613ad9576000916147a9575b5096614537565b6147c2915060203d602011613ad257613ac3818361315a565b386147a2565b85915061470d565b6147ea91985060203d602011613ad257613ac3818361315a565b9638614526565b506103e88410614470565b61481691945060203d602011613ad257613ac3818361315a565b923861443d565b9080614827575050565b6040516323b872dd60e01b60208201526001600160a01b039092166024830152306044830152606480830191909152815260a08101906001600160401b0382118183101761312857614328916040527f000000000000000000000000000000000000000000000000000000000000000061503f565b9091939280156149f3576148b081866135eb565b6000198101919082116115a8576148c691613605565b9182156149ea575b6040516330ed1f5d60e01b808252600482018390526701cdda4faccd000060248301529260209173__$cbaf8988f3c8d5491808e1d52afb16035a$__908381604481855af4801561079b5784916000916149bb575b509560446040518094819382528860048301526802b5e3af16b188000060248301525af492831561079b5760009361498b575b505011614980575b50808210156149785750915b8083116149745750565b9150565b90509161496a565b600a9150043861495e565b9080929350813d83116149b4575b6149a3818361315a565b810103126105735751903880614956565b503d614999565b82819392503d83116149e3575b6149d2818361315a565b810103126105735783905138614923565b503d6149c8565b600192506148ce565b505050565b9293909173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__614a25856000526003602052604060002090565b906040958651956304afd7ff60e21b8752602098898880614a4f6004988983019190602083019252565b0381875af4978815613ad957600098614de9575b5073__$cbaf8988f3c8d5491808e1d52afb16035a$__958951926316cf339960e21b948585528c8580614aa68d888d840160209093929193604081019481520152565b03818c5af4948515613ad957614ade958e91600091614dcc575b508d518097819263ec6e92cd60e01b83528c83019190602083019252565b03818c5af4948515613ad957614b1d958e91600091614daf575b508d51809781928a83528c8301919060206040840193670de0b6b3a764000081520152565b03818c5af4948515613ad957600095614d90575b508c8c614b4e611a6061363b856000526002602052604060002090565b9990918b614b9f614b69876000526003602052604060002090565b925163694f552560e01b815291820192835263ffffffff948516602084015293909b1660408201528a9283918291606090910190565b03915af4968715613ad957600097614d71575b50614bbc856135f8565b8711614d5b5750505050614bfd9089614bd5858a6135de565b918a51809481926330ed1f5d60e01b988984528a840160209093929193604081019481520152565b0381895af4908115613ad957614c1a92600092614d4357506135eb565b958615614d33578015614d335786811115614d255787519182528382019081526020810196909652948790869081906040015b0381865af4948515613ad957614c85958891600091614d08575b5087518097819263360816cf60e01b83528683019190602083019252565b0381865af4958615613ad9578795600097614ce5575b505190815290810192835260208301949094528391829081906040015b03915af4918215613ad957600092614ccf57505090565b6136bf9250803d10613ad257613ac3818361315a565b614cb8919750614d0190873d8911613ad257613ac3818361315a565b9690614c9b565b614d1f9150823d8411613ad257613ac3818361315a565b38614c67565b505050505050505050600090565b8751635fba374760e11b81528490fd5b613acb9192508b3d8d11613ad257613ac3818361315a565b9750975097509750505050506136bf945061361e565b614d899197508d803d10613ad257613ac3818361315a565b9538614bb2565b614da89195508d803d10613ad257613ac3818361315a565b9338614b31565b614dc69150823d8411613ad257613ac3818361315a565b38614af8565b614de39150823d8411613ad257613ac3818361315a565b38614ac0565b614e019198508a3d8c11613ad257613ac3818361315a565b9638614a63565b9293909173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__614e35856000526003602052604060002090565b906040958651956304afd7ff60e21b8752602098898880614e5f6004988983019190602083019252565b0381875af4978815613ad957600098615020575b5073__$cbaf8988f3c8d5491808e1d52afb16035a$__958951926316cf339960e21b948585528c8580614eb68d888d840160209093929193604081019481520152565b03818c5af4948515613ad957614eed958e91600091614dcc57508d518097819263ec6e92cd60e01b83528c83019190602083019252565b03818c5af4948515613ad957600095615001575b508c8c614f1e611a6061363b856000526002602052604060002090565b9990918b614f39614b69876000526003602052604060002090565b03915af4968715613ad957600097614fe2575b508a15614fd257614f5c856135f8565b8711614fbc5750505050614f759089614bd5858a6135de565b0381895af4908115613ad957614f9292600092614d4357506135eb565b86811115614d25578751918252838201908152602081019690965294879086908190604001614c4d565b9750975097509750505050506136bf945061432a565b8b51635fba374760e11b81528890fd5b614ffa9197508d803d10613ad257613ac3818361315a565b9538614f4c565b6150199195508d803d10613ad257613ac3818361315a565b9338614f01565b6150389198508a3d8c11613ad257613ac3818361315a565b9638614e73565b906000602091828151910182855af11561079b576000513d61509257506001600160a01b0381163b155b6150705750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b6001141561506956fe221f633c06e4399f005a7cec7ba7c4ff189e3fe19092cbafe32a5f176ffc797fa2646970667358221220b8c5d368e431ee24e29990c7399eac5ea22c815adfb784b7a1cce76765928e9464736f6c63430008180033",
+  "bytecode": "0x60a0806040523461002b5730608052615f6a908162000031823960805181818161214c01526121f30152f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c8063070ab8c9146130ea57806309f28be61461062a57806313b6eb09146130c35780631d49df571461306c5780632d6ce61d146128d05780632ed66650146128ae5780633013ce2914610a935780633d65117b146128055780633f4ba83a14612768578063449a03881461270a57806344a1a58e1461265e5780634765b3f914612579578063485cc955146123b55780634f1ef286146121a457806352d1902d146121395780635c975abb14610d4a5780636084fa03146117de57806362a626aa146117c0578063692c3fc7146117695780636da66355146116865780636ec469b114611561578063715018a6146114f65780637404d957146114d857806379334798146112765780637ed54782146111cd5780638a69614e14610fe75780638da5cb5b14610fb15780639bbafcc314610f665780639fc46ecb14610eb4578063ad3cb1cc14610e4a578063b1283e7714610d7a578063b187bd2614610d4a578063b762d83414610c05578063bcb1732214610be0578063c9ac6b3114610aba578063d41c3a6514610a93578063de57c54f14610653578063e9eb3ba51461062a578063eb44fdd3146104dc578063f0b7f3b11461020f5763f2fde38b146101e057600080fd5b3461020c57602036600319011261020c576102096101fc613291565b6102046140b7565b614043565b80f35b80fd5b503461020c5760a036600319011261020c576024604460043582358235610234613261565b90608435916102416143a2565b6102496143cd565b6001600160801b03169081156104c45784600052602096600288526040600020610272876140f0565b156104ad57805460ff81161561049b576001600160401b0390818160101c1642106104895760501c164211610477576102b36102ad826133bc565b8761410c565b6102c56102bf826133bc565b8461410c565b82861361045b5782861461045b576102ec9060046102e38886613491565b910154906134aa565b61043f5764e8d4a510008084029064e8d4a50fff61030c83868a8c61507b565b010494808611610423575060a48992610344899361032a89336155f8565b846000526002865260066040600020015490878b87614b84565b600060018060a01b0360015416896040519c8d9687956330906fad60e21b87523360048801528601528401528660648401528760848401525af1958615610417576000966103e3575b506040519384528684015260408301526060820152827fc33c3b4ea19b40f02901978a93e787a0caa1d6fd23dfa228ae891fe96867e17160803393a46001600080516020615f3e83398151915255604051908152f35b9095508681813d8311610410575b6103fb81836132d6565b8101031261040b5751948761038d565b600080fd5b503d6103f1565b6040513d6000823e3d90fd5b858991846040519263f6daf99360e01b84526004840152820152fd5b8691859160405192631150381b60e11b84526004840152820152fd5b8786848460405192631150381b60e11b84526004840152820152fd5b60405163b2094b5960e01b8152600490fd5b604051630ee8c41760e31b8152600490fd5b604051635a90bb8d60e11b8152600490fd5b50604051634cba20ef60e01b815260048101879052fd5b604051633b59e48960e11b8152600481018390528790fd5b503461020c57602036600319011261020c57600435906040516104fe816132ba565b8181528160208201528160408201528160608201528160808201528160a08201528160c08201528160e082015261010082818301526101209280848401526101408181850152610160918083860152806101808096015261055e876140f0565b15610611579061057e6040836101a09988979695526002602052206133bc565b926040519684511515885260208501511515602089015260408501516001600160401b0380911660408a015260608601511660608901526080850151608089015260a085015160a089015260c085015160c089015260e085015160e0890152818501519163ffffffff80931690890152808501519088015281840151169086015280820151151590850152015190820152f35b604051634cba20ef60e01b815260048101889052602490fd5b503461020c578060031936011261020c576001546040516001600160a01b039091168152602090f35b503461020c5760c036600319011261020c57606435906001600160401b038216820361040b57608435906001600160401b038216820361040b576106956140b7565b61069d6143a2565b600454916106aa83614034565b6004556024356004351215610a6957816044351315610a69576106dc6044356106d7600435602435613491565b6134aa565b610a69576001600160401b0381166001600160401b0385161015610a575766038d7ea4c6800060a435108015610a42575b610a305761072a604435610725600435602435613491565b614019565b9180831380610a23575b156109e85763ffffffff83161580156109d6575b6109af57604051610758816132ba565b600181528160208201526001600160401b03861660408201526001600160401b038316606082015281608082015260043560a082015260243560c082015260443560e082015263ffffffff841661010082015260a43561012082015281610140820152816101608201528161018082015284825260026020526008610180604084209280511515845460ff61ff0060208501511515871b1692169061ffff1916171784556108136001600160401b0360408301511685613bec565b61082a6001600160401b0360608301511685613c12565b6080810151600185015560a0810151600285015560c0810151600385015560e081015160048501556005840163ffffffff6101008301511663ffffffff1982541617905561012081015160068501556007840163ffffffff6101408301511681549060ff60201b610160850151151560201b169164ffffffffff191617179055015191015560036020526040812073__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b156109ab576040519063d886284b60e01b8252600482015263ffffffff84166024820152818160448173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af480156109a05761098c575b602085807f2453c1a297c658a5b6905526d84f0b4ac79c0d9cc5fb5601664602efee53121460e08a63ffffffff8a6001600160401b038b816040519516855216888401526004356040840152602435606084015260443560808401521660a082015260a43560c0820152a2604051908152f35b61099682916132a7565b61020c5780610919565b6040513d84823e3d90fd5b5080fd5b60405163515eb6ff60e11b815263ffffffff84166004820152620f42406024820152604490fd5b50620f424063ffffffff841611610748565b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081c985b99d94818dbdd5b9d606a1b6044820152606490fd5b50620f4240831315610734565b604051630b281d1960e31b8152600490fd5b5069152d02c7e14af680000060a4351161070d565b60405163536a71af60e01b8152600490fd5b60405163040b1c7360e21b8152600480359082015260248035908201526044803590820152606490fd5b503461020c578060031936011261020c57546040516001600160a01b039091168152602090f35b503461020c57608036600319011261020c5760043560246044358135610ade613261565b610ae7856140f0565b15610bc8576001600160801b0316928315610bb257846000526002602052610b1260406000206133bc565b610b1c818461410c565b610b26818561410c565b838313610b9557838314610b9557610b4d9060e0610b448587613491565b910151906134aa565b610b79575060209364e8d4a50fff92610b6f9264e8d4a510008096029261507b565b0104604051908152f35b9160449260405192631150381b60e11b84526004840152820152fd5b509160449260405192631150381b60e11b84526004840152820152fd5b604051633b59e48960e11b815260048101859052fd5b604051634cba20ef60e01b8152600481018690528490fd5b503461020c578060031936011261020c57602060405169152d02c7e14af68000008152f35b503461020c57610c1436613235565b610c1c6140b7565b610c25826140f0565b15610d315781835260026020526040832080549060ff8260081c16610d1857620f424083059160028201548084128015610d0b575b610ce057507fca3a568dfb73dd7b7b3c0b28f130edbf4b688f534869c3de083664c43c11430e602080946007856101008a968a60087fab96f8f39935936b273ce917dbbe6675bcc26b5548edf323cdf3b1348e6b80169c9a015584600184015561ffff19161781550164ffffffffff198154169055604051908152a2604051908152a280f35b6003830154604051638a228b0d60e01b81526004810186905260248101929092526044820152606490fd5b5060038301548413610c5a565b604051634e0558fb60e01b815260048101859052602490fd5b604051634cba20ef60e01b815260048101839052602490fd5b503461020c578060031936011261020c57602060ff600080516020615f1e83398151915254166040519015158152f35b503461020c57602036600319011261020c5760406101a091600435815260026020522080549060ff6001600160401b03916001810154600282015490600383015491600484015463ffffffff93846005870154169260068701549460086007890154980154996040519b8a811615158d528c60208c8360081c1615159101528c6040838360101c1691015260501c1660608c015260808b015260a08a015260c089015260e0880152610100870152610120860152811661014085015260201c161515610160830152610180820152f35b503461020c578060031936011261020c5760405160408101908082106001600160401b03831117610e9e57610e9a9160405260058152640352e302e360dc1b602082015260405191829182613373565b0390f35b634e487b7160e01b600052604160045260246000fd5b503461020c57602036600319011261020c5760015460405163eb02c30160e01b815260048035908201529060a090829060249082906001600160a01b03165afa9081156104175760209291610f37575b5064e8d4a50fff610b6f64e8d4a51000928360018060801b03606083015116029080519060408782015191015191614435565b610f59915060a03d60a011610f5f575b610f5181836132d6565b810190613b16565b38610f04565b503d610f47565b503461020c57610f7536613235565b610f809291926140b7565b610f89836140f0565b15610f98576102099192613c98565b604051634cba20ef60e01b815260048101849052602490fd5b503461020c578060031936011261020c57600080516020615ede833981519152546040516001600160a01b039091168152602090f35b503461020c576020908160031936011261020c576004356110066143a2565b61100e6143cd565b60015460405163eb02c30160e01b8152600481018390526001600160a01b03939184169060a081602481855afa9081156111a057869084926111ab575b5060249192604051928380926331a9108f60e11b82528860048301525afa9081156111a0578391611173575b50843391160361115b57805182526002855284611096604084206133bc565b01511561114257506110a782614295565b926110b2843361501c565b60015416803b156109ab57818091602460405180948193630852cd8d60e31b83528860048401525af180156109a05761112e575b5050604051908282527ff18ca9717b47ea7629d17b5d7b2ede46e864155725629e7d0347924c2f6d112d843393a36001600080516020615f3e83398151915255604051908152f35b61113882916132a7565b61020c57806110e6565b602490516040519063b23e5f9f60e01b82526004820152fd5b60405163d86ad9cf60e01b8152336004820152602490fd5b6111939150863d8811611199575b61118b81836132d6565b810190613b89565b38611077565b503d611181565b6040513d85823e3d90fd5b602492506111c79060a03d60a011610f5f57610f5181836132d6565b9161104b565b503461020c57604036600319011261020c576111e761324b565b60015460405163eb02c30160e01b815260048035908201529060a090829060249082906001600160a01b03165afa9283156104175760209364e8d4a50fff92610b6f9291611257575b5080518582015160409092015164e8d4a51000956001600160801b0316860292909161507b565b611270915060a03d60a011610f5f57610f5181836132d6565b38611230565b503461020c5761128536613349565b9061128e6143a2565b6112966143cd565b6001600160801b038181169390919084156114bf5760015460405163eb02c30160e01b8152600481018390526001600160a01b03918216969195919060a0816024818b5afa908115610417576000916114a0575b5060405180986331a9108f60e11b825285600483015281602460209b8c935afa90811561041757600091611483575b50873391160361115b5761132d81516143fd565b805188820190815190604084019064e8d4a50fff61135983519264e8d4a5100093848a0296879261507b565b01049580871161146557506060928994928c611396936113798a336155f8565b600286519451915192856000525260066040600020015493614b84565b015116019484861161144f576001541690813b1561040b576040516361d6883d60e01b8152600481018490526001600160801b0387166024820152916000908390604490829084905af1908115610417577fa9efae0c21a2db158c2af2d36b5c18dc14d792a79dfab662442466a80095ea5f9261142292611440575b5060405191829188339784613c3d565b0390a36001600080516020615f3e8339815191525560405191168152f35b611449906132a7565b88611412565b634e487b7160e01b600052601160045260246000fd5b866044916040519163f6daf99360e01b835260048301526024820152fd5b61149a9150893d8b116111995761118b81836132d6565b89611319565b6114b9915060a03d60a011610f5f57610f5181836132d6565b886112ea565b604051633b59e48960e11b815260048101869052602490fd5b503461020c578060031936011261020c576020604051620f42408152f35b503461020c578060031936011261020c5761150f6140b7565b600080516020615ede83398151915280546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461020c5761157036613235565b919061157b816140f0565b1561166e5780825260209260028452611596604084206133bc565b906115a1828261410c565b60e08201519081810191821285821290801582169115161761165a57916115c991869361419c565b92845260038252604084206115f2604051948593849363694f552560e01b855260048501613bcf565b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af491821561164e5791611621575b50604051908152f35b90508181813d8311611647575b61163881836132d6565b8101031261040b575138611618565b503d61162e565b604051903d90823e3d90fd5b634e487b7160e01b85526011600452602485fd5b60249060405190634cba20ef60e01b82526004820152fd5b503461020c57602036600319011261020c576001600160401b036004358181116117655736602382011215611765578060040135918211611765573660248383010111611765576116e3916116d96140b7565b6024369201613312565b6116eb6143a2565b600080516020615f1e833981519152600160ff198254161790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a17f375c0abd968f4602b557f6ac9a48ffc89820233aa9becc5d7ff1176fd09eafff6040518061175f339482613373565b0390a280f35b8280fd5b503461020c57602036600319011261020c5760406080916004358152600360205220600181015490600263ffffffff91015490604051928181168452818160201c16602085015260401c1660408301526060820152f35b503461020c578060031936011261020c576020600454604051908152f35b503461020c576117ed36613349565b6117f89291926143a2565b6118006143cd565b6001600160801b038316156121185760015460405163eb02c30160e01b815260048101849052906001600160a01b031660a082602481845afa918215610417576000926120f1575b506020602491604051928380926331a9108f60e11b82528860048301525afa908115610417576000916120d2575b50336001600160a01b039091160361115b5761189281516143fd565b60608101516001600160801b03908116908516116120b157805160208201805160408401805164e8d4a5100094919392859264e8d4a50fff926118e1926001600160801b038d16860292614435565b01049480861061209357508351905191519281600052600260205260406000206119196119126006830154926133bc565b868661419c565b90916040516330ed1f5d60e01b8152816004820152670de0b6b3a7640000602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561041757600091612061575b508060001981011161144f5760001981016001600160801b038d16860211611d3557506040516316cf339960e21b81526001600160801b038c169094026004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041757600093611d01575b506040519263ec6e92cd60e01b8452600484015260208360248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041757600093611ccd575b50604051926316cf339960e21b8452670de0b6b3a76400006004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041757600093611c99575b50662386f26fc1000083108015611c87575b611c755773__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90846000526003602052604060002091803b1561040b578493600093611ad0604051978895869485946330f27d1f60e01b86526004860161346c565b03915af490811561041757600080516020615ebe83398151915292602092611c66575b50604051908152a45b611b06823361501c565b606001516001600160801b03848116918116919091039390841161144f576001600160801b0384169283611bda576001546001600160a01b0316803b1561040b5760008091602460405180948193630852cd8d60e31b83528760048401525af18015610417576040967fe3a918fd34698242cc99d5ba0987edaa47d8f5b8ed601ef29e08a9b7d72ecc49928692611bcb575b505b611baa8851928392339784613c3d565b0390a36001600080516020615f3e8339815191525582519182526020820152f35b611bd4906132a7565b88611b98565b6001546001600160a01b0316803b1561040b576040516361d6883d60e01b8152600481018390526001600160801b0387166024820152906000908290604490829084905af18015610417576040967fe3a918fd34698242cc99d5ba0987edaa47d8f5b8ed601ef29e08a9b7d72ecc49928692611c57575b50611b9a565b611c60906132a7565b88611c51565b611c6f906132a7565b8a611af3565b60405163a2f9e7b560e01b8152600490fd5b5068056bc75e2d631000008311611a7b565b90926020823d602011611cc5575b81611cb4602093836132d6565b8101031261020c575051918a611a69565b3d9150611ca7565b9092506020813d602011611cf9575b81611ce9602093836132d6565b8101031261040b5751918a611a1b565b3d9150611cdc565b9092506020813d602011611d2d575b81611d1d602093836132d6565b8101031261040b5751918a6119db565b3d9150611d10565b919a9799909892979296959493919291611d5e60001985016001600160801b0385168302613c5f565b600019810190811161144f57611d7c6103e891600019870190614398565b1161203957600097906001600160801b038416025b8015158061202e575b156120095760001985018111156120035760001985015b604051906316cf339960e21b82528060048301528c602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041757600092611fcf575b506040519163ec6e92cd60e01b8352600483015260208260248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041757600092611f9b575b50604051916316cf339960e21b8352670de0b6b3a76400006004840152602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041757600092611f67575b50662386f26fc1000082108015611f55575b611c755787600052600360205260406000209273__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b1561040b578f938d600091611eea8660405198899485946330f27d1f60e01b86526004860161346c565b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af4938415610417578a8a600080516020615ebe83398151915260208f9497611f3a98611f409a611f46575b50604051908152a4613c8b565b98614034565b97611d91565b611f4f906132a7565b38611f2d565b5068056bc75e2d631000008211611e97565b90916020823d602011611f93575b81611f82602093836132d6565b8101031261020c575051908f611e85565b3d9150611f75565b90916020823d602011611fc7575b81611fb6602093836132d6565b8101031261020c575051908f611e37565b3d9150611fa9565b90916020823d602011611ffb575b81611fea602093836132d6565b8101031261020c575051908f611df7565b3d9150611fdd565b80611db1565b9750985098965098505050505015611afc575b6040516332581cb160e01b8152600490fd5b506103e88910611d9a565b604051633b59e48960e11b81526001600160801b038085169092029091166004820152602490fd5b90506020813d60201161208b575b8161207c602093836132d6565b8101031261040b57518c611968565b3d915061206f565b604490866040519163f6daf99360e01b835260048301526024820152fd5b604051633b59e48960e11b81526001600160801b0385166004820152602490fd5b6120eb915060203d6020116111995761118b81836132d6565b85611876565b602491925061211060209160a03d60a011610f5f57610f5181836132d6565b929150611848565b604051633b59e48960e11b81526001600160801b0384166004820152602490fd5b503461020c578060031936011261020c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003612192576020604051600080516020615efe8339815191528152f35b60405163703e46dd60e11b8152600490fd5b50604036600319011261020c576121b9613291565b6024356001600160401b0381116117655736602382011215611765576121e9903690602481600401359101613312565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116308114908115612399575b506121925761222c6140b7565b6040516352d1902d60e01b8152908316926020918281600481885afa869181612366575b5061226e57604051634c9c8ce360e01b815260048101869052602490fd5b938594600080516020615efe8339815191529081810361234e5750823b156123355780546001600160a01b0319168217905560405185917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8380a2845115612318575080848461230b96519101845af4903d1561230f573d6122ef816132f7565b906122fd60405192836132d6565b81528581943d92013e615e5a565b5080f35b60609250615e5a565b935050505034612326575080f35b63b398979f60e01b8152600490fd5b604051634c9c8ce360e01b815260048101839052602490fd5b60249060405190632a87526960e21b82526004820152fd5b9091508381813d8311612392575b61237e81836132d6565b8101031261238e57519038612250565b8680fd5b503d612374565b905081600080516020615efe833981519152541614153861221f565b503461020c57604036600319011261020c576123cf613291565b6001600160a01b0390602435828116919082900361040b577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009182549360ff8560401c1615926001600160401b03861695861580612572575b60018098149081612568575b15908161255f575b5061254d5767ffffffffffffffff198116871786558461252e575b501680158015612526575b6125145761246e615bde565b612476615bde565b61247f33614043565b612487615bde565b61248f615bde565b612497615bde565b61249f615bde565b600080516020615f3e83398151915285905585546001600160a01b0319908116909117865584541617835560048390556124d7578280f35b805460ff60401b191690556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a138808280f35b60405163d92e233d60e01b8152600490fd5b508115612462565b68ffffffffffffffffff19166801000000000000000117855538612457565b60405163f92ee8a960e01b8152600490fd5b9050153861243c565b303b159150612434565b5084612428565b503461020c57606036600319011261020c576004356001600160401b0360243581811680820361040b5760443592831680840361040b576125b86140b7565b6125c1856140f0565b15612645578486526002602052604086209260ff845460081c1661262c5781831015610a57577f66e3554b58ad477fe2e052540bbd9b1ba199fbfd763c4d2848576d2ed8722c64948461261961261e93604097613bec565b613c12565b82519182526020820152a280f35b604051634e0558fb60e01b815260048101879052602490fd5b604051634cba20ef60e01b815260048101869052602490fd5b503461020c5761266d36613277565b9291906126786140b7565b612681826140f0565b15610d31578183526020936002855261269c604085206133bc565b916126a7838261410c565b6126b1838361410c565b8181136126ed57916126c491869361419c565b92845260038252604084206115f2604051948593849363049bebd960e31b855260048501613bcf565b60449160405191631150381b60e11b835260048301526024820152fd5b503461020c5761271936613277565b929190612725826140f0565b15610d315781835260209360028552612740604085206133bc565b9161274b838261410c565b612755838361410c565b8181136126ed57916115c991869361419c565b503461020c578060031936011261020c576127816140b7565b600080516020615f1e833981519152805460ff8116156127f35760ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1337ff5cbf596165cc457b2cd92e8d8450827ee314968160a5696402d75766fc52caf8280a280f35b604051638dfc202b60e01b8152600490fd5b503461020c57604036600319011261020c5761281f61324b565b60015460405163eb02c30160e01b815260048035908201529060a090829060249082906001600160a01b03165afa9283156104175760209364e8d4a50fff92610b6f929161288f575b5080518582015160409092015164e8d4a51000956001600160801b03168602929091614435565b6128a8915060a03d60a011610f5f57610f5181836132d6565b38612868565b503461020c578060031936011261020c57602060405166038d7ea4c680008152f35b503461020c576128df36613235565b6128e76143a2565b6128ef6143cd565b60015460405163eb02c30160e01b815260048101849052906001600160a01b031660a082602481845afa91821561041757600092613045575b506020602491604051928380926331a9108f60e11b82528860048301525afa90811561041757600091613026575b50336001600160a01b039091160361115b5761297281516143fd565b64e8d4a51000908160018060801b036060830151160291815191602081019164e8d4a50fff6129ab868551966040860197885191614435565b010494808610612093575051905191519281600052600260205260406000206129db6119126006830154926133bc565b90916040516330ed1f5d60e01b8152816004820152670de0b6b3a7640000602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561041757600091612ff4575b5060001990808281011161144f578082018611612d07575050604051936316cf339960e21b85526004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041757600093612cd3575b506040519263ec6e92cd60e01b8452600484015260208360248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041757600093612c9f575b50604051926316cf339960e21b8452670de0b6b3a76400006004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041757600093612c6b575b50662386f26fc1000083108015612c59575b611c755773__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90846000526003602052604060002091803b1561040b578493600093612b7c604051978895869485946330f27d1f60e01b86526004860161346c565b03915af490811561041757600080516020615ebe83398151915292602092612c4a575b50604051908152a45b612bb2813361501c565b6001546001600160a01b031691823b1561040b5760008093602460405180968193630852cd8d60e31b83528660048401525af192831561041757602093612c3b575b50604051908282527f467bc11eddf702a2091fefc23d3064f17939ba1005bd43304f15604c9b6f2a9b843393a36001600080516020615f3e83398151915255604051908152f35b612c44906132a7565b83612bf4565b612c53906132a7565b88612b9f565b5068056bc75e2d631000008311612b27565b90926020823d602011612c97575b81612c86602093836132d6565b8101031261020c5750519188612b15565b3d9150612c79565b9092506020813d602011612ccb575b81612cbb602093836132d6565b8101031261040b57519188612ac7565b3d9150612cae565b9092506020813d602011612cff575b81612cef602093836132d6565b8101031261040b57519188612a87565b3d9150612ce2565b90919794612d1e83839c98959c9996990182613c5f565b83810190811161144f57612d386103e89185850190614398565b11612fd257956000965b80151580612fc7575b15612fa557828401811115612f9f578383015b604051906316cf339960e21b82528060048301528b602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041757600092612f6b575b506040519163ec6e92cd60e01b8352600483015260208260248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041757600092612f37575b50604051916316cf339960e21b8352670de0b6b3a76400006004840152602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041757600092612f03575b50662386f26fc1000082108015612ef1575b611c755786600052600360205260406000209273__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b1561040b5760008f948d90612e978660405198899485946330f27d1f60e01b86526004860161346c565b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af4938415610417578989600080516020615ebe8339815191526020612ee5978f95612eeb9a611f465750604051908152a4613c8b565b97614034565b96612d42565b5068056bc75e2d631000008211612e44565b90916020823d602011612f2f575b81612f1e602093836132d6565b8101031261020c575051908e612e32565b3d9150612f11565b90916020823d602011612f63575b81612f52602093836132d6565b8101031261020c575051908e612de4565b3d9150612f45565b90916020823d602011612f97575b81612f86602093836132d6565b8101031261020c575051908e612da4565b3d9150612f79565b80612d5e565b985099505050505050505015612ba8576040516332581cb160e01b8152600490fd5b506103e88810612d4b565b604051633b59e48960e11b81526001600160801b039091166004820152602490fd5b90506020813d60201161301e575b8161300f602093836132d6565b8101031261040b57518a612a2a565b3d9150613002565b61303f915060203d6020116111995761118b81836132d6565b84612956565b602491925061306460209160a03d60a011610f5f57610f5181836132d6565b929150612928565b503461020c5761307b36613217565b91613085846140f0565b156130aa579061309892916020946134ca565b6040516001600160801b039091168152f35b604051634cba20ef60e01b815260048101859052602490fd5b503461020c57602036600319011261020c5760206130e2600435614295565b604051908152f35b503461020c576130f936613217565b6131049391936140b7565b61310d826140f0565b15610d31578185526002602052613126604086206133bc565b613130818561410c565b61313a818661410c565b8484136131f95761314d8691868661419c565b848352600360205260408320929173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90813b156131f557859461319a604051968795869485946330f27d1f60e01b86526004860161346c565b03915af480156131ea576131c6575b506020600080516020615ebe83398151915291604051908152a480f35b600080516020615ebe83398151915291956131e26020926132a7565b9591506131a9565b6040513d88823e3d90fd5b8380fd5b6044848660405191631150381b60e11b835260048301526024820152fd5b608090600319011261040b5760043590602435906044359060643590565b604090600319011261040b576004359060243590565b602435906001600160801b038216820361040b57565b606435906001600160801b038216820361040b57565b606090600319011261040b57600435906024359060443590565b600435906001600160a01b038216820361040b57565b6001600160401b038111610e9e57604052565b6101a081019081106001600160401b03821117610e9e57604052565b90601f801991011681019081106001600160401b03821117610e9e57604052565b6001600160401b038111610e9e57601f01601f191660200190565b92919261331e826132f7565b9161332c60405193846132d6565b82948184528183011161040b578281602093846000960137010152565b606090600319011261040b57600435906024356001600160801b038116810361040b579060443590565b6020808252825181830181905290939260005b8281106133a857505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501613386565b906040516133c9816132ba565b61018060088294805460ff81161515855260ff81841c16151560208601526001600160401b0390818160101c16604087015260501c16606085015260018101546080850152600281015460a0850152600381015460c0850152600481015460e085015260ff63ffffffff806005840154166101008701526006830154610120870152600783015490811661014087015260201c1615156101608501520154910152565b90815263ffffffff918216602082015291166040820152606081019190915260800190565b8181039291600013801582851316918412161761144f57565b81156134b4570790565b634e487b7160e01b600052601260045260246000fd5b90928015613b0d578160005260026020526134e860406000206133bc565b6134f2818661410c565b6134fc818561410c565b838513613aef57838514613aef5761351a9060e0610b448787613491565b613ad1576101009082600052600260205261354961353b60406000206133bc565b80956101208201519761419c565b9473__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__9085600052600360205261358260406000209163ffffffff968791015116614358565b60405163694f552560e01b80825260048201939093526000602482015295166044860152602085606481855af494851561041757600095613a9a575b506020939495600052600384526040600020906135e960405198899586948594855260048501613bcf565b03915af492831561041757600093613a66575b508115613a54578215613a545764e8d4a5100002906040516330ed1f5d60e01b8152846004820152670de0b6b3a764000080602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115610417578492600092613a1d575b50935b613898575050604051916330ed1f5d60e01b8352816004840152602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561041757839260009261385f575b506136c5926136bf91613c8b565b90613c8b565b90604051916316cf339960e21b83526004830152602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156104175760009161382d575b506040519063360816cf60e01b8252600482015260208160248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115610417576000916137fb575b50604051916330ed1f5d60e01b83526004830152602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af48015610417576000906137c4575b6001600160801b03915064e8d4a5100090048181116137ab571690565b604051633b59e48960e11b815260048101839052602490fd5b506020813d6020116137f3575b816137de602093836132d6565b8101031261040b5764e8d4a51000905161378e565b3d91506137d1565b90506020813d602011613825575b81613816602093836132d6565b8101031261040b57513861374a565b3d9150613809565b90506020813d602011613857575b81613848602093836132d6565b8101031261040b57513861370a565b3d915061383b565b925090506020823d602011613890575b8161387c602093836132d6565b8101031261040b57905182916136c56136b1565b3d915061386f565b909281841115613a1757815b6040516316cf339960e21b815281600482015287602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115610417576000916139e5575b506040519063ec6e92cd60e01b8252600482015260208160248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115610417576000916139b3575b50604051926330ed1f5d60e01b84526004840152602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af480156104175760009061397f575b613978925094613c8b565b9081613664565b506020823d6020116139ab575b81613999602093836132d6565b8101031261040b57613978915161396d565b3d915061398c565b90506020813d6020116139dd575b816139ce602093836132d6565b8101031261040b575138613929565b3d91506139c1565b90506020813d602011613a0f575b81613a00602093836132d6565b8101031261040b5751386138e9565b3d91506139f3565b836138a4565b925090506020823d602011613a4c575b81613a3a602093836132d6565b8101031261040b578391519038613661565b3d9150613a2d565b604051635fba374760e11b8152600490fd5b9092506020813d602011613a92575b81613a82602093836132d6565b8101031261040b575191386135fc565b3d9150613a75565b9394506020843d602011613ac9575b81613ab6602093836132d6565b8101031261040b576020935194936135be565b3d9150613aa9565b6044848460405191631150381b60e11b835260048301526024820152fd5b6044858560405191631150381b60e11b835260048301526024820152fd5b50505050600090565b908160a091031261040b57604051906001600160401b039060a0830182811184821017610e9e576040908152815184526020808301519085015281810151908401526060810151906001600160801b038216820361040b5760809160608501520151908116810361040b57608082015290565b9081602091031261040b57516001600160a01b038116810361040b5790565b919060206040840193670de0b6b3a764000081520152565b9081602091031261040b575190565b90815263ffffffff91821660208201529116604082015260600190565b9069ffffffffffffffff000082549160101b169069ffffffffffffffff00001916179055565b805467ffffffffffffffff60501b191660509290921b67ffffffffffffffff60501b16919091179055565b6001600160801b03918216815291166020820152604081019190915260600190565b9190820180921161144f57565b60001981019190821161144f57565b906103e891820391821161144f57565b9190820391821161144f57565b90816000526002602052604060002060ff815460081c161561400057600781015460ff8160201c16613ffa578215613fc75760049263ffffffff821680613fc157506001915b600154604051635e4b419360e11b81529560209187919082906001600160a01b03165afa94851561041757600095613f8d575b5084831015613f3c5750613d259082613c5f565b91838311613f34575b6001546001600160a01b0316825b848110613dcf57505063ffffffff83166007820154948163ffffffff19871617600784015584149485613db1575b505050600019820191821161144f577fcf156953c2640827200d7348c90cddc0fd140a8dd5f3cfd29bf0b2a855c34b189260609260405192835260208301526040820152a2565b64ffffffffff191617600160201b1760079190910155388080613d6a565b604051634f558e7960e01b815260048101829052602491906020818481875afa90811561041757600091613ef9575b5015613ed35760405163eb02c30160e01b81526004810182905260a09081818581885afa908115610417578a92600092613edc575b50505103613ed357613e4481614295565b602060405180946331a9108f60e11b825284600483015281875afa928315610417577f1a81eb5d53aa7bec98cadd0a6303be87e540f77ba90e63cd945e49b8eb697b0a60406001958593600091613eb4575b5081519480865215156020860152868060a01b031693a35b01613d3c565b613ecd915060203d6020116111995761118b81836132d6565b38613e96565b60019150613eae565b613ef29250803d10610f5f57610f5181836132d6565b3880613e33565b90506020813d602011613f2c575b81613f14602093836132d6565b8101031261040b5751801515810361040b5738613dfe565b3d9150613f07565b839250613d2e565b7fcf156953c2640827200d7348c90cddc0fd140a8dd5f3cfd29bf0b2a855c34b1894506060939150600160201b60079160ff60201b19161791015560405190808252602082015260016040820152a2565b9094506020813d602011613fb9575b81613fa9602093836132d6565b8101031261040b57519338613d11565b3d9150613f9c565b91613cde565b60405162461bcd60e51b815260206004820152600b60248201526a07363616e4c696d69743d360ac1b6044820152606490fd5b50505050565b60405163b23e5f9f60e01b815260048101849052602490fd5b81156134b457600160ff1b811460001983141661144f570590565b600019811461144f5760010190565b6001600160a01b0390811690811561409e57600080516020615ede83398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b604051631e4fbdf760e01b815260006004820152602490fd5b600080516020615ede833981519152546001600160a01b031633036140d857565b60405163118cdaa760e01b8152336004820152602490fd5b600052600260205263ffffffff60056040600020015416151590565b9060a081018051808412801561418f575b614164575060e061413261413d925185613491565b9201918251906134aa565b614145575050565b6044925051604051916382fe647b60e01b835260048301526024820152fd5b60c0830151604051638a228b0d60e01b81526004810186905260248101929092526044820152606490fd5b5060c0830151841361411d565b92906141df6141ce916141d76141b860a0870197885190613491565b9160e087019263ffffffff958691855190614019565b16975190613491565b905190614019565b600019810190811360011661144f5781610100911693015116808410908161428b575b501561424b5781831161421157565b60405162461bcd60e51b8152602060048201526012602482015271496e76616c69642072616e67652062696e7360701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527752616e67652062696e73206f7574206f6620626f756e647360401b6044820152606490fd5b9050821038614202565b60015460405163eb02c30160e01b8152600481019290925260a090829060249082906001600160a01b03165afa90811561041757600091614339575b50805160005260026020526142e960406000206133bc565b6020810151156143325760806020830151910151809113159081614324575b501561431e57606001516001600160801b031690565b50600090565b905060408201511338614308565b5050600090565b614352915060a03d60a011610f5f57610f5181836132d6565b386142d1565b63ffffffff908116600019019190821161144f57565b9081526000602082015263ffffffff909116604082015260600190565b80156134b4576000190490565b81156134b4570490565b60ff600080516020615f1e83398151915254166143bb57565b60405163d93c066560e01b8152600490fd5b600080516020615f3e83398151915260028154146143eb5760029055565b604051633ee5aeb560e01b8152600490fd5b600052600260205260406000205460ff81161561049b576001600160401b0390818160101c1642106104895760501c16421161047757565b91929092614455614450846000526002602052604060002090565b6133bc565b9361446185838361419c565b6101208701516040516330ed1f5d60e01b815260048101829052670de0b6b3a764000060248201529096929060208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af480156148c1576144c291600091614b65575b50613c6c565b978887116144da575050506144d795506157b7565b90565b909196929450614547935073__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90602061452b61452661010061451a8a6000526003602052604060002090565b94015163ffffffff1690565b614358565b6040518097819263694f552560e01b958684526004840161436e565b0381855af49485156148c157600095614b3f575b5061457460209495966000526003602052604060002090565b9061458d604051998a9586948594855260048501613bcf565b03915af49384156148c157600094614b1e575b508115613a54576103e86145c5866145c06145bb8288613c5f565b613c6c565b614398565b11612118579093926000919082905b84151580614b13575b15614b055761461e9596878611600014614afe5787915b6040516316cf339960e21b8152600481018490526024810186905297602090899081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156148c15761466d98602091600091614ae1575b50604051809a819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156148c1576146b798602091600091614ac4575b50604051809a81926316cf339960e21b835260048301613ba8565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156148c157600098614aa3575b506146e98861438b565b811161493a575b80151580614929575b613a54576040516330ed1f5d60e01b815260048101829052602481019890985260208860448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156148c157600098614900575b50876147546147599284613c8b565b613c5f565b908115613a545781811161478e575b508115613a54576147849161477e919796613c8b565b93614034565b95949592936145d4565b6040516316cf339960e21b8152600481019190915260248101829052909260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49182156148c1576147ff926020916000916148e3575b506040518094819263360816cf60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49182156148c157614857926020916000916148c6575b506040516330ed1f5d60e01b815260048101889052602481019190915292839081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156148c15761488992600092614890575b50613c5f565b9138614768565b6148b391925060203d6020116148ba575b6148ab81836132d6565b810190613bc0565b9038614883565b503d6148a1565b610417565b6148dd9150823d84116148ba576148ab81836132d6565b3861482e565b6148fa9150823d84116148ba576148ab81836132d6565b386147df565b6147549850906149216147599260203d6020116148ba576148ab81836132d6565b985090614745565b506149338161438b565b88116146f9565b9650905061495261494a85613c7b565b86858961565b565b90858211614a9b575b6040516316cf339960e21b8152600481018390526024810185905260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156148c1576149c991602091600091614a7e575b506040518093819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156148c157614a1391602091600091614a61575b50604051809381926316cf339960e21b835260048301613ba8565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156148c157600091614a42575b50966146f0565b614a5b915060203d6020116148ba576148ab81836132d6565b38614a3b565b614a789150823d84116148ba576148ab81836132d6565b386149f8565b614a959150823d84116148ba576148ab81836132d6565b386149a9565b85915061495b565b614abd91985060203d6020116148ba576148ab81836132d6565b96386146df565b614adb9150823d84116148ba576148ab81836132d6565b3861469c565b614af89150823d84116148ba576148ab81836132d6565b3861464d565b85916145f4565b50945050509050613a545790565b506103e884106145dd565b614b3891945060203d6020116148ba576148ab81836132d6565b92386145a0565b6020949550614b5d61457491863d88116148ba576148ab81836132d6565b95945061455b565b614b7e915060203d6020116148ba576148ab81836132d6565b386144bc565b9193929092826000526002602052614ba261191260406000206133bc565b90916040516330ed1f5d60e01b8152816004820152670de0b6b3a7640000602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561041757600091614fea575b508060001981011161144f5760001981018511614daa5750604051936316cf339960e21b85526004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041757600093614d76575b506040519263ec6e92cd60e01b8452600484015260208360248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041757600093614d42575b50662386f26fc1000083108015614d30575b611c755773__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90846000526003602052604060002091803b1561040b578493600093614cf4604051978895869485946330f27d1f60e01b86526004860161346c565b03915af490811561041757600080516020615ebe83398151915292602092614d21575b50604051908152a4565b614d2a906132a7565b38614d17565b5068056bc75e2d631000008311614c9f565b9092506020813d602011614d6e575b81614d5e602093836132d6565b8101031261040b57519138614c8d565b3d9150614d51565b9092506020813d602011614da2575b81614d92602093836132d6565b8101031261040b57519138614c4d565b3d9150614d85565b93614dc16000999894969297939919860182613c5f565b8060001981011161144f576103e890614de1906000198881019101614398565b11612fd257936000945b80151580614fdf575b15614fcf576000198201811115614fc95760001982015b604051906316cf339960e21b825280600483015289602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041757600092614f95575b506040519163ec6e92cd60e01b8352600483015260208260248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041757600092614f61575b50662386f26fc1000082108015614f4f575b611c755784600052600360205260406000209273__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b1561040b5760008a8e95614ef58660405198899485946330f27d1f60e01b86526004860161346c565b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af4938415610417578787600080516020615ebe8339815191526020614f43978d95614f499a611f465750604051908152a4613c8b565b95614034565b94614deb565b5068056bc75e2d631000008211614ea3565b9091506020813d602011614f8d575b81614f7d602093836132d6565b8101031261040b57519038614e91565b3d9150614f70565b9091506020813d602011614fc1575b81614fb1602093836132d6565b8101031261040b57519038614e51565b3d9150614fa4565b80614e0b565b9798505050505050505061201c57565b506103e88610614df4565b90506020813d602011615014575b81615005602093836132d6565b8101031261040b575138614bf1565b3d9150614ff8565b81615025575050565b60005460405163a9059cbb60e01b60208201526001600160a01b039283166024820152604480820194909452928352608083019291166001600160401b03831182841017610e9e5761507992604052615dfe565b565b91929092615096614450846000526002602052604060002090565b936150a285838361419c565b6101208701516040516330ed1f5d60e01b815260048101829052670de0b6b3a764000060248201529096929060208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af480156148c15761510291600091614b655750613c6c565b97888711615117575050506144d79550615c1f565b6151699550839297945061514d614526610100615141602095976000526003602052604060002090565b93015163ffffffff1690565b60405163694f552560e01b81529687928392906004840161436e565b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af49384156148c1576000946155d0575b50906151a96020926000526003602052604060002090565b6151c7604051978893849363694f552560e01b855260048501613bcf565b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af49384156148c1576000946155af575b508115613a54576103e861520a866145c06145bb8288613c5f565b11612118579093926000919082905b841515806155a4575b15614b05576152639596878611600014614afe576040516316cf339960e21b8152600481018990526024810185905296889290602090899081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156148c1576152b198602091600091614ae15750604051809a819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156148c157600098615583575b506152e38861438b565b81116154a7575b80151580615496575b613a54576040516330ed1f5d60e01b815260048101829052602481019890985260208860448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156148c15760009861546d575b508761475461534e9284613c8b565b9281841115613a54576040516316cf339960e21b815260048101859052602481019290925260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49182156148c1576153c5926020916000916148e357506040518094819263360816cf60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49182156148c15761541c926020916000916148c657506040516330ed1f5d60e01b815260048101889052602481019190915292839081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156148c15761544d926000926148905750613c5f565b918115613a54576154639161477e919796613c8b565b9594959293615219565b61475498509061548e61534e9260203d6020116148ba576148ab81836132d6565b98509061533f565b506154a08161438b565b88116152f3565b965090506154b761494a85613c7b565b9085821161557b575b6040516316cf339960e21b8152600481018390526024810185905260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156148c15761552d91602091600091614a7e57506040518093819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156148c15760009161555c575b50966152ea565b615575915060203d6020116148ba576148ab81836132d6565b38615555565b8591506154c0565b61559d91985060203d6020116148ba576148ab81836132d6565b96386152d9565b506103e88410615222565b6155c991945060203d6020116148ba576148ab81836132d6565b92386151ef565b6020929194506155ef6151a991843d86116148ba576148ab81836132d6565b94919250615191565b81615601575050565b6000546040516323b872dd60e01b60208201526001600160a01b03928316602482015230604482015260648082019490945292835260a083019291166001600160401b03831182841017610e9e5761507992604052615dfe565b9091939280156157b25761566f8186613c5f565b60001981019190821161144f5761568591614398565b9182156157a9575b6040516330ed1f5d60e01b80825260048201839052670de0b6b3a764000060248301529260209173__$cbaf8988f3c8d5491808e1d52afb16035a$__908381604481855af4801561041757849160009161577a575b509560446040518094819382528860048301526802b5e3af16b188000060248301525af49283156104175760009361574a575b50501161573f575b50808210156157375750915b8083116157335750565b9150565b905091615729565b600a9150043861571d565b9080929350813d8311615773575b61576281836132d6565b8101031261040b5751903880615715565b503d615758565b82819392503d83116157a2575b61579181836132d6565b8101031261040b57839051386156e2565b503d615787565b6001925061568d565b505050565b92919061583b94916157d6614450866000526002602052604060002090565b9373__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__615800876000526003602052604060002090565b9261581661452661010089015163ffffffff1690565b9460409889519663694f552560e01b90818952888060209e8f9360049b8c840161436e565b0381885af4998a156148c1578c8c9960009c615bae575b509188969593918895938c73__$cbaf8988f3c8d5491808e1d52afb16035a$__809d5180809d81946316cf339960e21b9e8f845283019161589e92908152602081019190915260400190565b03915af49889156148c1578f90998f8c8e916158db9d600094615b8f575b505163ec6e92cd60e01b81529081019283529b8c928391829160200190565b03915af49889156148c1578f90998f8c8b8f9261590c9e600095615b70575b50519d8e948593849384528301613ba8565b03915af49687156148c1578f928f92908c9161595f9c60009b615b4d575b5061593690898961419c565b61594d889e929e6000526003602052604060002090565b95519d8e968795869586528501613bcf565b03915af49687156148c157600097615b2e575b5061597c8561438b565b8711615b1857505050506159bc9089615995858a613c8b565b918a51809481926330ed1f5d60e01b988984528a8401908152602081019190915260400190565b0381895af49081156148c1576159d992600092615b005750613c5f565b958615615af05786811115615ae2578891615a0a895198899384938452878401908152602081019190915260400190565b0381865af49485156148c157615a42958891600091615ac5575b5087518097819263360816cf60e01b83528683019190602083019252565b0381865af49586156148c1578795600097615aa2575b505190815290810192835260208301949094528391829081906040015b03915af49182156148c157600092615a8c57505090565b6144d79250803d106148ba576148ab81836132d6565b615a75919750615abe90873d89116148ba576148ab81836132d6565b9690615a58565b615adc9150823d84116148ba576148ab81836132d6565b38615a24565b505050505050505050600090565b8751635fba374760e11b81528490fd5b6148b39192508b3d8d116148ba576148ab81836132d6565b9750975097509750505050506144d79450614435565b615b469197508d803d106148ba576148ab81836132d6565b9538615972565b615936919b50615b6990873d89116148ba576148ab81836132d6565b9a9061592a565b615b88919550863d88116148ba576148ab81836132d6565b93386158fa565b615ba7919450853d87116148ba576148ab81836132d6565b92386158bc565b819c5091615bd08a98979593838b989694903d106148ba576148ab81836132d6565b9c9193955091939596615852565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615615c0d57565b604051631afcd79f60e31b8152600490fd5b929190615c3e94916157d6614450866000526002602052604060002090565b0381885af4998a156148c1578c8c9960009c615dce575b509188969593918895938c73__$cbaf8988f3c8d5491808e1d52afb16035a$__809d5180809d81946316cf339960e21b9e8f8452830191615ca192908152602081019190915260400190565b03915af49889156148c1578f90998f8c8e91615cdd9d600094615b8f57505163ec6e92cd60e01b81529081019283529b8c928391829160200190565b03915af49687156148c1578f928f92908c91615d069c60009b615b4d575061593690898961419c565b03915af49687156148c157600097615daf575b508a15615d9f57615d298561438b565b8711615d895750505050615d429089615995858a613c8b565b0381895af49081156148c157615d5f92600092615b005750613c5f565b86811115615ae2578891615a0a895198899384938452878401908152602081019190915260400190565b9750975097509750505050506144d7945061507b565b8b51635fba374760e11b81528890fd5b615dc79197508d803d106148ba576148ab81836132d6565b9538615d19565b819c5091615df08a98979593838b989694903d106148ba576148ab81836132d6565b9c9193955091939596615c55565b906000602091828151910182855af115610417576000513d615e5157506001600160a01b0381163b155b615e2f5750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415615e28565b90615e815750805115615e6f57805190602001fd5b60405163d6bda27560e01b8152600490fd5b81511580615eb4575b615e92575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15615e8a56fe221f633c06e4399f005a7cec7ba7c4ff189e3fe19092cbafe32a5f176ffc797f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a164736f6c6343000818000a",
+  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c8063070ab8c9146130ea57806309f28be61461062a57806313b6eb09146130c35780631d49df571461306c5780632d6ce61d146128d05780632ed66650146128ae5780633013ce2914610a935780633d65117b146128055780633f4ba83a14612768578063449a03881461270a57806344a1a58e1461265e5780634765b3f914612579578063485cc955146123b55780634f1ef286146121a457806352d1902d146121395780635c975abb14610d4a5780636084fa03146117de57806362a626aa146117c0578063692c3fc7146117695780636da66355146116865780636ec469b114611561578063715018a6146114f65780637404d957146114d857806379334798146112765780637ed54782146111cd5780638a69614e14610fe75780638da5cb5b14610fb15780639bbafcc314610f665780639fc46ecb14610eb4578063ad3cb1cc14610e4a578063b1283e7714610d7a578063b187bd2614610d4a578063b762d83414610c05578063bcb1732214610be0578063c9ac6b3114610aba578063d41c3a6514610a93578063de57c54f14610653578063e9eb3ba51461062a578063eb44fdd3146104dc578063f0b7f3b11461020f5763f2fde38b146101e057600080fd5b3461020c57602036600319011261020c576102096101fc613291565b6102046140b7565b614043565b80f35b80fd5b503461020c5760a036600319011261020c576024604460043582358235610234613261565b90608435916102416143a2565b6102496143cd565b6001600160801b03169081156104c45784600052602096600288526040600020610272876140f0565b156104ad57805460ff81161561049b576001600160401b0390818160101c1642106104895760501c164211610477576102b36102ad826133bc565b8761410c565b6102c56102bf826133bc565b8461410c565b82861361045b5782861461045b576102ec9060046102e38886613491565b910154906134aa565b61043f5764e8d4a510008084029064e8d4a50fff61030c83868a8c61507b565b010494808611610423575060a48992610344899361032a89336155f8565b846000526002865260066040600020015490878b87614b84565b600060018060a01b0360015416896040519c8d9687956330906fad60e21b87523360048801528601528401528660648401528760848401525af1958615610417576000966103e3575b506040519384528684015260408301526060820152827fc33c3b4ea19b40f02901978a93e787a0caa1d6fd23dfa228ae891fe96867e17160803393a46001600080516020615f3e83398151915255604051908152f35b9095508681813d8311610410575b6103fb81836132d6565b8101031261040b5751948761038d565b600080fd5b503d6103f1565b6040513d6000823e3d90fd5b858991846040519263f6daf99360e01b84526004840152820152fd5b8691859160405192631150381b60e11b84526004840152820152fd5b8786848460405192631150381b60e11b84526004840152820152fd5b60405163b2094b5960e01b8152600490fd5b604051630ee8c41760e31b8152600490fd5b604051635a90bb8d60e11b8152600490fd5b50604051634cba20ef60e01b815260048101879052fd5b604051633b59e48960e11b8152600481018390528790fd5b503461020c57602036600319011261020c57600435906040516104fe816132ba565b8181528160208201528160408201528160608201528160808201528160a08201528160c08201528160e082015261010082818301526101209280848401526101408181850152610160918083860152806101808096015261055e876140f0565b15610611579061057e6040836101a09988979695526002602052206133bc565b926040519684511515885260208501511515602089015260408501516001600160401b0380911660408a015260608601511660608901526080850151608089015260a085015160a089015260c085015160c089015260e085015160e0890152818501519163ffffffff80931690890152808501519088015281840151169086015280820151151590850152015190820152f35b604051634cba20ef60e01b815260048101889052602490fd5b503461020c578060031936011261020c576001546040516001600160a01b039091168152602090f35b503461020c5760c036600319011261020c57606435906001600160401b038216820361040b57608435906001600160401b038216820361040b576106956140b7565b61069d6143a2565b600454916106aa83614034565b6004556024356004351215610a6957816044351315610a69576106dc6044356106d7600435602435613491565b6134aa565b610a69576001600160401b0381166001600160401b0385161015610a575766038d7ea4c6800060a435108015610a42575b610a305761072a604435610725600435602435613491565b614019565b9180831380610a23575b156109e85763ffffffff83161580156109d6575b6109af57604051610758816132ba565b600181528160208201526001600160401b03861660408201526001600160401b038316606082015281608082015260043560a082015260243560c082015260443560e082015263ffffffff841661010082015260a43561012082015281610140820152816101608201528161018082015284825260026020526008610180604084209280511515845460ff61ff0060208501511515871b1692169061ffff1916171784556108136001600160401b0360408301511685613bec565b61082a6001600160401b0360608301511685613c12565b6080810151600185015560a0810151600285015560c0810151600385015560e081015160048501556005840163ffffffff6101008301511663ffffffff1982541617905561012081015160068501556007840163ffffffff6101408301511681549060ff60201b610160850151151560201b169164ffffffffff191617179055015191015560036020526040812073__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b156109ab576040519063d886284b60e01b8252600482015263ffffffff84166024820152818160448173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af480156109a05761098c575b602085807f2453c1a297c658a5b6905526d84f0b4ac79c0d9cc5fb5601664602efee53121460e08a63ffffffff8a6001600160401b038b816040519516855216888401526004356040840152602435606084015260443560808401521660a082015260a43560c0820152a2604051908152f35b61099682916132a7565b61020c5780610919565b6040513d84823e3d90fd5b5080fd5b60405163515eb6ff60e11b815263ffffffff84166004820152620f42406024820152604490fd5b50620f424063ffffffff841611610748565b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081c985b99d94818dbdd5b9d606a1b6044820152606490fd5b50620f4240831315610734565b604051630b281d1960e31b8152600490fd5b5069152d02c7e14af680000060a4351161070d565b60405163536a71af60e01b8152600490fd5b60405163040b1c7360e21b8152600480359082015260248035908201526044803590820152606490fd5b503461020c578060031936011261020c57546040516001600160a01b039091168152602090f35b503461020c57608036600319011261020c5760043560246044358135610ade613261565b610ae7856140f0565b15610bc8576001600160801b0316928315610bb257846000526002602052610b1260406000206133bc565b610b1c818461410c565b610b26818561410c565b838313610b9557838314610b9557610b4d9060e0610b448587613491565b910151906134aa565b610b79575060209364e8d4a50fff92610b6f9264e8d4a510008096029261507b565b0104604051908152f35b9160449260405192631150381b60e11b84526004840152820152fd5b509160449260405192631150381b60e11b84526004840152820152fd5b604051633b59e48960e11b815260048101859052fd5b604051634cba20ef60e01b8152600481018690528490fd5b503461020c578060031936011261020c57602060405169152d02c7e14af68000008152f35b503461020c57610c1436613235565b610c1c6140b7565b610c25826140f0565b15610d315781835260026020526040832080549060ff8260081c16610d1857620f424083059160028201548084128015610d0b575b610ce057507fca3a568dfb73dd7b7b3c0b28f130edbf4b688f534869c3de083664c43c11430e602080946007856101008a968a60087fab96f8f39935936b273ce917dbbe6675bcc26b5548edf323cdf3b1348e6b80169c9a015584600184015561ffff19161781550164ffffffffff198154169055604051908152a2604051908152a280f35b6003830154604051638a228b0d60e01b81526004810186905260248101929092526044820152606490fd5b5060038301548413610c5a565b604051634e0558fb60e01b815260048101859052602490fd5b604051634cba20ef60e01b815260048101839052602490fd5b503461020c578060031936011261020c57602060ff600080516020615f1e83398151915254166040519015158152f35b503461020c57602036600319011261020c5760406101a091600435815260026020522080549060ff6001600160401b03916001810154600282015490600383015491600484015463ffffffff93846005870154169260068701549460086007890154980154996040519b8a811615158d528c60208c8360081c1615159101528c6040838360101c1691015260501c1660608c015260808b015260a08a015260c089015260e0880152610100870152610120860152811661014085015260201c161515610160830152610180820152f35b503461020c578060031936011261020c5760405160408101908082106001600160401b03831117610e9e57610e9a9160405260058152640352e302e360dc1b602082015260405191829182613373565b0390f35b634e487b7160e01b600052604160045260246000fd5b503461020c57602036600319011261020c5760015460405163eb02c30160e01b815260048035908201529060a090829060249082906001600160a01b03165afa9081156104175760209291610f37575b5064e8d4a50fff610b6f64e8d4a51000928360018060801b03606083015116029080519060408782015191015191614435565b610f59915060a03d60a011610f5f575b610f5181836132d6565b810190613b16565b38610f04565b503d610f47565b503461020c57610f7536613235565b610f809291926140b7565b610f89836140f0565b15610f98576102099192613c98565b604051634cba20ef60e01b815260048101849052602490fd5b503461020c578060031936011261020c57600080516020615ede833981519152546040516001600160a01b039091168152602090f35b503461020c576020908160031936011261020c576004356110066143a2565b61100e6143cd565b60015460405163eb02c30160e01b8152600481018390526001600160a01b03939184169060a081602481855afa9081156111a057869084926111ab575b5060249192604051928380926331a9108f60e11b82528860048301525afa9081156111a0578391611173575b50843391160361115b57805182526002855284611096604084206133bc565b01511561114257506110a782614295565b926110b2843361501c565b60015416803b156109ab57818091602460405180948193630852cd8d60e31b83528860048401525af180156109a05761112e575b5050604051908282527ff18ca9717b47ea7629d17b5d7b2ede46e864155725629e7d0347924c2f6d112d843393a36001600080516020615f3e83398151915255604051908152f35b61113882916132a7565b61020c57806110e6565b602490516040519063b23e5f9f60e01b82526004820152fd5b60405163d86ad9cf60e01b8152336004820152602490fd5b6111939150863d8811611199575b61118b81836132d6565b810190613b89565b38611077565b503d611181565b6040513d85823e3d90fd5b602492506111c79060a03d60a011610f5f57610f5181836132d6565b9161104b565b503461020c57604036600319011261020c576111e761324b565b60015460405163eb02c30160e01b815260048035908201529060a090829060249082906001600160a01b03165afa9283156104175760209364e8d4a50fff92610b6f9291611257575b5080518582015160409092015164e8d4a51000956001600160801b0316860292909161507b565b611270915060a03d60a011610f5f57610f5181836132d6565b38611230565b503461020c5761128536613349565b9061128e6143a2565b6112966143cd565b6001600160801b038181169390919084156114bf5760015460405163eb02c30160e01b8152600481018390526001600160a01b03918216969195919060a0816024818b5afa908115610417576000916114a0575b5060405180986331a9108f60e11b825285600483015281602460209b8c935afa90811561041757600091611483575b50873391160361115b5761132d81516143fd565b805188820190815190604084019064e8d4a50fff61135983519264e8d4a5100093848a0296879261507b565b01049580871161146557506060928994928c611396936113798a336155f8565b600286519451915192856000525260066040600020015493614b84565b015116019484861161144f576001541690813b1561040b576040516361d6883d60e01b8152600481018490526001600160801b0387166024820152916000908390604490829084905af1908115610417577fa9efae0c21a2db158c2af2d36b5c18dc14d792a79dfab662442466a80095ea5f9261142292611440575b5060405191829188339784613c3d565b0390a36001600080516020615f3e8339815191525560405191168152f35b611449906132a7565b88611412565b634e487b7160e01b600052601160045260246000fd5b866044916040519163f6daf99360e01b835260048301526024820152fd5b61149a9150893d8b116111995761118b81836132d6565b89611319565b6114b9915060a03d60a011610f5f57610f5181836132d6565b886112ea565b604051633b59e48960e11b815260048101869052602490fd5b503461020c578060031936011261020c576020604051620f42408152f35b503461020c578060031936011261020c5761150f6140b7565b600080516020615ede83398151915280546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461020c5761157036613235565b919061157b816140f0565b1561166e5780825260209260028452611596604084206133bc565b906115a1828261410c565b60e08201519081810191821285821290801582169115161761165a57916115c991869361419c565b92845260038252604084206115f2604051948593849363694f552560e01b855260048501613bcf565b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af491821561164e5791611621575b50604051908152f35b90508181813d8311611647575b61163881836132d6565b8101031261040b575138611618565b503d61162e565b604051903d90823e3d90fd5b634e487b7160e01b85526011600452602485fd5b60249060405190634cba20ef60e01b82526004820152fd5b503461020c57602036600319011261020c576001600160401b036004358181116117655736602382011215611765578060040135918211611765573660248383010111611765576116e3916116d96140b7565b6024369201613312565b6116eb6143a2565b600080516020615f1e833981519152600160ff198254161790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a17f375c0abd968f4602b557f6ac9a48ffc89820233aa9becc5d7ff1176fd09eafff6040518061175f339482613373565b0390a280f35b8280fd5b503461020c57602036600319011261020c5760406080916004358152600360205220600181015490600263ffffffff91015490604051928181168452818160201c16602085015260401c1660408301526060820152f35b503461020c578060031936011261020c576020600454604051908152f35b503461020c576117ed36613349565b6117f89291926143a2565b6118006143cd565b6001600160801b038316156121185760015460405163eb02c30160e01b815260048101849052906001600160a01b031660a082602481845afa918215610417576000926120f1575b506020602491604051928380926331a9108f60e11b82528860048301525afa908115610417576000916120d2575b50336001600160a01b039091160361115b5761189281516143fd565b60608101516001600160801b03908116908516116120b157805160208201805160408401805164e8d4a5100094919392859264e8d4a50fff926118e1926001600160801b038d16860292614435565b01049480861061209357508351905191519281600052600260205260406000206119196119126006830154926133bc565b868661419c565b90916040516330ed1f5d60e01b8152816004820152670de0b6b3a7640000602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561041757600091612061575b508060001981011161144f5760001981016001600160801b038d16860211611d3557506040516316cf339960e21b81526001600160801b038c169094026004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041757600093611d01575b506040519263ec6e92cd60e01b8452600484015260208360248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041757600093611ccd575b50604051926316cf339960e21b8452670de0b6b3a76400006004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041757600093611c99575b50662386f26fc1000083108015611c87575b611c755773__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90846000526003602052604060002091803b1561040b578493600093611ad0604051978895869485946330f27d1f60e01b86526004860161346c565b03915af490811561041757600080516020615ebe83398151915292602092611c66575b50604051908152a45b611b06823361501c565b606001516001600160801b03848116918116919091039390841161144f576001600160801b0384169283611bda576001546001600160a01b0316803b1561040b5760008091602460405180948193630852cd8d60e31b83528760048401525af18015610417576040967fe3a918fd34698242cc99d5ba0987edaa47d8f5b8ed601ef29e08a9b7d72ecc49928692611bcb575b505b611baa8851928392339784613c3d565b0390a36001600080516020615f3e8339815191525582519182526020820152f35b611bd4906132a7565b88611b98565b6001546001600160a01b0316803b1561040b576040516361d6883d60e01b8152600481018390526001600160801b0387166024820152906000908290604490829084905af18015610417576040967fe3a918fd34698242cc99d5ba0987edaa47d8f5b8ed601ef29e08a9b7d72ecc49928692611c57575b50611b9a565b611c60906132a7565b88611c51565b611c6f906132a7565b8a611af3565b60405163a2f9e7b560e01b8152600490fd5b5068056bc75e2d631000008311611a7b565b90926020823d602011611cc5575b81611cb4602093836132d6565b8101031261020c575051918a611a69565b3d9150611ca7565b9092506020813d602011611cf9575b81611ce9602093836132d6565b8101031261040b5751918a611a1b565b3d9150611cdc565b9092506020813d602011611d2d575b81611d1d602093836132d6565b8101031261040b5751918a6119db565b3d9150611d10565b919a9799909892979296959493919291611d5e60001985016001600160801b0385168302613c5f565b600019810190811161144f57611d7c6103e891600019870190614398565b1161203957600097906001600160801b038416025b8015158061202e575b156120095760001985018111156120035760001985015b604051906316cf339960e21b82528060048301528c602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041757600092611fcf575b506040519163ec6e92cd60e01b8352600483015260208260248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041757600092611f9b575b50604051916316cf339960e21b8352670de0b6b3a76400006004840152602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041757600092611f67575b50662386f26fc1000082108015611f55575b611c755787600052600360205260406000209273__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b1561040b578f938d600091611eea8660405198899485946330f27d1f60e01b86526004860161346c565b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af4938415610417578a8a600080516020615ebe83398151915260208f9497611f3a98611f409a611f46575b50604051908152a4613c8b565b98614034565b97611d91565b611f4f906132a7565b38611f2d565b5068056bc75e2d631000008211611e97565b90916020823d602011611f93575b81611f82602093836132d6565b8101031261020c575051908f611e85565b3d9150611f75565b90916020823d602011611fc7575b81611fb6602093836132d6565b8101031261020c575051908f611e37565b3d9150611fa9565b90916020823d602011611ffb575b81611fea602093836132d6565b8101031261020c575051908f611df7565b3d9150611fdd565b80611db1565b9750985098965098505050505015611afc575b6040516332581cb160e01b8152600490fd5b506103e88910611d9a565b604051633b59e48960e11b81526001600160801b038085169092029091166004820152602490fd5b90506020813d60201161208b575b8161207c602093836132d6565b8101031261040b57518c611968565b3d915061206f565b604490866040519163f6daf99360e01b835260048301526024820152fd5b604051633b59e48960e11b81526001600160801b0385166004820152602490fd5b6120eb915060203d6020116111995761118b81836132d6565b85611876565b602491925061211060209160a03d60a011610f5f57610f5181836132d6565b929150611848565b604051633b59e48960e11b81526001600160801b0384166004820152602490fd5b503461020c578060031936011261020c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003612192576020604051600080516020615efe8339815191528152f35b60405163703e46dd60e11b8152600490fd5b50604036600319011261020c576121b9613291565b6024356001600160401b0381116117655736602382011215611765576121e9903690602481600401359101613312565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116308114908115612399575b506121925761222c6140b7565b6040516352d1902d60e01b8152908316926020918281600481885afa869181612366575b5061226e57604051634c9c8ce360e01b815260048101869052602490fd5b938594600080516020615efe8339815191529081810361234e5750823b156123355780546001600160a01b0319168217905560405185917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8380a2845115612318575080848461230b96519101845af4903d1561230f573d6122ef816132f7565b906122fd60405192836132d6565b81528581943d92013e615e5a565b5080f35b60609250615e5a565b935050505034612326575080f35b63b398979f60e01b8152600490fd5b604051634c9c8ce360e01b815260048101839052602490fd5b60249060405190632a87526960e21b82526004820152fd5b9091508381813d8311612392575b61237e81836132d6565b8101031261238e57519038612250565b8680fd5b503d612374565b905081600080516020615efe833981519152541614153861221f565b503461020c57604036600319011261020c576123cf613291565b6001600160a01b0390602435828116919082900361040b577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009182549360ff8560401c1615926001600160401b03861695861580612572575b60018098149081612568575b15908161255f575b5061254d5767ffffffffffffffff198116871786558461252e575b501680158015612526575b6125145761246e615bde565b612476615bde565b61247f33614043565b612487615bde565b61248f615bde565b612497615bde565b61249f615bde565b600080516020615f3e83398151915285905585546001600160a01b0319908116909117865584541617835560048390556124d7578280f35b805460ff60401b191690556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a138808280f35b60405163d92e233d60e01b8152600490fd5b508115612462565b68ffffffffffffffffff19166801000000000000000117855538612457565b60405163f92ee8a960e01b8152600490fd5b9050153861243c565b303b159150612434565b5084612428565b503461020c57606036600319011261020c576004356001600160401b0360243581811680820361040b5760443592831680840361040b576125b86140b7565b6125c1856140f0565b15612645578486526002602052604086209260ff845460081c1661262c5781831015610a57577f66e3554b58ad477fe2e052540bbd9b1ba199fbfd763c4d2848576d2ed8722c64948461261961261e93604097613bec565b613c12565b82519182526020820152a280f35b604051634e0558fb60e01b815260048101879052602490fd5b604051634cba20ef60e01b815260048101869052602490fd5b503461020c5761266d36613277565b9291906126786140b7565b612681826140f0565b15610d31578183526020936002855261269c604085206133bc565b916126a7838261410c565b6126b1838361410c565b8181136126ed57916126c491869361419c565b92845260038252604084206115f2604051948593849363049bebd960e31b855260048501613bcf565b60449160405191631150381b60e11b835260048301526024820152fd5b503461020c5761271936613277565b929190612725826140f0565b15610d315781835260209360028552612740604085206133bc565b9161274b838261410c565b612755838361410c565b8181136126ed57916115c991869361419c565b503461020c578060031936011261020c576127816140b7565b600080516020615f1e833981519152805460ff8116156127f35760ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1337ff5cbf596165cc457b2cd92e8d8450827ee314968160a5696402d75766fc52caf8280a280f35b604051638dfc202b60e01b8152600490fd5b503461020c57604036600319011261020c5761281f61324b565b60015460405163eb02c30160e01b815260048035908201529060a090829060249082906001600160a01b03165afa9283156104175760209364e8d4a50fff92610b6f929161288f575b5080518582015160409092015164e8d4a51000956001600160801b03168602929091614435565b6128a8915060a03d60a011610f5f57610f5181836132d6565b38612868565b503461020c578060031936011261020c57602060405166038d7ea4c680008152f35b503461020c576128df36613235565b6128e76143a2565b6128ef6143cd565b60015460405163eb02c30160e01b815260048101849052906001600160a01b031660a082602481845afa91821561041757600092613045575b506020602491604051928380926331a9108f60e11b82528860048301525afa90811561041757600091613026575b50336001600160a01b039091160361115b5761297281516143fd565b64e8d4a51000908160018060801b036060830151160291815191602081019164e8d4a50fff6129ab868551966040860197885191614435565b010494808610612093575051905191519281600052600260205260406000206129db6119126006830154926133bc565b90916040516330ed1f5d60e01b8152816004820152670de0b6b3a7640000602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561041757600091612ff4575b5060001990808281011161144f578082018611612d07575050604051936316cf339960e21b85526004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041757600093612cd3575b506040519263ec6e92cd60e01b8452600484015260208360248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041757600093612c9f575b50604051926316cf339960e21b8452670de0b6b3a76400006004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041757600093612c6b575b50662386f26fc1000083108015612c59575b611c755773__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90846000526003602052604060002091803b1561040b578493600093612b7c604051978895869485946330f27d1f60e01b86526004860161346c565b03915af490811561041757600080516020615ebe83398151915292602092612c4a575b50604051908152a45b612bb2813361501c565b6001546001600160a01b031691823b1561040b5760008093602460405180968193630852cd8d60e31b83528660048401525af192831561041757602093612c3b575b50604051908282527f467bc11eddf702a2091fefc23d3064f17939ba1005bd43304f15604c9b6f2a9b843393a36001600080516020615f3e83398151915255604051908152f35b612c44906132a7565b83612bf4565b612c53906132a7565b88612b9f565b5068056bc75e2d631000008311612b27565b90926020823d602011612c97575b81612c86602093836132d6565b8101031261020c5750519188612b15565b3d9150612c79565b9092506020813d602011612ccb575b81612cbb602093836132d6565b8101031261040b57519188612ac7565b3d9150612cae565b9092506020813d602011612cff575b81612cef602093836132d6565b8101031261040b57519188612a87565b3d9150612ce2565b90919794612d1e83839c98959c9996990182613c5f565b83810190811161144f57612d386103e89185850190614398565b11612fd257956000965b80151580612fc7575b15612fa557828401811115612f9f578383015b604051906316cf339960e21b82528060048301528b602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041757600092612f6b575b506040519163ec6e92cd60e01b8352600483015260208260248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041757600092612f37575b50604051916316cf339960e21b8352670de0b6b3a76400006004840152602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041757600092612f03575b50662386f26fc1000082108015612ef1575b611c755786600052600360205260406000209273__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b1561040b5760008f948d90612e978660405198899485946330f27d1f60e01b86526004860161346c565b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af4938415610417578989600080516020615ebe8339815191526020612ee5978f95612eeb9a611f465750604051908152a4613c8b565b97614034565b96612d42565b5068056bc75e2d631000008211612e44565b90916020823d602011612f2f575b81612f1e602093836132d6565b8101031261020c575051908e612e32565b3d9150612f11565b90916020823d602011612f63575b81612f52602093836132d6565b8101031261020c575051908e612de4565b3d9150612f45565b90916020823d602011612f97575b81612f86602093836132d6565b8101031261020c575051908e612da4565b3d9150612f79565b80612d5e565b985099505050505050505015612ba8576040516332581cb160e01b8152600490fd5b506103e88810612d4b565b604051633b59e48960e11b81526001600160801b039091166004820152602490fd5b90506020813d60201161301e575b8161300f602093836132d6565b8101031261040b57518a612a2a565b3d9150613002565b61303f915060203d6020116111995761118b81836132d6565b84612956565b602491925061306460209160a03d60a011610f5f57610f5181836132d6565b929150612928565b503461020c5761307b36613217565b91613085846140f0565b156130aa579061309892916020946134ca565b6040516001600160801b039091168152f35b604051634cba20ef60e01b815260048101859052602490fd5b503461020c57602036600319011261020c5760206130e2600435614295565b604051908152f35b503461020c576130f936613217565b6131049391936140b7565b61310d826140f0565b15610d31578185526002602052613126604086206133bc565b613130818561410c565b61313a818661410c565b8484136131f95761314d8691868661419c565b848352600360205260408320929173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90813b156131f557859461319a604051968795869485946330f27d1f60e01b86526004860161346c565b03915af480156131ea576131c6575b506020600080516020615ebe83398151915291604051908152a480f35b600080516020615ebe83398151915291956131e26020926132a7565b9591506131a9565b6040513d88823e3d90fd5b8380fd5b6044848660405191631150381b60e11b835260048301526024820152fd5b608090600319011261040b5760043590602435906044359060643590565b604090600319011261040b576004359060243590565b602435906001600160801b038216820361040b57565b606435906001600160801b038216820361040b57565b606090600319011261040b57600435906024359060443590565b600435906001600160a01b038216820361040b57565b6001600160401b038111610e9e57604052565b6101a081019081106001600160401b03821117610e9e57604052565b90601f801991011681019081106001600160401b03821117610e9e57604052565b6001600160401b038111610e9e57601f01601f191660200190565b92919261331e826132f7565b9161332c60405193846132d6565b82948184528183011161040b578281602093846000960137010152565b606090600319011261040b57600435906024356001600160801b038116810361040b579060443590565b6020808252825181830181905290939260005b8281106133a857505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501613386565b906040516133c9816132ba565b61018060088294805460ff81161515855260ff81841c16151560208601526001600160401b0390818160101c16604087015260501c16606085015260018101546080850152600281015460a0850152600381015460c0850152600481015460e085015260ff63ffffffff806005840154166101008701526006830154610120870152600783015490811661014087015260201c1615156101608501520154910152565b90815263ffffffff918216602082015291166040820152606081019190915260800190565b8181039291600013801582851316918412161761144f57565b81156134b4570790565b634e487b7160e01b600052601260045260246000fd5b90928015613b0d578160005260026020526134e860406000206133bc565b6134f2818661410c565b6134fc818561410c565b838513613aef57838514613aef5761351a9060e0610b448787613491565b613ad1576101009082600052600260205261354961353b60406000206133bc565b80956101208201519761419c565b9473__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__9085600052600360205261358260406000209163ffffffff968791015116614358565b60405163694f552560e01b80825260048201939093526000602482015295166044860152602085606481855af494851561041757600095613a9a575b506020939495600052600384526040600020906135e960405198899586948594855260048501613bcf565b03915af492831561041757600093613a66575b508115613a54578215613a545764e8d4a5100002906040516330ed1f5d60e01b8152846004820152670de0b6b3a764000080602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115610417578492600092613a1d575b50935b613898575050604051916330ed1f5d60e01b8352816004840152602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561041757839260009261385f575b506136c5926136bf91613c8b565b90613c8b565b90604051916316cf339960e21b83526004830152602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156104175760009161382d575b506040519063360816cf60e01b8252600482015260208160248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115610417576000916137fb575b50604051916330ed1f5d60e01b83526004830152602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af48015610417576000906137c4575b6001600160801b03915064e8d4a5100090048181116137ab571690565b604051633b59e48960e11b815260048101839052602490fd5b506020813d6020116137f3575b816137de602093836132d6565b8101031261040b5764e8d4a51000905161378e565b3d91506137d1565b90506020813d602011613825575b81613816602093836132d6565b8101031261040b57513861374a565b3d9150613809565b90506020813d602011613857575b81613848602093836132d6565b8101031261040b57513861370a565b3d915061383b565b925090506020823d602011613890575b8161387c602093836132d6565b8101031261040b57905182916136c56136b1565b3d915061386f565b909281841115613a1757815b6040516316cf339960e21b815281600482015287602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115610417576000916139e5575b506040519063ec6e92cd60e01b8252600482015260208160248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115610417576000916139b3575b50604051926330ed1f5d60e01b84526004840152602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af480156104175760009061397f575b613978925094613c8b565b9081613664565b506020823d6020116139ab575b81613999602093836132d6565b8101031261040b57613978915161396d565b3d915061398c565b90506020813d6020116139dd575b816139ce602093836132d6565b8101031261040b575138613929565b3d91506139c1565b90506020813d602011613a0f575b81613a00602093836132d6565b8101031261040b5751386138e9565b3d91506139f3565b836138a4565b925090506020823d602011613a4c575b81613a3a602093836132d6565b8101031261040b578391519038613661565b3d9150613a2d565b604051635fba374760e11b8152600490fd5b9092506020813d602011613a92575b81613a82602093836132d6565b8101031261040b575191386135fc565b3d9150613a75565b9394506020843d602011613ac9575b81613ab6602093836132d6565b8101031261040b576020935194936135be565b3d9150613aa9565b6044848460405191631150381b60e11b835260048301526024820152fd5b6044858560405191631150381b60e11b835260048301526024820152fd5b50505050600090565b908160a091031261040b57604051906001600160401b039060a0830182811184821017610e9e576040908152815184526020808301519085015281810151908401526060810151906001600160801b038216820361040b5760809160608501520151908116810361040b57608082015290565b9081602091031261040b57516001600160a01b038116810361040b5790565b919060206040840193670de0b6b3a764000081520152565b9081602091031261040b575190565b90815263ffffffff91821660208201529116604082015260600190565b9069ffffffffffffffff000082549160101b169069ffffffffffffffff00001916179055565b805467ffffffffffffffff60501b191660509290921b67ffffffffffffffff60501b16919091179055565b6001600160801b03918216815291166020820152604081019190915260600190565b9190820180921161144f57565b60001981019190821161144f57565b906103e891820391821161144f57565b9190820391821161144f57565b90816000526002602052604060002060ff815460081c161561400057600781015460ff8160201c16613ffa578215613fc75760049263ffffffff821680613fc157506001915b600154604051635e4b419360e11b81529560209187919082906001600160a01b03165afa94851561041757600095613f8d575b5084831015613f3c5750613d259082613c5f565b91838311613f34575b6001546001600160a01b0316825b848110613dcf57505063ffffffff83166007820154948163ffffffff19871617600784015584149485613db1575b505050600019820191821161144f577fcf156953c2640827200d7348c90cddc0fd140a8dd5f3cfd29bf0b2a855c34b189260609260405192835260208301526040820152a2565b64ffffffffff191617600160201b1760079190910155388080613d6a565b604051634f558e7960e01b815260048101829052602491906020818481875afa90811561041757600091613ef9575b5015613ed35760405163eb02c30160e01b81526004810182905260a09081818581885afa908115610417578a92600092613edc575b50505103613ed357613e4481614295565b602060405180946331a9108f60e11b825284600483015281875afa928315610417577f1a81eb5d53aa7bec98cadd0a6303be87e540f77ba90e63cd945e49b8eb697b0a60406001958593600091613eb4575b5081519480865215156020860152868060a01b031693a35b01613d3c565b613ecd915060203d6020116111995761118b81836132d6565b38613e96565b60019150613eae565b613ef29250803d10610f5f57610f5181836132d6565b3880613e33565b90506020813d602011613f2c575b81613f14602093836132d6565b8101031261040b5751801515810361040b5738613dfe565b3d9150613f07565b839250613d2e565b7fcf156953c2640827200d7348c90cddc0fd140a8dd5f3cfd29bf0b2a855c34b1894506060939150600160201b60079160ff60201b19161791015560405190808252602082015260016040820152a2565b9094506020813d602011613fb9575b81613fa9602093836132d6565b8101031261040b57519338613d11565b3d9150613f9c565b91613cde565b60405162461bcd60e51b815260206004820152600b60248201526a07363616e4c696d69743d360ac1b6044820152606490fd5b50505050565b60405163b23e5f9f60e01b815260048101849052602490fd5b81156134b457600160ff1b811460001983141661144f570590565b600019811461144f5760010190565b6001600160a01b0390811690811561409e57600080516020615ede83398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b604051631e4fbdf760e01b815260006004820152602490fd5b600080516020615ede833981519152546001600160a01b031633036140d857565b60405163118cdaa760e01b8152336004820152602490fd5b600052600260205263ffffffff60056040600020015416151590565b9060a081018051808412801561418f575b614164575060e061413261413d925185613491565b9201918251906134aa565b614145575050565b6044925051604051916382fe647b60e01b835260048301526024820152fd5b60c0830151604051638a228b0d60e01b81526004810186905260248101929092526044820152606490fd5b5060c0830151841361411d565b92906141df6141ce916141d76141b860a0870197885190613491565b9160e087019263ffffffff958691855190614019565b16975190613491565b905190614019565b600019810190811360011661144f5781610100911693015116808410908161428b575b501561424b5781831161421157565b60405162461bcd60e51b8152602060048201526012602482015271496e76616c69642072616e67652062696e7360701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527752616e67652062696e73206f7574206f6620626f756e647360401b6044820152606490fd5b9050821038614202565b60015460405163eb02c30160e01b8152600481019290925260a090829060249082906001600160a01b03165afa90811561041757600091614339575b50805160005260026020526142e960406000206133bc565b6020810151156143325760806020830151910151809113159081614324575b501561431e57606001516001600160801b031690565b50600090565b905060408201511338614308565b5050600090565b614352915060a03d60a011610f5f57610f5181836132d6565b386142d1565b63ffffffff908116600019019190821161144f57565b9081526000602082015263ffffffff909116604082015260600190565b80156134b4576000190490565b81156134b4570490565b60ff600080516020615f1e83398151915254166143bb57565b60405163d93c066560e01b8152600490fd5b600080516020615f3e83398151915260028154146143eb5760029055565b604051633ee5aeb560e01b8152600490fd5b600052600260205260406000205460ff81161561049b576001600160401b0390818160101c1642106104895760501c16421161047757565b91929092614455614450846000526002602052604060002090565b6133bc565b9361446185838361419c565b6101208701516040516330ed1f5d60e01b815260048101829052670de0b6b3a764000060248201529096929060208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af480156148c1576144c291600091614b65575b50613c6c565b978887116144da575050506144d795506157b7565b90565b909196929450614547935073__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90602061452b61452661010061451a8a6000526003602052604060002090565b94015163ffffffff1690565b614358565b6040518097819263694f552560e01b958684526004840161436e565b0381855af49485156148c157600095614b3f575b5061457460209495966000526003602052604060002090565b9061458d604051998a9586948594855260048501613bcf565b03915af49384156148c157600094614b1e575b508115613a54576103e86145c5866145c06145bb8288613c5f565b613c6c565b614398565b11612118579093926000919082905b84151580614b13575b15614b055761461e9596878611600014614afe5787915b6040516316cf339960e21b8152600481018490526024810186905297602090899081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156148c15761466d98602091600091614ae1575b50604051809a819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156148c1576146b798602091600091614ac4575b50604051809a81926316cf339960e21b835260048301613ba8565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156148c157600098614aa3575b506146e98861438b565b811161493a575b80151580614929575b613a54576040516330ed1f5d60e01b815260048101829052602481019890985260208860448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156148c157600098614900575b50876147546147599284613c8b565b613c5f565b908115613a545781811161478e575b508115613a54576147849161477e919796613c8b565b93614034565b95949592936145d4565b6040516316cf339960e21b8152600481019190915260248101829052909260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49182156148c1576147ff926020916000916148e3575b506040518094819263360816cf60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49182156148c157614857926020916000916148c6575b506040516330ed1f5d60e01b815260048101889052602481019190915292839081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156148c15761488992600092614890575b50613c5f565b9138614768565b6148b391925060203d6020116148ba575b6148ab81836132d6565b810190613bc0565b9038614883565b503d6148a1565b610417565b6148dd9150823d84116148ba576148ab81836132d6565b3861482e565b6148fa9150823d84116148ba576148ab81836132d6565b386147df565b6147549850906149216147599260203d6020116148ba576148ab81836132d6565b985090614745565b506149338161438b565b88116146f9565b9650905061495261494a85613c7b565b86858961565b565b90858211614a9b575b6040516316cf339960e21b8152600481018390526024810185905260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156148c1576149c991602091600091614a7e575b506040518093819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156148c157614a1391602091600091614a61575b50604051809381926316cf339960e21b835260048301613ba8565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156148c157600091614a42575b50966146f0565b614a5b915060203d6020116148ba576148ab81836132d6565b38614a3b565b614a789150823d84116148ba576148ab81836132d6565b386149f8565b614a959150823d84116148ba576148ab81836132d6565b386149a9565b85915061495b565b614abd91985060203d6020116148ba576148ab81836132d6565b96386146df565b614adb9150823d84116148ba576148ab81836132d6565b3861469c565b614af89150823d84116148ba576148ab81836132d6565b3861464d565b85916145f4565b50945050509050613a545790565b506103e884106145dd565b614b3891945060203d6020116148ba576148ab81836132d6565b92386145a0565b6020949550614b5d61457491863d88116148ba576148ab81836132d6565b95945061455b565b614b7e915060203d6020116148ba576148ab81836132d6565b386144bc565b9193929092826000526002602052614ba261191260406000206133bc565b90916040516330ed1f5d60e01b8152816004820152670de0b6b3a7640000602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561041757600091614fea575b508060001981011161144f5760001981018511614daa5750604051936316cf339960e21b85526004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041757600093614d76575b506040519263ec6e92cd60e01b8452600484015260208360248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041757600093614d42575b50662386f26fc1000083108015614d30575b611c755773__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90846000526003602052604060002091803b1561040b578493600093614cf4604051978895869485946330f27d1f60e01b86526004860161346c565b03915af490811561041757600080516020615ebe83398151915292602092614d21575b50604051908152a4565b614d2a906132a7565b38614d17565b5068056bc75e2d631000008311614c9f565b9092506020813d602011614d6e575b81614d5e602093836132d6565b8101031261040b57519138614c8d565b3d9150614d51565b9092506020813d602011614da2575b81614d92602093836132d6565b8101031261040b57519138614c4d565b3d9150614d85565b93614dc16000999894969297939919860182613c5f565b8060001981011161144f576103e890614de1906000198881019101614398565b11612fd257936000945b80151580614fdf575b15614fcf576000198201811115614fc95760001982015b604051906316cf339960e21b825280600483015289602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041757600092614f95575b506040519163ec6e92cd60e01b8352600483015260208260248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041757600092614f61575b50662386f26fc1000082108015614f4f575b611c755784600052600360205260406000209273__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b1561040b5760008a8e95614ef58660405198899485946330f27d1f60e01b86526004860161346c565b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af4938415610417578787600080516020615ebe8339815191526020614f43978d95614f499a611f465750604051908152a4613c8b565b95614034565b94614deb565b5068056bc75e2d631000008211614ea3565b9091506020813d602011614f8d575b81614f7d602093836132d6565b8101031261040b57519038614e91565b3d9150614f70565b9091506020813d602011614fc1575b81614fb1602093836132d6565b8101031261040b57519038614e51565b3d9150614fa4565b80614e0b565b9798505050505050505061201c57565b506103e88610614df4565b90506020813d602011615014575b81615005602093836132d6565b8101031261040b575138614bf1565b3d9150614ff8565b81615025575050565b60005460405163a9059cbb60e01b60208201526001600160a01b039283166024820152604480820194909452928352608083019291166001600160401b03831182841017610e9e5761507992604052615dfe565b565b91929092615096614450846000526002602052604060002090565b936150a285838361419c565b6101208701516040516330ed1f5d60e01b815260048101829052670de0b6b3a764000060248201529096929060208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af480156148c15761510291600091614b655750613c6c565b97888711615117575050506144d79550615c1f565b6151699550839297945061514d614526610100615141602095976000526003602052604060002090565b93015163ffffffff1690565b60405163694f552560e01b81529687928392906004840161436e565b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af49384156148c1576000946155d0575b50906151a96020926000526003602052604060002090565b6151c7604051978893849363694f552560e01b855260048501613bcf565b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af49384156148c1576000946155af575b508115613a54576103e861520a866145c06145bb8288613c5f565b11612118579093926000919082905b841515806155a4575b15614b05576152639596878611600014614afe576040516316cf339960e21b8152600481018990526024810185905296889290602090899081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156148c1576152b198602091600091614ae15750604051809a819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156148c157600098615583575b506152e38861438b565b81116154a7575b80151580615496575b613a54576040516330ed1f5d60e01b815260048101829052602481019890985260208860448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156148c15760009861546d575b508761475461534e9284613c8b565b9281841115613a54576040516316cf339960e21b815260048101859052602481019290925260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49182156148c1576153c5926020916000916148e357506040518094819263360816cf60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49182156148c15761541c926020916000916148c657506040516330ed1f5d60e01b815260048101889052602481019190915292839081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156148c15761544d926000926148905750613c5f565b918115613a54576154639161477e919796613c8b565b9594959293615219565b61475498509061548e61534e9260203d6020116148ba576148ab81836132d6565b98509061533f565b506154a08161438b565b88116152f3565b965090506154b761494a85613c7b565b9085821161557b575b6040516316cf339960e21b8152600481018390526024810185905260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156148c15761552d91602091600091614a7e57506040518093819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156148c15760009161555c575b50966152ea565b615575915060203d6020116148ba576148ab81836132d6565b38615555565b8591506154c0565b61559d91985060203d6020116148ba576148ab81836132d6565b96386152d9565b506103e88410615222565b6155c991945060203d6020116148ba576148ab81836132d6565b92386151ef565b6020929194506155ef6151a991843d86116148ba576148ab81836132d6565b94919250615191565b81615601575050565b6000546040516323b872dd60e01b60208201526001600160a01b03928316602482015230604482015260648082019490945292835260a083019291166001600160401b03831182841017610e9e5761507992604052615dfe565b9091939280156157b25761566f8186613c5f565b60001981019190821161144f5761568591614398565b9182156157a9575b6040516330ed1f5d60e01b80825260048201839052670de0b6b3a764000060248301529260209173__$cbaf8988f3c8d5491808e1d52afb16035a$__908381604481855af4801561041757849160009161577a575b509560446040518094819382528860048301526802b5e3af16b188000060248301525af49283156104175760009361574a575b50501161573f575b50808210156157375750915b8083116157335750565b9150565b905091615729565b600a9150043861571d565b9080929350813d8311615773575b61576281836132d6565b8101031261040b5751903880615715565b503d615758565b82819392503d83116157a2575b61579181836132d6565b8101031261040b57839051386156e2565b503d615787565b6001925061568d565b505050565b92919061583b94916157d6614450866000526002602052604060002090565b9373__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__615800876000526003602052604060002090565b9261581661452661010089015163ffffffff1690565b9460409889519663694f552560e01b90818952888060209e8f9360049b8c840161436e565b0381885af4998a156148c1578c8c9960009c615bae575b509188969593918895938c73__$cbaf8988f3c8d5491808e1d52afb16035a$__809d5180809d81946316cf339960e21b9e8f845283019161589e92908152602081019190915260400190565b03915af49889156148c1578f90998f8c8e916158db9d600094615b8f575b505163ec6e92cd60e01b81529081019283529b8c928391829160200190565b03915af49889156148c1578f90998f8c8b8f9261590c9e600095615b70575b50519d8e948593849384528301613ba8565b03915af49687156148c1578f928f92908c9161595f9c60009b615b4d575b5061593690898961419c565b61594d889e929e6000526003602052604060002090565b95519d8e968795869586528501613bcf565b03915af49687156148c157600097615b2e575b5061597c8561438b565b8711615b1857505050506159bc9089615995858a613c8b565b918a51809481926330ed1f5d60e01b988984528a8401908152602081019190915260400190565b0381895af49081156148c1576159d992600092615b005750613c5f565b958615615af05786811115615ae2578891615a0a895198899384938452878401908152602081019190915260400190565b0381865af49485156148c157615a42958891600091615ac5575b5087518097819263360816cf60e01b83528683019190602083019252565b0381865af49586156148c1578795600097615aa2575b505190815290810192835260208301949094528391829081906040015b03915af49182156148c157600092615a8c57505090565b6144d79250803d106148ba576148ab81836132d6565b615a75919750615abe90873d89116148ba576148ab81836132d6565b9690615a58565b615adc9150823d84116148ba576148ab81836132d6565b38615a24565b505050505050505050600090565b8751635fba374760e11b81528490fd5b6148b39192508b3d8d116148ba576148ab81836132d6565b9750975097509750505050506144d79450614435565b615b469197508d803d106148ba576148ab81836132d6565b9538615972565b615936919b50615b6990873d89116148ba576148ab81836132d6565b9a9061592a565b615b88919550863d88116148ba576148ab81836132d6565b93386158fa565b615ba7919450853d87116148ba576148ab81836132d6565b92386158bc565b819c5091615bd08a98979593838b989694903d106148ba576148ab81836132d6565b9c9193955091939596615852565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615615c0d57565b604051631afcd79f60e31b8152600490fd5b929190615c3e94916157d6614450866000526002602052604060002090565b0381885af4998a156148c1578c8c9960009c615dce575b509188969593918895938c73__$cbaf8988f3c8d5491808e1d52afb16035a$__809d5180809d81946316cf339960e21b9e8f8452830191615ca192908152602081019190915260400190565b03915af49889156148c1578f90998f8c8e91615cdd9d600094615b8f57505163ec6e92cd60e01b81529081019283529b8c928391829160200190565b03915af49687156148c1578f928f92908c91615d069c60009b615b4d575061593690898961419c565b03915af49687156148c157600097615daf575b508a15615d9f57615d298561438b565b8711615d895750505050615d429089615995858a613c8b565b0381895af49081156148c157615d5f92600092615b005750613c5f565b86811115615ae2578891615a0a895198899384938452878401908152602081019190915260400190565b9750975097509750505050506144d7945061507b565b8b51635fba374760e11b81528890fd5b615dc79197508d803d106148ba576148ab81836132d6565b9538615d19565b819c5091615df08a98979593838b989694903d106148ba576148ab81836132d6565b9c9193955091939596615c55565b906000602091828151910182855af115610417576000513d615e5157506001600160a01b0381163b155b615e2f5750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415615e28565b90615e815750805115615e6f57805190602001fd5b60405163d6bda27560e01b8152600490fd5b81511580615eb4575b615e92575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15615e8a56fe221f633c06e4399f005a7cec7ba7c4ff189e3fe19092cbafe32a5f176ffc797f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a164736f6c6343000818000a",
   "linkReferences": {
     "contracts/libraries/FixedPointMath.sol": {
       "FixedPointMathU": [
         {
           "length": 20,
-          "start": 7287
+          "start": 6517
+        },
+        {
+          "length": 20,
+          "start": 6632
+        },
+        {
+          "length": 20,
+          "start": 6696
         },
         {
           "length": 20,
-          "start": 7403
+          "start": 6774
         },
         {
           "length": 20,
-          "start": 7467
+          "start": 7684
         },
         {
           "length": 20,
-          "start": 7537
+          "start": 7748
         },
         {
           "length": 20,
-          "start": 8575
+          "start": 7826
         },
         {
           "length": 20,
-          "start": 8639
+          "start": 10807
         },
         {
           "length": 20,
-          "start": 8717
+          "start": 10900
         },
         {
           "length": 20,
-          "start": 10688
+          "start": 10964
         },
         {
           "length": 20,
-          "start": 10784
+          "start": 11042
         },
         {
           "length": 20,
-          "start": 10848
+          "start": 11697
         },
         {
           "length": 20,
-          "start": 10918
+          "start": 11761
         },
         {
           "length": 20,
-          "start": 11639
+          "start": 11839
         },
         {
           "length": 20,
-          "start": 11703
+          "start": 13932
         },
         {
           "length": 20,
-          "start": 11781
+          "start": 14012
         },
         {
           "length": 20,
-          "start": 14433
+          "start": 14103
         },
         {
           "length": 20,
-          "start": 14840
+          "start": 14167
         },
         {
           "length": 20,
-          "start": 14919
+          "start": 14236
         },
         {
           "length": 20,
-          "start": 15012
+          "start": 14582
         },
         {
           "length": 20,
-          "start": 15114
+          "start": 14646
         },
         {
           "length": 20,
-          "start": 15279
+          "start": 14715
         },
         {
           "length": 20,
-          "start": 15358
+          "start": 17606
         },
         {
           "length": 20,
-          "start": 15446
+          "start": 18003
         },
         {
           "length": 20,
-          "start": 15737
+          "start": 18082
         },
         {
           "length": 20,
-          "start": 15816
+          "start": 18156
+        },
+        {
+          "length": 20,
+          "start": 18258
+        },
+        {
+          "length": 20,
+          "start": 18405
+        },
+        {
+          "length": 20,
+          "start": 18484
+        },
+        {
+          "length": 20,
+          "start": 18572
+        },
+        {
+          "length": 20,
+          "start": 18863
+        },
+        {
+          "length": 20,
+          "start": 18942
         },
         {
           "length": 20,
-          "start": 15909
+          "start": 19016
         },
         {
           "length": 20,
-          "start": 16380
+          "start": 19454
         },
         {
           "length": 20,
-          "start": 16472
+          "start": 19546
         },
         {
           "length": 20,
-          "start": 16536
+          "start": 19610
         },
         {
           "length": 20,
-          "start": 17009
+          "start": 20062
         },
         {
           "length": 20,
-          "start": 17073
+          "start": 20126
         },
         {
           "length": 20,
-          "start": 17768
+          "start": 20743
         },
         {
           "length": 20,
-          "start": 18071
+          "start": 21144
         },
         {
           "length": 20,
-          "start": 18149
+          "start": 21222
         },
         {
           "length": 20,
-          "start": 18251
+          "start": 21324
         },
         {
           "length": 20,
-          "start": 18347
+          "start": 21420
         },
         {
           "length": 20,
-          "start": 18425
+          "start": 21498
         },
         {
           "length": 20,
-          "start": 18512
+          "start": 21585
         },
         {
           "length": 20,
-          "start": 18707
+          "start": 21780
         },
         {
           "length": 20,
-          "start": 18785
+          "start": 21858
         },
         {
           "length": 20,
-          "start": 19162
+          "start": 22247
         },
         {
           "length": 20,
-          "start": 19529
+          "start": 22672
         },
         {
           "length": 20,
-          "start": 20569
+          "start": 23699
         }
       ]
     },
@@ -1551,71 +2001,75 @@
       "LazyMulSegmentTree": [
         {
           "length": 20,
-          "start": 1405
+          "start": 2283
         },
         {
           "length": 20,
-          "start": 6379
+          "start": 2346
         },
         {
           "length": 20,
-          "start": 7597
+          "start": 5671
         },
         {
           "length": 20,
-          "start": 8792
+          "start": 6834
         },
         {
           "length": 20,
-          "start": 8893
+          "start": 7901
         },
         {
           "length": 20,
-          "start": 9664
+          "start": 7967
         },
         {
           "length": 20,
-          "start": 10978
+          "start": 11102
         },
         {
           "length": 20,
-          "start": 11856
+          "start": 11914
         },
         {
           "length": 20,
-          "start": 11937
+          "start": 11980
         },
         {
           "length": 20,
-          "start": 12621
+          "start": 12686
         },
         {
           "length": 20,
-          "start": 14513
+          "start": 13693
         },
         {
           "length": 20,
-          "start": 16596
+          "start": 17688
         },
         {
           "length": 20,
-          "start": 17148
+          "start": 19670
         },
         {
           "length": 20,
-          "start": 17229
+          "start": 20201
         },
         {
           "length": 20,
-          "start": 17844
+          "start": 20266
         },
         {
           "length": 20,
-          "start": 19425
+          "start": 20894
         },
         {
           "length": 20,
-          "start": 20465
+          "start": 20988
+        },
+        {
+          "length": 20,
+          "start": 22538
         }
       ]
     }
@@ -1625,171 +2079,203 @@
       "FixedPointMathU": [
         {
           "length": 20,
-          "start": 6804
+          "start": 6468
+        },
+        {
+          "length": 20,
+          "start": 6583
+        },
+        {
+          "length": 20,
+          "start": 6647
+        },
+        {
+          "length": 20,
+          "start": 6725
         },
         {
           "length": 20,
-          "start": 6920
+          "start": 7635
         },
         {
           "length": 20,
-          "start": 6984
+          "start": 7699
         },
         {
           "length": 20,
-          "start": 7054
+          "start": 7777
         },
         {
           "length": 20,
-          "start": 8092
+          "start": 10758
         },
         {
           "length": 20,
-          "start": 8156
+          "start": 10851
         },
         {
           "length": 20,
-          "start": 8234
+          "start": 10915
         },
         {
           "length": 20,
-          "start": 10205
+          "start": 10993
         },
         {
           "length": 20,
-          "start": 10301
+          "start": 11648
         },
         {
           "length": 20,
-          "start": 10365
+          "start": 11712
         },
         {
           "length": 20,
-          "start": 10435
+          "start": 11790
         },
         {
           "length": 20,
-          "start": 11156
+          "start": 13883
         },
         {
           "length": 20,
-          "start": 11220
+          "start": 13963
         },
         {
           "length": 20,
-          "start": 11298
+          "start": 14054
         },
         {
           "length": 20,
-          "start": 13950
+          "start": 14118
         },
         {
           "length": 20,
-          "start": 14357
+          "start": 14187
         },
         {
           "length": 20,
-          "start": 14436
+          "start": 14533
         },
         {
           "length": 20,
-          "start": 14529
+          "start": 14597
         },
         {
           "length": 20,
-          "start": 14631
+          "start": 14666
         },
         {
           "length": 20,
-          "start": 14796
+          "start": 17557
         },
         {
           "length": 20,
-          "start": 14875
+          "start": 17954
         },
         {
           "length": 20,
-          "start": 14963
+          "start": 18033
         },
         {
           "length": 20,
-          "start": 15254
+          "start": 18107
         },
         {
           "length": 20,
-          "start": 15333
+          "start": 18209
         },
         {
           "length": 20,
-          "start": 15426
+          "start": 18356
         },
         {
           "length": 20,
-          "start": 15897
+          "start": 18435
         },
         {
           "length": 20,
-          "start": 15989
+          "start": 18523
         },
         {
           "length": 20,
-          "start": 16053
+          "start": 18814
         },
         {
           "length": 20,
-          "start": 16526
+          "start": 18893
         },
         {
           "length": 20,
-          "start": 16590
+          "start": 18967
         },
         {
           "length": 20,
-          "start": 17285
+          "start": 19405
         },
         {
           "length": 20,
-          "start": 17588
+          "start": 19497
         },
         {
           "length": 20,
-          "start": 17666
+          "start": 19561
         },
         {
           "length": 20,
-          "start": 17768
+          "start": 20013
         },
         {
           "length": 20,
-          "start": 17864
+          "start": 20077
         },
         {
           "length": 20,
-          "start": 17942
+          "start": 20694
         },
         {
           "length": 20,
-          "start": 18029
+          "start": 21095
         },
         {
           "length": 20,
-          "start": 18224
+          "start": 21173
         },
         {
           "length": 20,
-          "start": 18302
+          "start": 21275
         },
         {
           "length": 20,
-          "start": 18679
+          "start": 21371
         },
         {
           "length": 20,
-          "start": 19046
+          "start": 21449
         },
         {
           "length": 20,
-          "start": 20086
+          "start": 21536
+        },
+        {
+          "length": 20,
+          "start": 21731
+        },
+        {
+          "length": 20,
+          "start": 21809
+        },
+        {
+          "length": 20,
+          "start": 22198
+        },
+        {
+          "length": 20,
+          "start": 22623
+        },
+        {
+          "length": 20,
+          "start": 23650
         }
       ]
     },
@@ -1797,71 +2283,75 @@
       "LazyMulSegmentTree": [
         {
           "length": 20,
-          "start": 922
+          "start": 2234
         },
         {
           "length": 20,
-          "start": 5896
+          "start": 2297
         },
         {
           "length": 20,
-          "start": 7114
+          "start": 5622
         },
         {
           "length": 20,
-          "start": 8309
+          "start": 6785
         },
         {
           "length": 20,
-          "start": 8410
+          "start": 7852
         },
         {
           "length": 20,
-          "start": 9181
+          "start": 7918
         },
         {
           "length": 20,
-          "start": 10495
+          "start": 11053
         },
         {
           "length": 20,
-          "start": 11373
+          "start": 11865
         },
         {
           "length": 20,
-          "start": 11454
+          "start": 11931
         },
         {
           "length": 20,
-          "start": 12138
+          "start": 12637
         },
         {
           "length": 20,
-          "start": 14030
+          "start": 13644
         },
         {
           "length": 20,
-          "start": 16113
+          "start": 17639
         },
         {
           "length": 20,
-          "start": 16665
+          "start": 19621
         },
         {
           "length": 20,
-          "start": 16746
+          "start": 20152
         },
         {
           "length": 20,
-          "start": 17361
+          "start": 20217
         },
         {
           "length": 20,
-          "start": 18942
+          "start": 20845
+        },
+        {
+          "length": 20,
+          "start": 20939
         },
         {
           "length": 20,
-          "start": 19982
+          "start": 22489
         }
       ]
     }
diff --git a/clmsr-subgraph/abis/CLMSRMarketCoreUpgradeable.json b/clmsr-subgraph/abis/CLMSRMarketCoreUpgradeable.json
deleted file mode 100644
index 4dbd898..0000000
--- a/clmsr-subgraph/abis/CLMSRMarketCoreUpgradeable.json
+++ /dev/null
@@ -1,2144 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "CLMSRMarketCoreUpgradeable",
-  "sourceName": "contracts/core/CLMSRMarketCoreUpgradeable.sol",
-  "abi": [
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "target",
-          "type": "address"
-        }
-      ],
-      "name": "AddressEmptyCode",
-      "type": "error"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint32",
-          "name": "requested",
-          "type": "uint32"
-        },
-        {
-          "internalType": "uint32",
-          "name": "maxAllowed",
-          "type": "uint32"
-        }
-      ],
-      "name": "BinCountExceedsLimit",
-      "type": "error"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "cost",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "maxAllowed",
-          "type": "uint256"
-        }
-      ],
-      "name": "CostExceedsMaximum",
-      "type": "error"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "implementation",
-          "type": "address"
-        }
-      ],
-      "name": "ERC1967InvalidImplementation",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "ERC1967NonPayable",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "EnforcedPause",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "ExpectedPause",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "FactorOutOfBounds",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "FailedCall",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "IncompleteChunkProcessing",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "InvalidInitialization",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "InvalidLiquidityParameter",
-      "type": "error"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "int256",
-          "name": "minTick",
-          "type": "int256"
-        },
-        {
-          "internalType": "int256",
-          "name": "maxTick",
-          "type": "int256"
-        },
-        {
-          "internalType": "int256",
-          "name": "tickSpacing",
-          "type": "int256"
-        }
-      ],
-      "name": "InvalidMarketParameters",
-      "type": "error"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint128",
-          "name": "qty",
-          "type": "uint128"
-        }
-      ],
-      "name": "InvalidQuantity",
-      "type": "error"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "int256",
-          "name": "tick",
-          "type": "int256"
-        },
-        {
-          "internalType": "int256",
-          "name": "minTick",
-          "type": "int256"
-        },
-        {
-          "internalType": "int256",
-          "name": "maxTick",
-          "type": "int256"
-        }
-      ],
-      "name": "InvalidTick",
-      "type": "error"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "int256",
-          "name": "lowerTick",
-          "type": "int256"
-        },
-        {
-          "internalType": "int256",
-          "name": "upperTick",
-          "type": "int256"
-        }
-      ],
-      "name": "InvalidTickRange",
-      "type": "error"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "int256",
-          "name": "tick",
-          "type": "int256"
-        },
-        {
-          "internalType": "int256",
-          "name": "tickSpacing",
-          "type": "int256"
-        }
-      ],
-      "name": "InvalidTickSpacing",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "InvalidTimeRange",
-      "type": "error"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        }
-      ],
-      "name": "MarketAlreadySettled",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "MarketExpired",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "MarketNotActive",
-      "type": "error"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        }
-      ],
-      "name": "MarketNotFound",
-      "type": "error"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        }
-      ],
-      "name": "MarketNotSettled",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "MarketNotStarted",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "NotInitializing",
-      "type": "error"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "owner",
-          "type": "address"
-        }
-      ],
-      "name": "OwnableInvalidOwner",
-      "type": "error"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "account",
-          "type": "address"
-        }
-      ],
-      "name": "OwnableUnauthorizedAccount",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "ReentrancyGuardReentrantCall",
-      "type": "error"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "token",
-          "type": "address"
-        }
-      ],
-      "name": "SafeERC20FailedOperation",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "TreeNotInitialized",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "UUPSUnauthorizedCallContext",
-      "type": "error"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "slot",
-          "type": "bytes32"
-        }
-      ],
-      "name": "UUPSUnsupportedProxiableUUID",
-      "type": "error"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "caller",
-          "type": "address"
-        }
-      ],
-      "name": "UnauthorizedCaller",
-      "type": "error"
-    },
-    {
-      "inputs": [],
-      "name": "ZeroAddress",
-      "type": "error"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "step",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "value1",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "value2",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "string",
-          "name": "message",
-          "type": "string"
-        }
-      ],
-      "name": "DebugSellProceeds",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "by",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "string",
-          "name": "reason",
-          "type": "string"
-        }
-      ],
-      "name": "EmergencyPaused",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "by",
-          "type": "address"
-        }
-      ],
-      "name": "EmergencyUnpaused",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": false,
-          "internalType": "uint64",
-          "name": "version",
-          "type": "uint64"
-        }
-      ],
-      "name": "Initialized",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint64",
-          "name": "startTimestamp",
-          "type": "uint64"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint64",
-          "name": "endTimestamp",
-          "type": "uint64"
-        },
-        {
-          "indexed": false,
-          "internalType": "int256",
-          "name": "minTick",
-          "type": "int256"
-        },
-        {
-          "indexed": false,
-          "internalType": "int256",
-          "name": "maxTick",
-          "type": "int256"
-        },
-        {
-          "indexed": false,
-          "internalType": "int256",
-          "name": "tickSpacing",
-          "type": "int256"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint32",
-          "name": "numBins",
-          "type": "uint32"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "liquidityParameter",
-          "type": "uint256"
-        }
-      ],
-      "name": "MarketCreated",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "int256",
-          "name": "settlementTick",
-          "type": "int256"
-        }
-      ],
-      "name": "MarketSettled",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint64",
-          "name": "newStartTimestamp",
-          "type": "uint64"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint64",
-          "name": "newEndTimestamp",
-          "type": "uint64"
-        }
-      ],
-      "name": "MarketTimingUpdated",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "previousOwner",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "newOwner",
-          "type": "address"
-        }
-      ],
-      "name": "OwnershipTransferred",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": false,
-          "internalType": "address",
-          "name": "account",
-          "type": "address"
-        }
-      ],
-      "name": "Paused",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "uint256",
-          "name": "positionId",
-          "type": "uint256"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "trader",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "payout",
-          "type": "uint256"
-        }
-      ],
-      "name": "PositionClaimed",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "uint256",
-          "name": "positionId",
-          "type": "uint256"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "trader",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "proceeds",
-          "type": "uint256"
-        }
-      ],
-      "name": "PositionClosed",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "uint256",
-          "name": "positionId",
-          "type": "uint256"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "trader",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint128",
-          "name": "sellQuantity",
-          "type": "uint128"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint128",
-          "name": "newQuantity",
-          "type": "uint128"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "proceeds",
-          "type": "uint256"
-        }
-      ],
-      "name": "PositionDecreased",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "from",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "to",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "bool",
-          "name": "done",
-          "type": "bool"
-        }
-      ],
-      "name": "PositionEventsProgress",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "uint256",
-          "name": "positionId",
-          "type": "uint256"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "trader",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint128",
-          "name": "additionalQuantity",
-          "type": "uint128"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint128",
-          "name": "newQuantity",
-          "type": "uint128"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "cost",
-          "type": "uint256"
-        }
-      ],
-      "name": "PositionIncreased",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "uint256",
-          "name": "positionId",
-          "type": "uint256"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "trader",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "int256",
-          "name": "lowerTick",
-          "type": "int256"
-        },
-        {
-          "indexed": false,
-          "internalType": "int256",
-          "name": "upperTick",
-          "type": "int256"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint128",
-          "name": "quantity",
-          "type": "uint128"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "cost",
-          "type": "uint256"
-        }
-      ],
-      "name": "PositionOpened",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "uint256",
-          "name": "positionId",
-          "type": "uint256"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "trader",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "payout",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "bool",
-          "name": "isWin",
-          "type": "bool"
-        }
-      ],
-      "name": "PositionSettled",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        },
-        {
-          "indexed": true,
-          "internalType": "int256",
-          "name": "lo",
-          "type": "int256"
-        },
-        {
-          "indexed": true,
-          "internalType": "int256",
-          "name": "hi",
-          "type": "int256"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "factor",
-          "type": "uint256"
-        }
-      ],
-      "name": "RangeFactorApplied",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": false,
-          "internalType": "address",
-          "name": "account",
-          "type": "address"
-        }
-      ],
-      "name": "Unpaused",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "implementation",
-          "type": "address"
-        }
-      ],
-      "name": "Upgraded",
-      "type": "event"
-    },
-    {
-      "inputs": [],
-      "name": "MAX_LIQUIDITY_PARAMETER",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "MAX_TICK_COUNT",
-      "outputs": [
-        {
-          "internalType": "uint32",
-          "name": "",
-          "type": "uint32"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "MIN_LIQUIDITY_PARAMETER",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "UPGRADE_INTERFACE_VERSION",
-      "outputs": [
-        {
-          "internalType": "string",
-          "name": "",
-          "type": "string"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "_nextMarketId",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        },
-        {
-          "internalType": "int256",
-          "name": "lo",
-          "type": "int256"
-        },
-        {
-          "internalType": "int256",
-          "name": "hi",
-          "type": "int256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "factor",
-          "type": "uint256"
-        }
-      ],
-      "name": "applyRangeFactor",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "positionId",
-          "type": "uint256"
-        }
-      ],
-      "name": "calculateClaimAmount",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "positionId",
-          "type": "uint256"
-        }
-      ],
-      "name": "calculateCloseProceeds",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "proceeds",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "positionId",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint128",
-          "name": "sellQuantity",
-          "type": "uint128"
-        }
-      ],
-      "name": "calculateDecreaseProceeds",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "proceeds",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "positionId",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint128",
-          "name": "additionalQuantity",
-          "type": "uint128"
-        }
-      ],
-      "name": "calculateIncreaseCost",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "cost",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        },
-        {
-          "internalType": "int256",
-          "name": "lowerTick",
-          "type": "int256"
-        },
-        {
-          "internalType": "int256",
-          "name": "upperTick",
-          "type": "int256"
-        },
-        {
-          "internalType": "uint128",
-          "name": "quantity",
-          "type": "uint128"
-        }
-      ],
-      "name": "calculateOpenCost",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "cost",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "positionId",
-          "type": "uint256"
-        }
-      ],
-      "name": "claimPayout",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "payout",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "positionId",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "minProceeds",
-          "type": "uint256"
-        }
-      ],
-      "name": "closePosition",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "proceeds",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "int256",
-          "name": "minTick",
-          "type": "int256"
-        },
-        {
-          "internalType": "int256",
-          "name": "maxTick",
-          "type": "int256"
-        },
-        {
-          "internalType": "int256",
-          "name": "tickSpacing",
-          "type": "int256"
-        },
-        {
-          "internalType": "uint64",
-          "name": "startTimestamp",
-          "type": "uint64"
-        },
-        {
-          "internalType": "uint64",
-          "name": "endTimestamp",
-          "type": "uint64"
-        },
-        {
-          "internalType": "uint256",
-          "name": "liquidityParameter",
-          "type": "uint256"
-        }
-      ],
-      "name": "createMarket",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "positionId",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint128",
-          "name": "sellQuantity",
-          "type": "uint128"
-        },
-        {
-          "internalType": "uint256",
-          "name": "minProceeds",
-          "type": "uint256"
-        }
-      ],
-      "name": "decreasePosition",
-      "outputs": [
-        {
-          "internalType": "uint128",
-          "name": "newQuantity",
-          "type": "uint128"
-        },
-        {
-          "internalType": "uint256",
-          "name": "proceeds",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "limit",
-          "type": "uint256"
-        }
-      ],
-      "name": "emitPositionSettledBatch",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        }
-      ],
-      "name": "getMarket",
-      "outputs": [
-        {
-          "components": [
-            {
-              "internalType": "bool",
-              "name": "isActive",
-              "type": "bool"
-            },
-            {
-              "internalType": "bool",
-              "name": "settled",
-              "type": "bool"
-            },
-            {
-              "internalType": "uint64",
-              "name": "startTimestamp",
-              "type": "uint64"
-            },
-            {
-              "internalType": "uint64",
-              "name": "endTimestamp",
-              "type": "uint64"
-            },
-            {
-              "internalType": "int256",
-              "name": "settlementTick",
-              "type": "int256"
-            },
-            {
-              "internalType": "int256",
-              "name": "minTick",
-              "type": "int256"
-            },
-            {
-              "internalType": "int256",
-              "name": "maxTick",
-              "type": "int256"
-            },
-            {
-              "internalType": "int256",
-              "name": "tickSpacing",
-              "type": "int256"
-            },
-            {
-              "internalType": "uint32",
-              "name": "numBins",
-              "type": "uint32"
-            },
-            {
-              "internalType": "uint256",
-              "name": "liquidityParameter",
-              "type": "uint256"
-            },
-            {
-              "internalType": "uint32",
-              "name": "positionEventsCursor",
-              "type": "uint32"
-            },
-            {
-              "internalType": "bool",
-              "name": "positionEventsEmitted",
-              "type": "bool"
-            }
-          ],
-          "internalType": "struct ICLMSRMarketCoreUpgradeable.Market",
-          "name": "market",
-          "type": "tuple"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "getPaymentToken",
-      "outputs": [
-        {
-          "internalType": "address",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "getPositionContract",
-      "outputs": [
-        {
-          "internalType": "address",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        },
-        {
-          "internalType": "int256",
-          "name": "lo",
-          "type": "int256"
-        },
-        {
-          "internalType": "int256",
-          "name": "hi",
-          "type": "int256"
-        }
-      ],
-      "name": "getRangeSum",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "sum",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        },
-        {
-          "internalType": "int256",
-          "name": "tick",
-          "type": "int256"
-        }
-      ],
-      "name": "getTickValue",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "value",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "positionId",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint128",
-          "name": "additionalQuantity",
-          "type": "uint128"
-        },
-        {
-          "internalType": "uint256",
-          "name": "maxCost",
-          "type": "uint256"
-        }
-      ],
-      "name": "increasePosition",
-      "outputs": [
-        {
-          "internalType": "uint128",
-          "name": "newQuantity",
-          "type": "uint128"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "_paymentToken",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "_positionContract",
-          "type": "address"
-        }
-      ],
-      "name": "initialize",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "isPaused",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "name": "marketTrees",
-      "outputs": [
-        {
-          "internalType": "uint32",
-          "name": "root",
-          "type": "uint32"
-        },
-        {
-          "internalType": "uint32",
-          "name": "nextIndex",
-          "type": "uint32"
-        },
-        {
-          "internalType": "uint32",
-          "name": "size",
-          "type": "uint32"
-        },
-        {
-          "internalType": "uint256",
-          "name": "cachedRootSum",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "name": "markets",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "isActive",
-          "type": "bool"
-        },
-        {
-          "internalType": "bool",
-          "name": "settled",
-          "type": "bool"
-        },
-        {
-          "internalType": "uint64",
-          "name": "startTimestamp",
-          "type": "uint64"
-        },
-        {
-          "internalType": "uint64",
-          "name": "endTimestamp",
-          "type": "uint64"
-        },
-        {
-          "internalType": "int256",
-          "name": "settlementTick",
-          "type": "int256"
-        },
-        {
-          "internalType": "int256",
-          "name": "minTick",
-          "type": "int256"
-        },
-        {
-          "internalType": "int256",
-          "name": "maxTick",
-          "type": "int256"
-        },
-        {
-          "internalType": "int256",
-          "name": "tickSpacing",
-          "type": "int256"
-        },
-        {
-          "internalType": "uint32",
-          "name": "numBins",
-          "type": "uint32"
-        },
-        {
-          "internalType": "uint256",
-          "name": "liquidityParameter",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint32",
-          "name": "positionEventsCursor",
-          "type": "uint32"
-        },
-        {
-          "internalType": "bool",
-          "name": "positionEventsEmitted",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        },
-        {
-          "internalType": "int256",
-          "name": "lowerTick",
-          "type": "int256"
-        },
-        {
-          "internalType": "int256",
-          "name": "upperTick",
-          "type": "int256"
-        },
-        {
-          "internalType": "uint128",
-          "name": "quantity",
-          "type": "uint128"
-        },
-        {
-          "internalType": "uint256",
-          "name": "maxCost",
-          "type": "uint256"
-        }
-      ],
-      "name": "openPosition",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "positionId",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "owner",
-      "outputs": [
-        {
-          "internalType": "address",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "string",
-          "name": "reason",
-          "type": "string"
-        }
-      ],
-      "name": "pause",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "paused",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "paymentToken",
-      "outputs": [
-        {
-          "internalType": "contract IERC20",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "positionContract",
-      "outputs": [
-        {
-          "internalType": "contract ICLMSRPositionUpgradeable",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        },
-        {
-          "internalType": "int256",
-          "name": "lo",
-          "type": "int256"
-        },
-        {
-          "internalType": "int256",
-          "name": "hi",
-          "type": "int256"
-        }
-      ],
-      "name": "propagateLazy",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "sum",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "proxiableUUID",
-      "outputs": [
-        {
-          "internalType": "bytes32",
-          "name": "",
-          "type": "bytes32"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "renounceOwnership",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        },
-        {
-          "internalType": "int256",
-          "name": "settlementTick",
-          "type": "int256"
-        }
-      ],
-      "name": "settleMarket",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "newOwner",
-          "type": "address"
-        }
-      ],
-      "name": "transferOwnership",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "unpause",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "marketId",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint64",
-          "name": "newStartTimestamp",
-          "type": "uint64"
-        },
-        {
-          "internalType": "uint64",
-          "name": "newEndTimestamp",
-          "type": "uint64"
-        }
-      ],
-      "name": "updateMarketTiming",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "newImplementation",
-          "type": "address"
-        },
-        {
-          "internalType": "bytes",
-          "name": "data",
-          "type": "bytes"
-        }
-      ],
-      "name": "upgradeToAndCall",
-      "outputs": [],
-      "stateMutability": "payable",
-      "type": "function"
-    }
-  ],
-  "bytecode": "0x60a0806040523461002a573060805261534890816100308239608051818181611b790152611c320152f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c8063070ab8c9146125f457806309f28be61461062b57806313b6eb09146125cd5780632d6ce61d146123d75780632ed66650146123b55780633013ce2914610ab85780633d65117b1461230d5780633f4ba83a14612270578063449a0388146121fb57806344a1a58e146121225780634765b3f914611fe4578063485cc95514611e185780634f1ef28614611be357806352d1902d14611b665780635c975abb14610d645780636084fa031461184257806362a626aa14611824578063692c3fc7146117cd5780636da66355146116ea5780636ec469b11461159c578063715018a6146115315780637404d95714611513578063793347981461129a5780637ed54782146111f25780638a69614e1461100c5780638da5cb5b14610fd65780639bbafcc314610f745780639fc46ecb14610ec1578063ad3cb1cc14610e57578063b1283e7714610d94578063b187bd2614610d64578063b762d83414610c41578063bcb1732214610c1c578063c9ac6b3114610adf578063d41c3a6514610ab8578063de57c54f14610654578063e9eb3ba51461062b578063eb44fdd3146104d7578063f0b7f3b1146102045763f2fde38b146101d557600080fd5b34610201576020366003190112610201576101fe6101f16127b5565b6101f9612ed0565b612e5c565b80f35b80fd5b50346102015760a0366003190112610201576024604460043582358235610229612785565b906001600160801b036084359261023e613175565b6102466131a0565b169081156104bf576000858152600260209081526040909120600581015491989163ffffffff16156104a857805460ff811615610496576001600160401b0390818160101c1642106104845760501c164211610472576102ae6102a8826128e0565b87612f09565b6102c06102ba826128e0565b84612f09565b82861361045657828614610456576102e79060046102de8886612e14565b91015490612e2d565b61043a5764e8d4a510008084029064e8d4a50fff61030783868a8c61449f565b01049480861161041e575060a4899261033f89936103258933614992565b846000526002865260066040600020015490878b87614015565b600060018060a01b0360015416896040519c8d9687956330906fad60e21b87523360048801528601528401528660648401528760848401525af1958615610412576000966103de575b506040519384528684015260408301526060820152827fc33c3b4ea19b40f02901978a93e787a0caa1d6fd23dfa228ae891fe96867e17160803393a460016000805160206152f383398151915255604051908152f35b9095508681813d831161040b575b6103f681836127fa565b8101031261040657519487610388565b600080fd5b503d6103ec565b6040513d6000823e3d90fd5b858991846040519263f6daf99360e01b84526004840152820152fd5b8691859160405192631150381b60e11b84526004840152820152fd5b8786848460405192631150381b60e11b84526004840152820152fd5b60405163b2094b5960e01b8152600490fd5b604051630ee8c41760e31b8152600490fd5b604051635a90bb8d60e11b8152600490fd5b50604051634cba20ef60e01b815260048101879052fd5b604051633b59e48960e11b8152600481018390528790fd5b503461020157602036600319011261020157600435906040516104f9816127de565b8181528160208201528160408201528160608201528160808201528160a08201528160c08201528160e08201526101008281830152610120928084840152610140908082850152806101608095015261056886600052600260205263ffffffff60056040600020015416151590565b15610612579061058760408361018098879695526002602052206128e0565b916040519583511515875260208401511515602088015260408401516001600160401b03809116604089015260608501511660608801526080840151608088015260a084015160a088015260c084015160c088015260e084015160e0880152818401519163ffffffff8093169088015280840151908701528183015116908501520151151590820152f35b604051634cba20ef60e01b815260048101879052602490fd5b50346102015780600319360112610201576001546040516001600160a01b039091168152602090f35b50346102015760c036600319011261020157606435906001600160401b038216820361040657608435906001600160401b038216820361040657610696612ed0565b61069e613175565b600454916106ab83612e4d565b6004556024356004351215610a8e57816044351315610a8e576106dd6044356106d8600435602435612e14565b612e2d565b610a8e576001600160401b0381166001600160401b0385161015610a7c5766038d7ea4c6800060a435108015610a67575b610a555761072b604435610726600435602435612e14565b612f99565b9180831380610a48575b15610a0d5763ffffffff83161580156109fb575b6109d457604051610759816127de565b600181528160208201526001600160401b03861660408201526001600160401b038316606082015281608082015260043560a082015260243560c082015260443560e082015263ffffffff841661010082015260a4356101208201528161014082015281610160820152848252600260205260076040832082511515815460ff61ff006020870151151560081b1692169061ffff19161717815561082b6001600160401b03604085015116829069ffffffffffffffff000082549160101b169069ffffffffffffffff00001916179055565b6060830151815467ffffffffffffffff60501b191660509190911b67ffffffffffffffff60501b161781556080830151600182015560a0830151600282015560c0830151600382015560e083015160048201556005810163ffffffff6101008501511663ffffffff198254161790556101208301516006820155019063ffffffff6101408201511664ff000000006101608454930151151560201b169164ffffffffff19161717905560036020526040812073__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b156109d0576040519063d886284b60e01b8252600482015263ffffffff84166024820152818160448173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af480156109c5576109b1575b602085807f2453c1a297c658a5b6905526d84f0b4ac79c0d9cc5fb5601664602efee53121460e08a63ffffffff8a6001600160401b038b816040519516855216888401526004356040840152602435606084015260443560808401521660a082015260a43560c0820152a2604051908152f35b6109bb82916127cb565b610201578061093e565b6040513d84823e3d90fd5b5080fd5b60405163515eb6ff60e11b815263ffffffff84166004820152620f42406024820152604490fd5b50620f424063ffffffff841611610749565b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081c985b99d94818dbdd5b9d606a1b6044820152606490fd5b50620f4240831315610735565b604051630b281d1960e31b8152600490fd5b5069152d02c7e14af680000060a4351161070e565b60405163536a71af60e01b8152600490fd5b60405163040b1c7360e21b8152600480359082015260248035908201526044803590820152606490fd5b5034610201578060031936011261020157546040516001600160a01b039091168152602090f35b50346102015760803660031901126102015760043560246044358135610b03612785565b610b2385600052600260205263ffffffff60056040600020015416151590565b15610c04576001600160801b0316928315610bee57846000526002602052610b4e60406000206128e0565b610b588184612f09565b610b628185612f09565b838313610bd157838314610bd157610b899060e0610b808587612e14565b91015190612e2d565b610bb5575060209364e8d4a50fff92610bab9264e8d4a510008096029261449f565b0104604051908152f35b9160449260405192631150381b60e11b84526004840152820152fd5b509160449260405192631150381b60e11b84526004840152820152fd5b604051633b59e48960e11b815260048101859052fd5b604051634cba20ef60e01b8152600481018690528490fd5b5034610201578060031936011261020157602060405169152d02c7e14af68000008152f35b503461020157610c5036612759565b610c58612ed0565b610c7882600052600260205263ffffffff60056040600020015416151590565b15610d4b57818352600260205260408320805460ff8160081c16610d325760028201548084128015610d25575b610cfa57506001820183905561ffff1916610100178155600701805464ffffffffff191690556040519081527fca3a568dfb73dd7b7b3c0b28f130edbf4b688f534869c3de083664c43c11430e90602090a280f35b6003830154604051638a228b0d60e01b81526004810186905260248101929092526044820152606490fd5b5060038301548413610ca5565b604051634e0558fb60e01b815260048101859052602490fd5b604051634cba20ef60e01b815260048101839052602490fd5b5034610201578060031936011261020157602060ff6000805160206152d383398151915254166040519015158152f35b503461020157602036600319011261020157604061018091600435815260026020522060ff8154916001600160401b0390600181015490600281015491600382015460048301549063ffffffff94856005860154169360076006870154960154976040519a8a811615158c528a8160081c16151560208d0152818160101c1660408d015260501c1660608b015260808a015260a089015260c088015260e0870152610100860152610120850152811661014084015260201c161515610160820152f35b503461020157806003193601126102015760405160408101908082106001600160401b03831117610eab57610ea79160405260058152640352e302e360dc1b602082015260405191829182612897565b0390f35b634e487b7160e01b600052604160045260246000fd5b50346102015760203660031901126102015760015460405163eb02c30160e01b815260048035908201529060a090829060249082906001600160a01b03165afa9081156104125760209291610f45575b5064e8d4a50fff610bab64e8d4a5100092836001600160801b0360608301511602908051906040878201519101519161324b565b610f67915060a03d60a011610f6d575b610f5f81836127fa565b810190612985565b38610f11565b503d610f55565b503461020157610f8336612759565b610f8e929192612ed0565b610fae83600052600260205263ffffffff60056040600020015416151590565b15610fbd576101fe9192612a33565b604051634cba20ef60e01b815260048101849052602490fd5b50346102015780600319360112610201576000805160206152b3833981519152546040516001600160a01b039091168152602090f35b503461020157602090816003193601126102015760043561102b613175565b6110336131a0565b60015460405163eb02c30160e01b8152600481018390526001600160a01b03939184169060a081602481855afa9081156111c557869084926111d0575b5060249192604051928380926331a9108f60e11b82528860048301525afa9081156111c5578391611198575b508433911603611180578051825260028552846110bb604084206128e0565b01511561116757506110cc826130b2565b926110d78433614440565b60015416803b156109d057818091602460405180948193630852cd8d60e31b83528860048401525af180156109c557611153575b5050604051908282527ff18ca9717b47ea7629d17b5d7b2ede46e864155725629e7d0347924c2f6d112d843393a360016000805160206152f383398151915255604051908152f35b61115d82916127cb565b610201578061110b565b602490516040519063b23e5f9f60e01b82526004820152fd5b60405163d86ad9cf60e01b8152336004820152602490fd5b6111b89150863d88116111be575b6111b081836127fa565b8101906129f8565b3861109c565b503d6111a6565b6040513d85823e3d90fd5b602492506111ec9060a03d60a011610f6d57610f5f81836127fa565b91611070565b50346102015760403660031901126102015761120c61276f565b60015460405163eb02c30160e01b815260048035908201529060a090829060249082906001600160a01b03165afa9283156104125760209364e8d4a50fff92610bab929161127b575b5064e8d4a51000938151906040866001600160801b03898601519316029301519161449f565b611294915060a03d60a011610f6d57610f5f81836127fa565b38611255565b5034610201576112a93661286d565b906112b2613175565b6112ba6131a0565b6001600160801b03908181169384156114fa5760015460405163eb02c30160e01b8152600481018390526001600160a01b03918216969195919060a0816024818b5afa908115610412576000916114db575b5060405180986331a9108f60e11b825285600483015281602460209b8c935afa908115610412576000916114be575b5087339116036111805761134f81516131d0565b805188820190815190604084019064e8d4a50fff61137b83519264e8d4a5100093848a0296879261449f565b0104958087116114a057506060928994928c6113b89361139b8a33614992565b600286519451915192856000525260066040600020015493614015565b015116019484861161148a576001541690813b15610406576040516361d6883d60e01b8152600481018490526001600160801b0387166024820152916000908390604490829084905af1908115610412577fa9efae0c21a2db158c2af2d36b5c18dc14d792a79dfab662442466a80095ea5f9261145d9261147b575b50604080516001600160801b039687168152958816602087015285015233939081906060820190565b0390a360016000805160206152f38339815191525560405191168152f35b611484906127cb565b88611434565b634e487b7160e01b600052601160045260246000fd5b866044916040519163f6daf99360e01b835260048301526024820152fd5b6114d59150893d8b116111be576111b081836127fa565b8961133b565b6114f4915060a03d60a011610f6d57610f5f81836127fa565b8861130c565b604051633b59e48960e11b815260048101869052602490fd5b50346102015780600319360112610201576020604051620f42408152f35b503461020157806003193601126102015761154a612ed0565b6000805160206152b383398151915280546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034610201576115ab36612759565b91906115cd81600052600260205263ffffffff60056040600020015416151590565b156116d257808252602092600284526115e8604084206128e0565b906115f38282612f09565b60e0820151908181019182128582129080158216911516176116be579161161b918693612fb4565b928452600382526040808520905163694f552560e01b8152600481019190915263ffffffff9182166024820152921660448301528180606481015b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90813b15612737576040516330f27d1f60e01b8152600481019590955263ffffffff908116602486015291909116604484015260648301849052829060849082905af4801561272c57612708575b50602060008051602061529383398151915291604051908152a480f35b60008051602061529383398151915291956127246020926127cb565b9591506126eb565b6040513d88823e3d90fd5b8380fd5b6044848660405191631150381b60e11b835260048301526024820152fd5b6040906003190112610406576004359060243590565b602435906001600160801b038216820361040657565b606435906001600160801b038216820361040657565b606090600319011261040657600435906024359060443590565b600435906001600160a01b038216820361040657565b6001600160401b038111610eab57604052565b61018081019081106001600160401b03821117610eab57604052565b90601f801991011681019081106001600160401b03821117610eab57604052565b6001600160401b038111610eab57601f01601f191660200190565b9291926128428261281b565b9161285060405193846127fa565b829481845281830111610406578281602093846000960137010152565b606090600319011261040657600435906024356001600160801b0381168103610406579060443590565b6020808252825181830181905290939260005b8281106128cc57505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016128aa565b906040516128ed816127de565b61016060ff8294805482811615158552828160081c16151560208601526001600160401b0390818160101c16604087015260501c16606085015260018101546080850152600281015460a0850152600381015460c0850152600481015460e0850152600763ffffffff91826005820154166101008701526006810154610120870152015490811661014085015260201c161515910152565b908160a091031261040657604051906001600160401b039060a0830182811184821017610eab576040528051835260208101516020840152604081015160408401526060810151906001600160801b03821682036104065760809160608501520151908116810361040657608082015290565b9081602091031261040657516001600160a01b03811681036104065790565b90816020910312610406575190565b9190820180921161148a57565b9081600052600260205260406000209060ff825460081c1615612dfb5760078201549160ff8360201c16612df5578115612dc65760015460405163348dbbed60e21b8152600481018690529190600090839060249082906001600160a01b03165afa91821561041257600092612d1f575b508151928363ffffffff86161015612cc357612ac69063ffffffff8616612a26565b91838311612cbb575b60018281015490546001600160a01b0316919063ffffffff87165b858110612b7c5750505050918160609363ffffffff7fcf156953c2640827200d7348c90cddc0fd140a8dd5f3cfd29bf0b2a855c34b189694166007820154938163ffffffff19861617600784015583149384612b5d575b50505063ffffffff6040519316835260208301526040820152a2565b64ffffffffff1916176401000000001760079190910155388080612b41565b8251811015612ca55760208160051b840101519060405163eb02c30160e01b815282600482015260a081602481895afa90811561041257600091612c86575b506040516331a9108f60e11b815260048101849052926020846024818a5afa801561041257600194600091612c67575b5085602084015113159283612c59575b7f1a81eb5d53aa7bec98cadd0a6303be87e540f77ba90e63cd945e49b8eb697b0a916040918515612c5057606001516001600160801b0316945b825195865215156020860152868060a01b031693a301612aea565b50600094612c35565b604081015187129350612bfb565b612c80915060203d6020116111be576111b081836127fa565b38612beb565b612c9f915060a03d60a011610f6d57610f5f81836127fa565b38612bbb565b634e487b7160e01b600052603260045260246000fd5b839250612acf565b50606092507fcf156953c2640827200d7348c90cddc0fd140a8dd5f3cfd29bf0b2a855c34b18939150600764010000000064ff000000001984161791015563ffffffff60405191818116835216602082015260016040820152a2565b9091503d806000833e612d3281836127fa565b6020828281010312610406578151916001600160401b03831161040657818101601f8483010112156104065782810151906001600160401b038211610eab5760405193612d8560208460051b01866127fa565b82855260208086019360051b828401010193820184116104065701602001905b828210612db6575050509038612aa4565b8151815260209182019101612da5565b60405162461bcd60e51b815260206004820152600760248201526606c696d69743d360cc1b6044820152606490fd5b50505050565b60405163b23e5f9f60e01b815260048101849052602490fd5b8181039291600013801582851316918412161761148a57565b8115612e37570790565b634e487b7160e01b600052601260045260246000fd5b600019811461148a5760010190565b6001600160a01b03908116908115612eb7576000805160206152b383398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b604051631e4fbdf760e01b815260006004820152602490fd5b6000805160206152b3833981519152546001600160a01b03163303612ef157565b60405163118cdaa760e01b8152336004820152602490fd5b9060a0810180518084128015612f8c575b612f61575060e0612f2f612f3a925185612e14565b920191825190612e2d565b612f42575050565b6044925051604051916382fe647b60e01b835260048301526024820152fd5b60c0830151604051638a228b0d60e01b81526004810186905260248101929092526044820152606490fd5b5060c08301518413612f1a565b8115612e3757600160ff1b811460001983141661148a570590565b9290612ff7612fe691612fef612fd060a0870197885190612e14565b9160e087019263ffffffff958691855190612f99565b16975190612e14565b905190612f99565b600019810190811360011661148a578161010091169301511680841090816130a8575b50156130635781831161302957565b60405162461bcd60e51b8152602060048201526012602482015271496e76616c69642072616e67652062696e7360701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f52616e67652062696e73206f7574206f6620626f756e647300000000000000006044820152606490fd5b905082103861301a565b60015460405163eb02c30160e01b8152600481019290925260a090829060249082906001600160a01b03165afa90811561041257600091613156575b508051600052600260205261310660406000206128e0565b60208101511561314f5760806020830151910151809113159081613141575b501561313b57606001516001600160801b031690565b50600090565b905060408201511338613125565b5050600090565b61316f915060a03d60a011610f6d57610f5f81836127fa565b386130ee565b60ff6000805160206152d3833981519152541661318e57565b60405163d93c066560e01b8152600490fd5b6000805160206152f383398151915260028154146131be5760029055565b604051633ee5aeb560e01b8152600490fd5b600052600260205260406000205460ff811615610496576001600160401b0390818160101c1642106104845760501c16421161047257565b60001981019190821161148a57565b906103e891820391821161148a57565b9190820391821161148a57565b8015612e37576000190490565b8115612e37570490565b91610120939161326d613268856000526002602052604060002090565b6128e0565b93613279858484612fb4565b96909501516040516330ed1f5d60e01b815260048101829052670de0b6b3a7640000602482015290959060208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af48015613706576132d8916000916139de575b50613208565b968786116132ef5750506132ec9550614b51565b90565b9092506133439591935073__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__6020613324866000526003602052604060002090565b604051809981926304afd7ff60e21b8352600483019190602083019252565b0381845af4938415613706576133ad976000956139b8575b5061337460209495966000526003602052604060002090565b60405163694f552560e01b8152600481019190915263ffffffff9182166024820152921660448301529095869190829081906064820190565b03915af493841561370657600094613997575b5081156135c1576103e86133e5866133e06133db8288612a26565b613208565b613241565b11613976579093926000919082905b8415158061396b575b1561395d5761343e95968786116000146139565787915b6040516316cf339960e21b8152600481018490526024810186905297602090899081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156137065761348d98602091600091613939575b50604051809a819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613706576134ea9860209160009161391c575b50604051809a81926316cf339960e21b835260048301919060206040840193670de0b6b3a764000081520152565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613706576000986138fb575b5061351c88613234565b811161377f575b8015158061376e575b6135c1576040516330ed1f5d60e01b815260048101829052602481019890985260208860448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af497881561370657600098613745575b508761358761358c9284613227565b612a26565b9081156135c1578181116135d3575b5081156135c1576135b7916135b1919796613227565b93612e4d565b95949592936133f4565b604051635fba374760e11b8152600490fd5b6040516316cf339960e21b8152600481019190915260248101829052909260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49182156137065761364492602091600091613728575b506040518094819263360816cf60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49182156137065761369c9260209160009161370b575b506040516330ed1f5d60e01b815260048101889052602481019190915292839081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613706576136ce926000926136d5575b50612a26565b913861359b565b6136f891925060203d6020116136ff575b6136f081836127fa565b810190612a17565b90386136c8565b503d6136e6565b610412565b6137229150823d84116136ff576136f081836127fa565b38613673565b61373f9150823d84116136ff576136f081836127fa565b38613624565b61358798509061376661358c9260203d6020116136ff576136f081836127fa565b985090613578565b5061377881613234565b881161352c565b9650905061379761378f85613217565b8685896149f5565b908582116138f3575b6040516316cf339960e21b8152600481018390526024810185905260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156137065761380e916020916000916138d6575b506040518093819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156137065761386b916020916000916138b9575b50604051809381926316cf339960e21b835260048301919060206040840193670de0b6b3a764000081520152565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156137065760009161389a575b5096613523565b6138b3915060203d6020116136ff576136f081836127fa565b38613893565b6138d09150823d84116136ff576136f081836127fa565b3861383d565b6138ed9150823d84116136ff576136f081836127fa565b386137ee565b8591506137a0565b61391591985060203d6020116136ff576136f081836127fa565b9638613512565b6139339150823d84116136ff576136f081836127fa565b386134bc565b6139509150823d84116136ff576136f081836127fa565b3861346d565b8591613414565b509450505090506135c15790565b506103e884106133fd565b604051633b59e48960e11b81526001600160801b0384166004820152602490fd5b6139b191945060203d6020116136ff576136f081836127fa565b92386133c0565b60209495506139d661337491863d88116136ff576136f081836127fa565b95945061335b565b6139f7915060203d6020116136ff576136f081836127fa565b386132d2565b9193929092826000526002602052613a22613a1b60406000206128e0565b8686612fb4565b90916040516330ed1f5d60e01b8152816004820152670de0b6b3a7640000602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561041257600091613fe3575b508060001981011161148a5760001981018511613ccd5750604051906316cf339960e21b948583526004830152602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561041257600091613c9b575b506040519063ec6e92cd60e01b8252600482015260208160248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561041257600091613c69575b50604051938452670de0b6b3a76400006004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041257600093613c35575b50662386f26fc1000083108015613c23575b613c115773__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90846000526003602052604060002091803b15610406576040516330f27d1f60e01b8152600481019390935263ffffffff93841660248401529216604482015260648101839052919060009083908180608481015b03915af49081156104125760008051602061529383398151915292602092613c02575b50604051908152a4565b613c0b906127cb565b38613bf8565b60405163a2f9e7b560e01b8152600490fd5b5068056bc75e2d631000008311613b67565b9092506020813d602011613c61575b81613c51602093836127fa565b8101031261040657519138613b55565b3d9150613c44565b90506020813d602011613c93575b81613c84602093836127fa565b81010312610406575138613b0f565b3d9150613c77565b90506020813d602011613cc5575b81613cb6602093836127fa565b81010312610406575138613acf565b3d9150613ca9565b93613ce46000999894969297939919860182612a26565b8060001981011161148a576103e890613d04906000198881019101613241565b11613fc157936000945b80151580613fb6575b15613f94576000198201811115613f8e5760001982015b604051906316cf339960e21b825280600483015289602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041257600092613f5a575b506040519163ec6e92cd60e01b8352600483015260208260248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041257600092613f26575b50604051916316cf339960e21b8352670de0b6b3a76400006004840152602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041257600092613ef2575b50662386f26fc1000082108015613ee0575b613c115784600052600360205260406000209273__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b15610406576040516330f27d1f60e01b8152600481019490945263ffffffff8a811660248601528d1660448501526064840183905260008460848173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af49384156104125787876000805160206152938339815191526020613ec5978d95613ecb9a613ed1575b50604051908152a4613227565b95612e4d565b94613d0e565b613eda906127cb565b38613eb8565b5068056bc75e2d631000008211613e14565b9091506020813d602011613f1e575b81613f0e602093836127fa565b8101031261040657519038613e02565b3d9150613f01565b9091506020813d602011613f52575b81613f42602093836127fa565b8101031261040657519038613db4565b3d9150613f35565b9091506020813d602011613f86575b81613f76602093836127fa565b8101031261040657519038613d74565b3d9150613f69565b80613d2e565b97985050505050505050613fa457565b6040516332581cb160e01b8152600490fd5b506103e88610613d17565b604051633b59e48960e11b81526001600160801b039091166004820152602490fd5b90506020813d60201161400d575b81613ffe602093836127fa565b81010312610406575138613a71565b3d9150613ff1565b9193929092826000526002602052614033613a1b60406000206128e0565b90916040516330ed1f5d60e01b8152816004820152670de0b6b3a7640000602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156104125760009161440e575b508060001981011161148a57600019810185116141d45750604051936316cf339960e21b85526004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4928315610412576000936141a0575b506040519263ec6e92cd60e01b8452600484015260208360248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041257600093613c355750662386f26fc1000083108015613c2357613c115773__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90846000526003602052604060002091803b15610406576040516330f27d1f60e01b8152600481019390935263ffffffff9384166024840152921660448201526064810183905291906000908390818060848101613bd5565b9092506020813d6020116141cc575b816141bc602093836127fa565b81010312610406575191386140de565b3d91506141af565b936141eb6000999894969297939919860182612a26565b8060001981011161148a576103e89061420b906000198881019101613241565b11613fc157936000945b80151580614403575b15613f945760001982018111156143fd5760001982015b604051906316cf339960e21b825280600483015289602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4918215610412576000926143c9575b506040519163ec6e92cd60e01b8352600483015260208260248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041257600092614395575b50662386f26fc1000082108015614383575b613c115784600052600360205260406000209273__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b15610406576040516330f27d1f60e01b8152600481019490945263ffffffff8a811660248601528d1660448501526064840183905260008460848173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af49384156104125787876000805160206152938339815191526020613ec5978d9561437d9a613ed15750604051908152a4613227565b94614215565b5068056bc75e2d6310000082116142cd565b9091506020813d6020116143c1575b816143b1602093836127fa565b81010312610406575190386142bb565b3d91506143a4565b9091506020813d6020116143f5575b816143e5602093836127fa565b810103126104065751903861427b565b3d91506143d8565b80614235565b506103e8861061421e565b90506020813d602011614438575b81614429602093836127fa565b81010312610406575138614082565b3d915061441c565b81614449575050565b60005460405163a9059cbb60e01b60208201526001600160a01b039283166024820152604480820194909452928352608083019291166001600160401b03831182841017610eab5761449d926040526151d3565b565b9161012093916144bc613268856000526002602052604060002090565b936144c8858484612fb4565b96909501516040516330ed1f5d60e01b815260048101829052670de0b6b3a7640000602482015290959060208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4801561370657614526916000916139de5750613208565b9687861161453a5750506132ec9550614f9c565b90925061456f9591935073__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__6020613324866000526003602052604060002090565b0381845af49384156137065761459f976000956139b8575061337460209495966000526003602052604060002090565b03915af493841561370657600094614971575b5081156135c1576103e86145cd866133e06133db8288612a26565b11613976579093926000919082905b84151580614966575b1561395d5761462595968786116000146139565787916040516316cf339960e21b8152600481018490526024810186905297602090899081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af497881561370657614673986020916000916139395750604051809a819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af497881561370657600098614945575b506146a588613234565b8111614869575b80151580614858575b6135c1576040516330ed1f5d60e01b815260048101829052602481019890985260208860448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156137065760009861482f575b50876135876147109284613227565b92818411156135c1576040516316cf339960e21b815260048101859052602481019290925260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4918215613706576147879260209160009161372857506040518094819263360816cf60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4918215613706576147de9260209160009161370b57506040516330ed1f5d60e01b815260048101889052602481019190915292839081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156137065761480f926000926136d55750612a26565b9181156135c157614825916135b1919796613227565b95949592936145dc565b6135879850906148506147109260203d6020116136ff576136f081836127fa565b985090614701565b5061486281613234565b88116146b5565b9650905061487961378f85613217565b9085821161493d575b6040516316cf339960e21b8152600481018390526024810185905260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613706576148ef916020916000916138d657506040518093819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156137065760009161491e575b50966146ac565b614937915060203d6020116136ff576136f081836127fa565b38614917565b859150614882565b61495f91985060203d6020116136ff576136f081836127fa565b963861469b565b506103e884106145e5565b61498b91945060203d6020116136ff576136f081836127fa565b92386145b2565b8161499b575050565b6000546040516323b872dd60e01b60208201526001600160a01b03928316602482015230604482015260648082019490945292835260a083019291166001600160401b03831182841017610eab5761449d926040526151d3565b909193928015614b4c57614a098186612a26565b60001981019190821161148a57614a1f91613241565b918215614b43575b6040516330ed1f5d60e01b80825260048201839052670de0b6b3a764000060248301529260209173__$cbaf8988f3c8d5491808e1d52afb16035a$__908381604481855af48015610412578491600091614b14575b509560446040518094819382528860048301526802b5e3af16b188000060248301525af492831561041257600093614ae4575b505011614ad9575b5080821015614ad15750915b808311614acd5750565b9150565b905091614ac3565b600a91500438614ab7565b9080929350813d8311614b0d575b614afc81836127fa565b810103126104065751903880614aaf565b503d614af2565b82819392503d8311614b3c575b614b2b81836127fa565b810103126104065783905138614a7c565b503d614b21565b60019250614a27565b505050565b9293909173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__614b7e856000526003602052604060002090565b906040958651956304afd7ff60e21b8752602098898880614ba86004988983019190602083019252565b0381875af497881561370657600098614f3c575b5073__$cbaf8988f3c8d5491808e1d52afb16035a$__958951926316cf339960e21b948585528c8580614bff8d888d840160209093929193604081019481520152565b03818c5af494851561370657614c37958e91600091614f1f575b508d518097819263ec6e92cd60e01b83528c83019190602083019252565b03818c5af494851561370657614c76958e91600091614f02575b508d51809781928a83528c8301919060206040840193670de0b6b3a764000081520152565b03818c5af494851561370657600095614ee3575b508c8c614ca7613a1b613268856000526002602052604060002090565b9990918b614cf8614cc2876000526003602052604060002090565b925163694f552560e01b815291820192835263ffffffff948516602084015293909b1660408201528a9283918291606090910190565b03915af496871561370657600097614ec4575b50614d1585613234565b8711614eae5750505050614d569089614d2e858a613227565b918a51809481926330ed1f5d60e01b988984528a840160209093929193604081019481520152565b0381895af490811561370657614d7392600092614e965750612a26565b958615614e865786811115614e785787519182528382019081526020810196909652948790869081906040015b0381865af494851561370657614dd8958891600091614e5b575b5087518097819263360816cf60e01b83528683019190602083019252565b0381865af4958615613706578795600097614e38575b505190815290810192835260208301949094528391829081906040015b03915af491821561370657600092614e2257505090565b6132ec9250803d106136ff576136f081836127fa565b614e0b919750614e5490873d89116136ff576136f081836127fa565b9690614dee565b614e729150823d84116136ff576136f081836127fa565b38614dba565b505050505050505050600090565b8751635fba374760e11b81528490fd5b6136f89192508b3d8d116136ff576136f081836127fa565b9750975097509750505050506132ec945061324b565b614edc9197508d803d106136ff576136f081836127fa565b9538614d0b565b614efb9195508d803d106136ff576136f081836127fa565b9338614c8a565b614f199150823d84116136ff576136f081836127fa565b38614c51565b614f369150823d84116136ff576136f081836127fa565b38614c19565b614f549198508a3d8c116136ff576136f081836127fa565b9638614bbc565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615614f8a57565b604051631afcd79f60e31b8152600490fd5b9293909173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__614fc9856000526003602052604060002090565b906040958651956304afd7ff60e21b8752602098898880614ff36004988983019190602083019252565b0381875af4978815613706576000986151b4575b5073__$cbaf8988f3c8d5491808e1d52afb16035a$__958951926316cf339960e21b948585528c858061504a8d888d840160209093929193604081019481520152565b03818c5af494851561370657615081958e91600091614f1f57508d518097819263ec6e92cd60e01b83528c83019190602083019252565b03818c5af494851561370657600095615195575b508c8c6150b2613a1b613268856000526002602052604060002090565b9990918b6150cd614cc2876000526003602052604060002090565b03915af496871561370657600097615176575b508a15615166576150f085613234565b871161515057505050506151099089614d2e858a613227565b0381895af49081156137065761512692600092614e965750612a26565b86811115614e78578751918252838201908152602081019690965294879086908190604001614da0565b9750975097509750505050506132ec945061449f565b8b51635fba374760e11b81528890fd5b61518e9197508d803d106136ff576136f081836127fa565b95386150e0565b6151ad9195508d803d106136ff576136f081836127fa565b9338615095565b6151cc9198508a3d8c116136ff576136f081836127fa565b9638615007565b906000602091828151910182855af115610412576000513d61522657506001600160a01b0381163b155b6152045750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b600114156151fd565b90615256575080511561524457805190602001fd5b60405163d6bda27560e01b8152600490fd5b81511580615289575b615267575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561525f56fe221f633c06e4399f005a7cec7ba7c4ff189e3fe19092cbafe32a5f176ffc797f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a2646970667358221220fe532b66fa2909875e253bf829abd322e32ece2c79e1c0e268a55dc748518f1664736f6c63430008180033",
-  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c8063070ab8c9146125f457806309f28be61461062b57806313b6eb09146125cd5780632d6ce61d146123d75780632ed66650146123b55780633013ce2914610ab85780633d65117b1461230d5780633f4ba83a14612270578063449a0388146121fb57806344a1a58e146121225780634765b3f914611fe4578063485cc95514611e185780634f1ef28614611be357806352d1902d14611b665780635c975abb14610d645780636084fa031461184257806362a626aa14611824578063692c3fc7146117cd5780636da66355146116ea5780636ec469b11461159c578063715018a6146115315780637404d95714611513578063793347981461129a5780637ed54782146111f25780638a69614e1461100c5780638da5cb5b14610fd65780639bbafcc314610f745780639fc46ecb14610ec1578063ad3cb1cc14610e57578063b1283e7714610d94578063b187bd2614610d64578063b762d83414610c41578063bcb1732214610c1c578063c9ac6b3114610adf578063d41c3a6514610ab8578063de57c54f14610654578063e9eb3ba51461062b578063eb44fdd3146104d7578063f0b7f3b1146102045763f2fde38b146101d557600080fd5b34610201576020366003190112610201576101fe6101f16127b5565b6101f9612ed0565b612e5c565b80f35b80fd5b50346102015760a0366003190112610201576024604460043582358235610229612785565b906001600160801b036084359261023e613175565b6102466131a0565b169081156104bf576000858152600260209081526040909120600581015491989163ffffffff16156104a857805460ff811615610496576001600160401b0390818160101c1642106104845760501c164211610472576102ae6102a8826128e0565b87612f09565b6102c06102ba826128e0565b84612f09565b82861361045657828614610456576102e79060046102de8886612e14565b91015490612e2d565b61043a5764e8d4a510008084029064e8d4a50fff61030783868a8c61449f565b01049480861161041e575060a4899261033f89936103258933614992565b846000526002865260066040600020015490878b87614015565b600060018060a01b0360015416896040519c8d9687956330906fad60e21b87523360048801528601528401528660648401528760848401525af1958615610412576000966103de575b506040519384528684015260408301526060820152827fc33c3b4ea19b40f02901978a93e787a0caa1d6fd23dfa228ae891fe96867e17160803393a460016000805160206152f383398151915255604051908152f35b9095508681813d831161040b575b6103f681836127fa565b8101031261040657519487610388565b600080fd5b503d6103ec565b6040513d6000823e3d90fd5b858991846040519263f6daf99360e01b84526004840152820152fd5b8691859160405192631150381b60e11b84526004840152820152fd5b8786848460405192631150381b60e11b84526004840152820152fd5b60405163b2094b5960e01b8152600490fd5b604051630ee8c41760e31b8152600490fd5b604051635a90bb8d60e11b8152600490fd5b50604051634cba20ef60e01b815260048101879052fd5b604051633b59e48960e11b8152600481018390528790fd5b503461020157602036600319011261020157600435906040516104f9816127de565b8181528160208201528160408201528160608201528160808201528160a08201528160c08201528160e08201526101008281830152610120928084840152610140908082850152806101608095015261056886600052600260205263ffffffff60056040600020015416151590565b15610612579061058760408361018098879695526002602052206128e0565b916040519583511515875260208401511515602088015260408401516001600160401b03809116604089015260608501511660608801526080840151608088015260a084015160a088015260c084015160c088015260e084015160e0880152818401519163ffffffff8093169088015280840151908701528183015116908501520151151590820152f35b604051634cba20ef60e01b815260048101879052602490fd5b50346102015780600319360112610201576001546040516001600160a01b039091168152602090f35b50346102015760c036600319011261020157606435906001600160401b038216820361040657608435906001600160401b038216820361040657610696612ed0565b61069e613175565b600454916106ab83612e4d565b6004556024356004351215610a8e57816044351315610a8e576106dd6044356106d8600435602435612e14565b612e2d565b610a8e576001600160401b0381166001600160401b0385161015610a7c5766038d7ea4c6800060a435108015610a67575b610a555761072b604435610726600435602435612e14565b612f99565b9180831380610a48575b15610a0d5763ffffffff83161580156109fb575b6109d457604051610759816127de565b600181528160208201526001600160401b03861660408201526001600160401b038316606082015281608082015260043560a082015260243560c082015260443560e082015263ffffffff841661010082015260a4356101208201528161014082015281610160820152848252600260205260076040832082511515815460ff61ff006020870151151560081b1692169061ffff19161717815561082b6001600160401b03604085015116829069ffffffffffffffff000082549160101b169069ffffffffffffffff00001916179055565b6060830151815467ffffffffffffffff60501b191660509190911b67ffffffffffffffff60501b161781556080830151600182015560a0830151600282015560c0830151600382015560e083015160048201556005810163ffffffff6101008501511663ffffffff198254161790556101208301516006820155019063ffffffff6101408201511664ff000000006101608454930151151560201b169164ffffffffff19161717905560036020526040812073__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b156109d0576040519063d886284b60e01b8252600482015263ffffffff84166024820152818160448173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af480156109c5576109b1575b602085807f2453c1a297c658a5b6905526d84f0b4ac79c0d9cc5fb5601664602efee53121460e08a63ffffffff8a6001600160401b038b816040519516855216888401526004356040840152602435606084015260443560808401521660a082015260a43560c0820152a2604051908152f35b6109bb82916127cb565b610201578061093e565b6040513d84823e3d90fd5b5080fd5b60405163515eb6ff60e11b815263ffffffff84166004820152620f42406024820152604490fd5b50620f424063ffffffff841611610749565b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081c985b99d94818dbdd5b9d606a1b6044820152606490fd5b50620f4240831315610735565b604051630b281d1960e31b8152600490fd5b5069152d02c7e14af680000060a4351161070e565b60405163536a71af60e01b8152600490fd5b60405163040b1c7360e21b8152600480359082015260248035908201526044803590820152606490fd5b5034610201578060031936011261020157546040516001600160a01b039091168152602090f35b50346102015760803660031901126102015760043560246044358135610b03612785565b610b2385600052600260205263ffffffff60056040600020015416151590565b15610c04576001600160801b0316928315610bee57846000526002602052610b4e60406000206128e0565b610b588184612f09565b610b628185612f09565b838313610bd157838314610bd157610b899060e0610b808587612e14565b91015190612e2d565b610bb5575060209364e8d4a50fff92610bab9264e8d4a510008096029261449f565b0104604051908152f35b9160449260405192631150381b60e11b84526004840152820152fd5b509160449260405192631150381b60e11b84526004840152820152fd5b604051633b59e48960e11b815260048101859052fd5b604051634cba20ef60e01b8152600481018690528490fd5b5034610201578060031936011261020157602060405169152d02c7e14af68000008152f35b503461020157610c5036612759565b610c58612ed0565b610c7882600052600260205263ffffffff60056040600020015416151590565b15610d4b57818352600260205260408320805460ff8160081c16610d325760028201548084128015610d25575b610cfa57506001820183905561ffff1916610100178155600701805464ffffffffff191690556040519081527fca3a568dfb73dd7b7b3c0b28f130edbf4b688f534869c3de083664c43c11430e90602090a280f35b6003830154604051638a228b0d60e01b81526004810186905260248101929092526044820152606490fd5b5060038301548413610ca5565b604051634e0558fb60e01b815260048101859052602490fd5b604051634cba20ef60e01b815260048101839052602490fd5b5034610201578060031936011261020157602060ff6000805160206152d383398151915254166040519015158152f35b503461020157602036600319011261020157604061018091600435815260026020522060ff8154916001600160401b0390600181015490600281015491600382015460048301549063ffffffff94856005860154169360076006870154960154976040519a8a811615158c528a8160081c16151560208d0152818160101c1660408d015260501c1660608b015260808a015260a089015260c088015260e0870152610100860152610120850152811661014084015260201c161515610160820152f35b503461020157806003193601126102015760405160408101908082106001600160401b03831117610eab57610ea79160405260058152640352e302e360dc1b602082015260405191829182612897565b0390f35b634e487b7160e01b600052604160045260246000fd5b50346102015760203660031901126102015760015460405163eb02c30160e01b815260048035908201529060a090829060249082906001600160a01b03165afa9081156104125760209291610f45575b5064e8d4a50fff610bab64e8d4a5100092836001600160801b0360608301511602908051906040878201519101519161324b565b610f67915060a03d60a011610f6d575b610f5f81836127fa565b810190612985565b38610f11565b503d610f55565b503461020157610f8336612759565b610f8e929192612ed0565b610fae83600052600260205263ffffffff60056040600020015416151590565b15610fbd576101fe9192612a33565b604051634cba20ef60e01b815260048101849052602490fd5b50346102015780600319360112610201576000805160206152b3833981519152546040516001600160a01b039091168152602090f35b503461020157602090816003193601126102015760043561102b613175565b6110336131a0565b60015460405163eb02c30160e01b8152600481018390526001600160a01b03939184169060a081602481855afa9081156111c557869084926111d0575b5060249192604051928380926331a9108f60e11b82528860048301525afa9081156111c5578391611198575b508433911603611180578051825260028552846110bb604084206128e0565b01511561116757506110cc826130b2565b926110d78433614440565b60015416803b156109d057818091602460405180948193630852cd8d60e31b83528860048401525af180156109c557611153575b5050604051908282527ff18ca9717b47ea7629d17b5d7b2ede46e864155725629e7d0347924c2f6d112d843393a360016000805160206152f383398151915255604051908152f35b61115d82916127cb565b610201578061110b565b602490516040519063b23e5f9f60e01b82526004820152fd5b60405163d86ad9cf60e01b8152336004820152602490fd5b6111b89150863d88116111be575b6111b081836127fa565b8101906129f8565b3861109c565b503d6111a6565b6040513d85823e3d90fd5b602492506111ec9060a03d60a011610f6d57610f5f81836127fa565b91611070565b50346102015760403660031901126102015761120c61276f565b60015460405163eb02c30160e01b815260048035908201529060a090829060249082906001600160a01b03165afa9283156104125760209364e8d4a50fff92610bab929161127b575b5064e8d4a51000938151906040866001600160801b03898601519316029301519161449f565b611294915060a03d60a011610f6d57610f5f81836127fa565b38611255565b5034610201576112a93661286d565b906112b2613175565b6112ba6131a0565b6001600160801b03908181169384156114fa5760015460405163eb02c30160e01b8152600481018390526001600160a01b03918216969195919060a0816024818b5afa908115610412576000916114db575b5060405180986331a9108f60e11b825285600483015281602460209b8c935afa908115610412576000916114be575b5087339116036111805761134f81516131d0565b805188820190815190604084019064e8d4a50fff61137b83519264e8d4a5100093848a0296879261449f565b0104958087116114a057506060928994928c6113b89361139b8a33614992565b600286519451915192856000525260066040600020015493614015565b015116019484861161148a576001541690813b15610406576040516361d6883d60e01b8152600481018490526001600160801b0387166024820152916000908390604490829084905af1908115610412577fa9efae0c21a2db158c2af2d36b5c18dc14d792a79dfab662442466a80095ea5f9261145d9261147b575b50604080516001600160801b039687168152958816602087015285015233939081906060820190565b0390a360016000805160206152f38339815191525560405191168152f35b611484906127cb565b88611434565b634e487b7160e01b600052601160045260246000fd5b866044916040519163f6daf99360e01b835260048301526024820152fd5b6114d59150893d8b116111be576111b081836127fa565b8961133b565b6114f4915060a03d60a011610f6d57610f5f81836127fa565b8861130c565b604051633b59e48960e11b815260048101869052602490fd5b50346102015780600319360112610201576020604051620f42408152f35b503461020157806003193601126102015761154a612ed0565b6000805160206152b383398151915280546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034610201576115ab36612759565b91906115cd81600052600260205263ffffffff60056040600020015416151590565b156116d257808252602092600284526115e8604084206128e0565b906115f38282612f09565b60e0820151908181019182128582129080158216911516176116be579161161b918693612fb4565b928452600382526040808520905163694f552560e01b8152600481019190915263ffffffff9182166024820152921660448301528180606481015b038173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90813b15612737576040516330f27d1f60e01b8152600481019590955263ffffffff908116602486015291909116604484015260648301849052829060849082905af4801561272c57612708575b50602060008051602061529383398151915291604051908152a480f35b60008051602061529383398151915291956127246020926127cb565b9591506126eb565b6040513d88823e3d90fd5b8380fd5b6044848660405191631150381b60e11b835260048301526024820152fd5b6040906003190112610406576004359060243590565b602435906001600160801b038216820361040657565b606435906001600160801b038216820361040657565b606090600319011261040657600435906024359060443590565b600435906001600160a01b038216820361040657565b6001600160401b038111610eab57604052565b61018081019081106001600160401b03821117610eab57604052565b90601f801991011681019081106001600160401b03821117610eab57604052565b6001600160401b038111610eab57601f01601f191660200190565b9291926128428261281b565b9161285060405193846127fa565b829481845281830111610406578281602093846000960137010152565b606090600319011261040657600435906024356001600160801b0381168103610406579060443590565b6020808252825181830181905290939260005b8281106128cc57505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016128aa565b906040516128ed816127de565b61016060ff8294805482811615158552828160081c16151560208601526001600160401b0390818160101c16604087015260501c16606085015260018101546080850152600281015460a0850152600381015460c0850152600481015460e0850152600763ffffffff91826005820154166101008701526006810154610120870152015490811661014085015260201c161515910152565b908160a091031261040657604051906001600160401b039060a0830182811184821017610eab576040528051835260208101516020840152604081015160408401526060810151906001600160801b03821682036104065760809160608501520151908116810361040657608082015290565b9081602091031261040657516001600160a01b03811681036104065790565b90816020910312610406575190565b9190820180921161148a57565b9081600052600260205260406000209060ff825460081c1615612dfb5760078201549160ff8360201c16612df5578115612dc65760015460405163348dbbed60e21b8152600481018690529190600090839060249082906001600160a01b03165afa91821561041257600092612d1f575b508151928363ffffffff86161015612cc357612ac69063ffffffff8616612a26565b91838311612cbb575b60018281015490546001600160a01b0316919063ffffffff87165b858110612b7c5750505050918160609363ffffffff7fcf156953c2640827200d7348c90cddc0fd140a8dd5f3cfd29bf0b2a855c34b189694166007820154938163ffffffff19861617600784015583149384612b5d575b50505063ffffffff6040519316835260208301526040820152a2565b64ffffffffff1916176401000000001760079190910155388080612b41565b8251811015612ca55760208160051b840101519060405163eb02c30160e01b815282600482015260a081602481895afa90811561041257600091612c86575b506040516331a9108f60e11b815260048101849052926020846024818a5afa801561041257600194600091612c67575b5085602084015113159283612c59575b7f1a81eb5d53aa7bec98cadd0a6303be87e540f77ba90e63cd945e49b8eb697b0a916040918515612c5057606001516001600160801b0316945b825195865215156020860152868060a01b031693a301612aea565b50600094612c35565b604081015187129350612bfb565b612c80915060203d6020116111be576111b081836127fa565b38612beb565b612c9f915060a03d60a011610f6d57610f5f81836127fa565b38612bbb565b634e487b7160e01b600052603260045260246000fd5b839250612acf565b50606092507fcf156953c2640827200d7348c90cddc0fd140a8dd5f3cfd29bf0b2a855c34b18939150600764010000000064ff000000001984161791015563ffffffff60405191818116835216602082015260016040820152a2565b9091503d806000833e612d3281836127fa565b6020828281010312610406578151916001600160401b03831161040657818101601f8483010112156104065782810151906001600160401b038211610eab5760405193612d8560208460051b01866127fa565b82855260208086019360051b828401010193820184116104065701602001905b828210612db6575050509038612aa4565b8151815260209182019101612da5565b60405162461bcd60e51b815260206004820152600760248201526606c696d69743d360cc1b6044820152606490fd5b50505050565b60405163b23e5f9f60e01b815260048101849052602490fd5b8181039291600013801582851316918412161761148a57565b8115612e37570790565b634e487b7160e01b600052601260045260246000fd5b600019811461148a5760010190565b6001600160a01b03908116908115612eb7576000805160206152b383398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b604051631e4fbdf760e01b815260006004820152602490fd5b6000805160206152b3833981519152546001600160a01b03163303612ef157565b60405163118cdaa760e01b8152336004820152602490fd5b9060a0810180518084128015612f8c575b612f61575060e0612f2f612f3a925185612e14565b920191825190612e2d565b612f42575050565b6044925051604051916382fe647b60e01b835260048301526024820152fd5b60c0830151604051638a228b0d60e01b81526004810186905260248101929092526044820152606490fd5b5060c08301518413612f1a565b8115612e3757600160ff1b811460001983141661148a570590565b9290612ff7612fe691612fef612fd060a0870197885190612e14565b9160e087019263ffffffff958691855190612f99565b16975190612e14565b905190612f99565b600019810190811360011661148a578161010091169301511680841090816130a8575b50156130635781831161302957565b60405162461bcd60e51b8152602060048201526012602482015271496e76616c69642072616e67652062696e7360701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f52616e67652062696e73206f7574206f6620626f756e647300000000000000006044820152606490fd5b905082103861301a565b60015460405163eb02c30160e01b8152600481019290925260a090829060249082906001600160a01b03165afa90811561041257600091613156575b508051600052600260205261310660406000206128e0565b60208101511561314f5760806020830151910151809113159081613141575b501561313b57606001516001600160801b031690565b50600090565b905060408201511338613125565b5050600090565b61316f915060a03d60a011610f6d57610f5f81836127fa565b386130ee565b60ff6000805160206152d3833981519152541661318e57565b60405163d93c066560e01b8152600490fd5b6000805160206152f383398151915260028154146131be5760029055565b604051633ee5aeb560e01b8152600490fd5b600052600260205260406000205460ff811615610496576001600160401b0390818160101c1642106104845760501c16421161047257565b60001981019190821161148a57565b906103e891820391821161148a57565b9190820391821161148a57565b8015612e37576000190490565b8115612e37570490565b91610120939161326d613268856000526002602052604060002090565b6128e0565b93613279858484612fb4565b96909501516040516330ed1f5d60e01b815260048101829052670de0b6b3a7640000602482015290959060208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af48015613706576132d8916000916139de575b50613208565b968786116132ef5750506132ec9550614b51565b90565b9092506133439591935073__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__6020613324866000526003602052604060002090565b604051809981926304afd7ff60e21b8352600483019190602083019252565b0381845af4938415613706576133ad976000956139b8575b5061337460209495966000526003602052604060002090565b60405163694f552560e01b8152600481019190915263ffffffff9182166024820152921660448301529095869190829081906064820190565b03915af493841561370657600094613997575b5081156135c1576103e86133e5866133e06133db8288612a26565b613208565b613241565b11613976579093926000919082905b8415158061396b575b1561395d5761343e95968786116000146139565787915b6040516316cf339960e21b8152600481018490526024810186905297602090899081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156137065761348d98602091600091613939575b50604051809a819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613706576134ea9860209160009161391c575b50604051809a81926316cf339960e21b835260048301919060206040840193670de0b6b3a764000081520152565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4978815613706576000986138fb575b5061351c88613234565b811161377f575b8015158061376e575b6135c1576040516330ed1f5d60e01b815260048101829052602481019890985260208860448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af497881561370657600098613745575b508761358761358c9284613227565b612a26565b9081156135c1578181116135d3575b5081156135c1576135b7916135b1919796613227565b93612e4d565b95949592936133f4565b604051635fba374760e11b8152600490fd5b6040516316cf339960e21b8152600481019190915260248101829052909260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49182156137065761364492602091600091613728575b506040518094819263360816cf60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49182156137065761369c9260209160009161370b575b506040516330ed1f5d60e01b815260048101889052602481019190915292839081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613706576136ce926000926136d5575b50612a26565b913861359b565b6136f891925060203d6020116136ff575b6136f081836127fa565b810190612a17565b90386136c8565b503d6136e6565b610412565b6137229150823d84116136ff576136f081836127fa565b38613673565b61373f9150823d84116136ff576136f081836127fa565b38613624565b61358798509061376661358c9260203d6020116136ff576136f081836127fa565b985090613578565b5061377881613234565b881161352c565b9650905061379761378f85613217565b8685896149f5565b908582116138f3575b6040516316cf339960e21b8152600481018390526024810185905260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156137065761380e916020916000916138d6575b506040518093819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156137065761386b916020916000916138b9575b50604051809381926316cf339960e21b835260048301919060206040840193670de0b6b3a764000081520152565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156137065760009161389a575b5096613523565b6138b3915060203d6020116136ff576136f081836127fa565b38613893565b6138d09150823d84116136ff576136f081836127fa565b3861383d565b6138ed9150823d84116136ff576136f081836127fa565b386137ee565b8591506137a0565b61391591985060203d6020116136ff576136f081836127fa565b9638613512565b6139339150823d84116136ff576136f081836127fa565b386134bc565b6139509150823d84116136ff576136f081836127fa565b3861346d565b8591613414565b509450505090506135c15790565b506103e884106133fd565b604051633b59e48960e11b81526001600160801b0384166004820152602490fd5b6139b191945060203d6020116136ff576136f081836127fa565b92386133c0565b60209495506139d661337491863d88116136ff576136f081836127fa565b95945061335b565b6139f7915060203d6020116136ff576136f081836127fa565b386132d2565b9193929092826000526002602052613a22613a1b60406000206128e0565b8686612fb4565b90916040516330ed1f5d60e01b8152816004820152670de0b6b3a7640000602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561041257600091613fe3575b508060001981011161148a5760001981018511613ccd5750604051906316cf339960e21b948583526004830152602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561041257600091613c9b575b506040519063ec6e92cd60e01b8252600482015260208160248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af490811561041257600091613c69575b50604051938452670de0b6b3a76400006004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041257600093613c35575b50662386f26fc1000083108015613c23575b613c115773__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90846000526003602052604060002091803b15610406576040516330f27d1f60e01b8152600481019390935263ffffffff93841660248401529216604482015260648101839052919060009083908180608481015b03915af49081156104125760008051602061529383398151915292602092613c02575b50604051908152a4565b613c0b906127cb565b38613bf8565b60405163a2f9e7b560e01b8152600490fd5b5068056bc75e2d631000008311613b67565b9092506020813d602011613c61575b81613c51602093836127fa565b8101031261040657519138613b55565b3d9150613c44565b90506020813d602011613c93575b81613c84602093836127fa565b81010312610406575138613b0f565b3d9150613c77565b90506020813d602011613cc5575b81613cb6602093836127fa565b81010312610406575138613acf565b3d9150613ca9565b93613ce46000999894969297939919860182612a26565b8060001981011161148a576103e890613d04906000198881019101613241565b11613fc157936000945b80151580613fb6575b15613f94576000198201811115613f8e5760001982015b604051906316cf339960e21b825280600483015289602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041257600092613f5a575b506040519163ec6e92cd60e01b8352600483015260208260248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041257600092613f26575b50604051916316cf339960e21b8352670de0b6b3a76400006004840152602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041257600092613ef2575b50662386f26fc1000082108015613ee0575b613c115784600052600360205260406000209273__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b15610406576040516330f27d1f60e01b8152600481019490945263ffffffff8a811660248601528d1660448501526064840183905260008460848173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af49384156104125787876000805160206152938339815191526020613ec5978d95613ecb9a613ed1575b50604051908152a4613227565b95612e4d565b94613d0e565b613eda906127cb565b38613eb8565b5068056bc75e2d631000008211613e14565b9091506020813d602011613f1e575b81613f0e602093836127fa565b8101031261040657519038613e02565b3d9150613f01565b9091506020813d602011613f52575b81613f42602093836127fa565b8101031261040657519038613db4565b3d9150613f35565b9091506020813d602011613f86575b81613f76602093836127fa565b8101031261040657519038613d74565b3d9150613f69565b80613d2e565b97985050505050505050613fa457565b6040516332581cb160e01b8152600490fd5b506103e88610613d17565b604051633b59e48960e11b81526001600160801b039091166004820152602490fd5b90506020813d60201161400d575b81613ffe602093836127fa565b81010312610406575138613a71565b3d9150613ff1565b9193929092826000526002602052614033613a1b60406000206128e0565b90916040516330ed1f5d60e01b8152816004820152670de0b6b3a7640000602482015260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156104125760009161440e575b508060001981011161148a57600019810185116141d45750604051936316cf339960e21b85526004850152602484015260208360448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4928315610412576000936141a0575b506040519263ec6e92cd60e01b8452600484015260208360248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af492831561041257600093613c355750662386f26fc1000083108015613c2357613c115773__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__90846000526003602052604060002091803b15610406576040516330f27d1f60e01b8152600481019390935263ffffffff9384166024840152921660448201526064810183905291906000908390818060848101613bd5565b9092506020813d6020116141cc575b816141bc602093836127fa565b81010312610406575191386140de565b3d91506141af565b936141eb6000999894969297939919860182612a26565b8060001981011161148a576103e89061420b906000198881019101613241565b11613fc157936000945b80151580614403575b15613f945760001982018111156143fd5760001982015b604051906316cf339960e21b825280600483015289602483015260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4918215610412576000926143c9575b506040519163ec6e92cd60e01b8352600483015260208260248173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af491821561041257600092614395575b50662386f26fc1000082108015614383575b613c115784600052600360205260406000209273__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__3b15610406576040516330f27d1f60e01b8152600481019490945263ffffffff8a811660248601528d1660448501526064840183905260008460848173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__5af49384156104125787876000805160206152938339815191526020613ec5978d9561437d9a613ed15750604051908152a4613227565b94614215565b5068056bc75e2d6310000082116142cd565b9091506020813d6020116143c1575b816143b1602093836127fa565b81010312610406575190386142bb565b3d91506143a4565b9091506020813d6020116143f5575b816143e5602093836127fa565b810103126104065751903861427b565b3d91506143d8565b80614235565b506103e8861061421e565b90506020813d602011614438575b81614429602093836127fa565b81010312610406575138614082565b3d915061441c565b81614449575050565b60005460405163a9059cbb60e01b60208201526001600160a01b039283166024820152604480820194909452928352608083019291166001600160401b03831182841017610eab5761449d926040526151d3565b565b9161012093916144bc613268856000526002602052604060002090565b936144c8858484612fb4565b96909501516040516330ed1f5d60e01b815260048101829052670de0b6b3a7640000602482015290959060208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4801561370657614526916000916139de5750613208565b9687861161453a5750506132ec9550614f9c565b90925061456f9591935073__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__6020613324866000526003602052604060002090565b0381845af49384156137065761459f976000956139b8575061337460209495966000526003602052604060002090565b03915af493841561370657600094614971575b5081156135c1576103e86145cd866133e06133db8288612a26565b11613976579093926000919082905b84151580614966575b1561395d5761462595968786116000146139565787916040516316cf339960e21b8152600481018490526024810186905297602090899081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af497881561370657614673986020916000916139395750604051809a819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af497881561370657600098614945575b506146a588613234565b8111614869575b80151580614858575b6135c1576040516330ed1f5d60e01b815260048101829052602481019890985260208860448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49788156137065760009861482f575b50876135876147109284613227565b92818411156135c1576040516316cf339960e21b815260048101859052602481019290925260208260448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4918215613706576147879260209160009161372857506040518094819263360816cf60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4918215613706576147de9260209160009161370b57506040516330ed1f5d60e01b815260048101889052602481019190915292839081906044820190565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156137065761480f926000926136d55750612a26565b9181156135c157614825916135b1919796613227565b95949592936145dc565b6135879850906148506147109260203d6020116136ff576136f081836127fa565b985090614701565b5061486281613234565b88116146b5565b9650905061487961378f85613217565b9085821161493d575b6040516316cf339960e21b8152600481018390526024810185905260208160448173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af4908115613706576148ef916020916000916138d657506040518093819263ec6e92cd60e01b8352600483019190602083019252565b038173__$cbaf8988f3c8d5491808e1d52afb16035a$__5af49081156137065760009161491e575b50966146ac565b614937915060203d6020116136ff576136f081836127fa565b38614917565b859150614882565b61495f91985060203d6020116136ff576136f081836127fa565b963861469b565b506103e884106145e5565b61498b91945060203d6020116136ff576136f081836127fa565b92386145b2565b8161499b575050565b6000546040516323b872dd60e01b60208201526001600160a01b03928316602482015230604482015260648082019490945292835260a083019291166001600160401b03831182841017610eab5761449d926040526151d3565b909193928015614b4c57614a098186612a26565b60001981019190821161148a57614a1f91613241565b918215614b43575b6040516330ed1f5d60e01b80825260048201839052670de0b6b3a764000060248301529260209173__$cbaf8988f3c8d5491808e1d52afb16035a$__908381604481855af48015610412578491600091614b14575b509560446040518094819382528860048301526802b5e3af16b188000060248301525af492831561041257600093614ae4575b505011614ad9575b5080821015614ad15750915b808311614acd5750565b9150565b905091614ac3565b600a91500438614ab7565b9080929350813d8311614b0d575b614afc81836127fa565b810103126104065751903880614aaf565b503d614af2565b82819392503d8311614b3c575b614b2b81836127fa565b810103126104065783905138614a7c565b503d614b21565b60019250614a27565b505050565b9293909173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__614b7e856000526003602052604060002090565b906040958651956304afd7ff60e21b8752602098898880614ba86004988983019190602083019252565b0381875af497881561370657600098614f3c575b5073__$cbaf8988f3c8d5491808e1d52afb16035a$__958951926316cf339960e21b948585528c8580614bff8d888d840160209093929193604081019481520152565b03818c5af494851561370657614c37958e91600091614f1f575b508d518097819263ec6e92cd60e01b83528c83019190602083019252565b03818c5af494851561370657614c76958e91600091614f02575b508d51809781928a83528c8301919060206040840193670de0b6b3a764000081520152565b03818c5af494851561370657600095614ee3575b508c8c614ca7613a1b613268856000526002602052604060002090565b9990918b614cf8614cc2876000526003602052604060002090565b925163694f552560e01b815291820192835263ffffffff948516602084015293909b1660408201528a9283918291606090910190565b03915af496871561370657600097614ec4575b50614d1585613234565b8711614eae5750505050614d569089614d2e858a613227565b918a51809481926330ed1f5d60e01b988984528a840160209093929193604081019481520152565b0381895af490811561370657614d7392600092614e965750612a26565b958615614e865786811115614e785787519182528382019081526020810196909652948790869081906040015b0381865af494851561370657614dd8958891600091614e5b575b5087518097819263360816cf60e01b83528683019190602083019252565b0381865af4958615613706578795600097614e38575b505190815290810192835260208301949094528391829081906040015b03915af491821561370657600092614e2257505090565b6132ec9250803d106136ff576136f081836127fa565b614e0b919750614e5490873d89116136ff576136f081836127fa565b9690614dee565b614e729150823d84116136ff576136f081836127fa565b38614dba565b505050505050505050600090565b8751635fba374760e11b81528490fd5b6136f89192508b3d8d116136ff576136f081836127fa565b9750975097509750505050506132ec945061324b565b614edc9197508d803d106136ff576136f081836127fa565b9538614d0b565b614efb9195508d803d106136ff576136f081836127fa565b9338614c8a565b614f199150823d84116136ff576136f081836127fa565b38614c51565b614f369150823d84116136ff576136f081836127fa565b38614c19565b614f549198508a3d8c116136ff576136f081836127fa565b9638614bbc565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615614f8a57565b604051631afcd79f60e31b8152600490fd5b9293909173__$e8b8ff73fdf5e99c3df6a4b39aa1f5b319$__614fc9856000526003602052604060002090565b906040958651956304afd7ff60e21b8752602098898880614ff36004988983019190602083019252565b0381875af4978815613706576000986151b4575b5073__$cbaf8988f3c8d5491808e1d52afb16035a$__958951926316cf339960e21b948585528c858061504a8d888d840160209093929193604081019481520152565b03818c5af494851561370657615081958e91600091614f1f57508d518097819263ec6e92cd60e01b83528c83019190602083019252565b03818c5af494851561370657600095615195575b508c8c6150b2613a1b613268856000526002602052604060002090565b9990918b6150cd614cc2876000526003602052604060002090565b03915af496871561370657600097615176575b508a15615166576150f085613234565b871161515057505050506151099089614d2e858a613227565b0381895af49081156137065761512692600092614e965750612a26565b86811115614e78578751918252838201908152602081019690965294879086908190604001614da0565b9750975097509750505050506132ec945061449f565b8b51635fba374760e11b81528890fd5b61518e9197508d803d106136ff576136f081836127fa565b95386150e0565b6151ad9195508d803d106136ff576136f081836127fa565b9338615095565b6151cc9198508a3d8c116136ff576136f081836127fa565b9638615007565b906000602091828151910182855af115610412576000513d61522657506001600160a01b0381163b155b6152045750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b600114156151fd565b90615256575080511561524457805190602001fd5b60405163d6bda27560e01b8152600490fd5b81511580615289575b615267575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561525f56fe221f633c06e4399f005a7cec7ba7c4ff189e3fe19092cbafe32a5f176ffc797f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a2646970667358221220fe532b66fa2909875e253bf829abd322e32ece2c79e1c0e268a55dc748518f1664736f6c63430008180033",
-  "linkReferences": {
-    "contracts/libraries/FixedPointMath.sol": {
-      "FixedPointMathU": [
-        {
-          "length": 20,
-          "start": 13019
-        },
-        {
-          "length": 20,
-          "start": 13426
-        },
-        {
-          "length": 20,
-          "start": 13505
-        },
-        {
-          "length": 20,
-          "start": 13598
-        },
-        {
-          "length": 20,
-          "start": 13700
-        },
-        {
-          "length": 20,
-          "start": 13865
-        },
-        {
-          "length": 20,
-          "start": 13944
-        },
-        {
-          "length": 20,
-          "start": 14032
-        },
-        {
-          "length": 20,
-          "start": 14323
-        },
-        {
-          "length": 20,
-          "start": 14402
-        },
-        {
-          "length": 20,
-          "start": 14495
-        },
-        {
-          "length": 20,
-          "start": 14973
-        },
-        {
-          "length": 20,
-          "start": 15067
-        },
-        {
-          "length": 20,
-          "start": 15131
-        },
-        {
-          "length": 20,
-          "start": 15201
-        },
-        {
-          "length": 20,
-          "start": 15744
-        },
-        {
-          "length": 20,
-          "start": 15808
-        },
-        {
-          "length": 20,
-          "start": 15886
-        },
-        {
-          "length": 20,
-          "start": 16526
-        },
-        {
-          "length": 20,
-          "start": 16618
-        },
-        {
-          "length": 20,
-          "start": 16682
-        },
-        {
-          "length": 20,
-          "start": 17031
-        },
-        {
-          "length": 20,
-          "start": 17095
-        },
-        {
-          "length": 20,
-          "start": 17706
-        },
-        {
-          "length": 20,
-          "start": 18009
-        },
-        {
-          "length": 20,
-          "start": 18087
-        },
-        {
-          "length": 20,
-          "start": 18189
-        },
-        {
-          "length": 20,
-          "start": 18285
-        },
-        {
-          "length": 20,
-          "start": 18363
-        },
-        {
-          "length": 20,
-          "start": 18450
-        },
-        {
-          "length": 20,
-          "start": 18645
-        },
-        {
-          "length": 20,
-          "start": 18723
-        },
-        {
-          "length": 20,
-          "start": 19072
-        },
-        {
-          "length": 20,
-          "start": 19439
-        },
-        {
-          "length": 20,
-          "start": 20538
-        }
-      ]
-    },
-    "contracts/libraries/LazyMulSegmentTree.sol": {
-      "LazyMulSegmentTree": [
-        {
-          "length": 20,
-          "start": 2319
-        },
-        {
-          "length": 20,
-          "start": 2382
-        },
-        {
-          "length": 20,
-          "start": 5770
-        },
-        {
-          "length": 20,
-          "start": 9914
-        },
-        {
-          "length": 20,
-          "start": 13099
-        },
-        {
-          "length": 20,
-          "start": 15261
-        },
-        {
-          "length": 20,
-          "start": 15961
-        },
-        {
-          "length": 20,
-          "start": 16042
-        },
-        {
-          "length": 20,
-          "start": 16740
-        },
-        {
-          "length": 20,
-          "start": 17170
-        },
-        {
-          "length": 20,
-          "start": 17251
-        },
-        {
-          "length": 20,
-          "start": 17782
-        },
-        {
-          "length": 20,
-          "start": 19335
-        },
-        {
-          "length": 20,
-          "start": 20434
-        }
-      ]
-    }
-  },
-  "deployedLinkReferences": {
-    "contracts/libraries/FixedPointMath.sol": {
-      "FixedPointMathU": [
-        {
-          "length": 20,
-          "start": 12971
-        },
-        {
-          "length": 20,
-          "start": 13378
-        },
-        {
-          "length": 20,
-          "start": 13457
-        },
-        {
-          "length": 20,
-          "start": 13550
-        },
-        {
-          "length": 20,
-          "start": 13652
-        },
-        {
-          "length": 20,
-          "start": 13817
-        },
-        {
-          "length": 20,
-          "start": 13896
-        },
-        {
-          "length": 20,
-          "start": 13984
-        },
-        {
-          "length": 20,
-          "start": 14275
-        },
-        {
-          "length": 20,
-          "start": 14354
-        },
-        {
-          "length": 20,
-          "start": 14447
-        },
-        {
-          "length": 20,
-          "start": 14925
-        },
-        {
-          "length": 20,
-          "start": 15019
-        },
-        {
-          "length": 20,
-          "start": 15083
-        },
-        {
-          "length": 20,
-          "start": 15153
-        },
-        {
-          "length": 20,
-          "start": 15696
-        },
-        {
-          "length": 20,
-          "start": 15760
-        },
-        {
-          "length": 20,
-          "start": 15838
-        },
-        {
-          "length": 20,
-          "start": 16478
-        },
-        {
-          "length": 20,
-          "start": 16570
-        },
-        {
-          "length": 20,
-          "start": 16634
-        },
-        {
-          "length": 20,
-          "start": 16983
-        },
-        {
-          "length": 20,
-          "start": 17047
-        },
-        {
-          "length": 20,
-          "start": 17658
-        },
-        {
-          "length": 20,
-          "start": 17961
-        },
-        {
-          "length": 20,
-          "start": 18039
-        },
-        {
-          "length": 20,
-          "start": 18141
-        },
-        {
-          "length": 20,
-          "start": 18237
-        },
-        {
-          "length": 20,
-          "start": 18315
-        },
-        {
-          "length": 20,
-          "start": 18402
-        },
-        {
-          "length": 20,
-          "start": 18597
-        },
-        {
-          "length": 20,
-          "start": 18675
-        },
-        {
-          "length": 20,
-          "start": 19024
-        },
-        {
-          "length": 20,
-          "start": 19391
-        },
-        {
-          "length": 20,
-          "start": 20490
-        }
-      ]
-    },
-    "contracts/libraries/LazyMulSegmentTree.sol": {
-      "LazyMulSegmentTree": [
-        {
-          "length": 20,
-          "start": 2271
-        },
-        {
-          "length": 20,
-          "start": 2334
-        },
-        {
-          "length": 20,
-          "start": 5722
-        },
-        {
-          "length": 20,
-          "start": 9866
-        },
-        {
-          "length": 20,
-          "start": 13051
-        },
-        {
-          "length": 20,
-          "start": 15213
-        },
-        {
-          "length": 20,
-          "start": 15913
-        },
-        {
-          "length": 20,
-          "start": 15994
-        },
-        {
-          "length": 20,
-          "start": 16692
-        },
-        {
-          "length": 20,
-          "start": 17122
-        },
-        {
-          "length": 20,
-          "start": 17203
-        },
-        {
-          "length": 20,
-          "start": 17734
-        },
-        {
-          "length": 20,
-          "start": 19287
-        },
-        {
-          "length": 20,
-          "start": 20386
-        }
-      ]
-    }
-  }
-}
diff --git a/clmsr-subgraph/abis/PointsGranter.json b/clmsr-subgraph/abis/PointsGranter.json
new file mode 100644
index 0000000..27a9fb0
--- /dev/null
+++ b/clmsr-subgraph/abis/PointsGranter.json
@@ -0,0 +1,313 @@
+{
+  "_format": "hh-sol-artifact-1",
+  "contractName": "PointsGranter",
+  "sourceName": "contracts/points/PointsGranter.sol",
+  "abi": [
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "target",
+          "type": "address"
+        }
+      ],
+      "name": "AddressEmptyCode",
+      "type": "error"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "implementation",
+          "type": "address"
+        }
+      ],
+      "name": "ERC1967InvalidImplementation",
+      "type": "error"
+    },
+    {
+      "inputs": [],
+      "name": "ERC1967NonPayable",
+      "type": "error"
+    },
+    {
+      "inputs": [],
+      "name": "FailedCall",
+      "type": "error"
+    },
+    {
+      "inputs": [],
+      "name": "InvalidInitialization",
+      "type": "error"
+    },
+    {
+      "inputs": [],
+      "name": "NotInitializing",
+      "type": "error"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "owner",
+          "type": "address"
+        }
+      ],
+      "name": "OwnableInvalidOwner",
+      "type": "error"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "account",
+          "type": "address"
+        }
+      ],
+      "name": "OwnableUnauthorizedAccount",
+      "type": "error"
+    },
+    {
+      "inputs": [],
+      "name": "UUPSUnauthorizedCallContext",
+      "type": "error"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "bytes32",
+          "name": "slot",
+          "type": "bytes32"
+        }
+      ],
+      "name": "UUPSUnsupportedProxiableUUID",
+      "type": "error"
+    },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": false,
+          "internalType": "uint64",
+          "name": "version",
+          "type": "uint64"
+        }
+      ],
+      "name": "Initialized",
+      "type": "event"
+    },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "previousOwner",
+          "type": "address"
+        },
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "newOwner",
+          "type": "address"
+        }
+      ],
+      "name": "OwnershipTransferred",
+      "type": "event"
+    },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "user",
+          "type": "address"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint256",
+          "name": "amount",
+          "type": "uint256"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint8",
+          "name": "reason",
+          "type": "uint8"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint64",
+          "name": "contextTs",
+          "type": "uint64"
+        }
+      ],
+      "name": "PointsGranted",
+      "type": "event"
+    },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "implementation",
+          "type": "address"
+        }
+      ],
+      "name": "Upgraded",
+      "type": "event"
+    },
+    {
+      "inputs": [],
+      "name": "UPGRADE_INTERFACE_VERSION",
+      "outputs": [
+        {
+          "internalType": "string",
+          "name": "",
+          "type": "string"
+        }
+      ],
+      "stateMutability": "view",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address[]",
+          "name": "users",
+          "type": "address[]"
+        },
+        {
+          "internalType": "uint256[]",
+          "name": "amounts",
+          "type": "uint256[]"
+        },
+        {
+          "internalType": "uint8[]",
+          "name": "reasons",
+          "type": "uint8[]"
+        },
+        {
+          "internalType": "uint64[]",
+          "name": "contextTs",
+          "type": "uint64[]"
+        }
+      ],
+      "name": "batchGrantPoints",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "user",
+          "type": "address"
+        },
+        {
+          "internalType": "uint256",
+          "name": "amount",
+          "type": "uint256"
+        },
+        {
+          "internalType": "uint8",
+          "name": "reason",
+          "type": "uint8"
+        },
+        {
+          "internalType": "uint64",
+          "name": "contextTs",
+          "type": "uint64"
+        }
+      ],
+      "name": "grantPoints",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "initialOwner",
+          "type": "address"
+        }
+      ],
+      "name": "initialize",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [],
+      "name": "owner",
+      "outputs": [
+        {
+          "internalType": "address",
+          "name": "",
+          "type": "address"
+        }
+      ],
+      "stateMutability": "view",
+      "type": "function"
+    },
+    {
+      "inputs": [],
+      "name": "proxiableUUID",
+      "outputs": [
+        {
+          "internalType": "bytes32",
+          "name": "",
+          "type": "bytes32"
+        }
+      ],
+      "stateMutability": "view",
+      "type": "function"
+    },
+    {
+      "inputs": [],
+      "name": "renounceOwnership",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "newOwner",
+          "type": "address"
+        }
+      ],
+      "name": "transferOwnership",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "newImplementation",
+          "type": "address"
+        },
+        {
+          "internalType": "bytes",
+          "name": "data",
+          "type": "bytes"
+        }
+      ],
+      "name": "upgradeToAndCall",
+      "outputs": [],
+      "stateMutability": "payable",
+      "type": "function"
+    }
+  ],
+  "bytecode": "0x60a0806040523461002a5730608052610b1c908161003082396080518181816105e901526106c80152f35b600080fdfe60406080815260048036101561001457600080fd5b600091823560e01c9182634f1ef2861461064d57826352d1902d146105d45782636c9c8828146104e9578263715018a61461047f57826376f21472146102ce5782638da5cb5b14610294578263ad3cb1cc146101f4578263c4d66de8146100b557505063f2fde38b1461008657600080fd5b346100b25760203660031901126100b2576100af6100a26108af565b6100aa6109e9565b610975565b80f35b80fd5b909150346101f05760203660031901126101f0576100d16108af565b907ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0091825460ff81861c16159267ffffffffffffffff8216801590816101e8575b60011490816101de575b1590816101d5575b506101c7575067ffffffffffffffff19811660011784556101579190836101a8575b5061014f610a22565b6100aa610a22565b61015f610a22565b610167578280f35b805468ff00000000000000001916905551600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a138808280f35b68ffffffffffffffffff19166801000000000000000117845538610146565b855163f92ee8a960e01b8152fd5b90501538610124565b303b15915061011c565b859150610112565b8280fd5b909150346101f057826003193601126101f0578151908282019082821067ffffffffffffffff8311176102815750825260058152602090640352e302e360dc1b6020820152825193849260208452825192836020860152825b84811061026b57505050828201840152601f01601f19168101030190f35b818101830151888201880152879550820161024d565b634e487b7160e01b855260419052602484fd5b8382346102ca57816003193601126102ca57600080516020610ac78339815191525490516001600160a01b039091168152602090f35b5080fd5b9150346101f05760803660031901126101f05767ffffffffffffffff90823582811161047b57610301903690850161091e565b9190926024358181116104775761031b903690870161091e565b92909360443583811161047357610335903690890161091e565b909460643585811161046f5761034e9036908b0161091e565b9390996103596109e9565b82821480610466575b8061045d575b1561042b57508a5b81811061037b578b80f35b61038681838c61094f565b356001600160a01b0381169190829003610427576103a581858c61094f565b35916103b282878c61094f565b3560ff81168103610423576103c9838f8a9061094f565b35908a8216820361041f57895194855260ff16602085015267ffffffffffffffff1660408401526001927f050abf3ae18f9946316c27b06d26486c68efcad0df617c3b3a66812122413cfb90606090a201610370565b8f80fd5b8e80fd5b8c80fd5b606490602087519162461bcd60e51b8352820152600c60248201526b0988a9cbe9a92a69a82a886960a31b6044820152fd5b50848214610368565b50838214610362565b8a80fd5b8880fd5b8680fd5b8480fd5b83346100b257806003193601126100b2576104986109e9565b600080516020610ac783398151915280546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8390346102ca5760803660031901126102ca576105046108af565b6024356044359160ff8316830361047b576064359067ffffffffffffffff821682036105d0576105326109e9565b6001600160a01b031693841515806105c7575b156105975750945190815260ff91909116602082015267ffffffffffffffff909316604084015290917f050abf3ae18f9946316c27b06d26486c68efcad0df617c3b3a66812122413cfb90606090a280f35b606490602088519162461bcd60e51b8352820152600a6024820152694241445f504152414d5360b01b6044820152fd5b50821515610545565b8580fd5b9083346100b257806003193601126100b257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316300361064057602090517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b5163703e46dd60e11b8152fd5b9150806003193601126101f0576106626108af565b90602493843567ffffffffffffffff81116102ca57366023820112156102ca578085013561068f81610902565b9461069c855196876108ca565b81865260209182870193368a83830101116105d0578186928b8693018737880101526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116308114908115610881575b50610871576107016109e9565b81169585516352d1902d60e01b815283818a818b5afa869181610842575b5061073b575050505050505191634c9c8ce360e01b8352820152fd5b9088888894938c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9182810361082d5750853b15610819575080546001600160a01b031916821790558451889392917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8580a28251156107fb5750506107ed9582915190845af4913d156107f1573d6107df6107d682610902565b925192836108ca565b81528581943d92013e610a63565b5080f35b5060609250610a63565b95509550505050503461080d57505080f35b63b398979f60e01b8152fd5b8651634c9c8ce360e01b8152808501849052fd5b8751632a87526960e21b815280860191909152fd5b9091508481813d831161086a575b61085a81836108ca565b810103126104775751903861071f565b503d610850565b855163703e46dd60e11b81528890fd5b9050817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54161415386106f4565b600435906001600160a01b03821682036108c557565b600080fd5b90601f8019910116810190811067ffffffffffffffff8211176108ec57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116108ec57601f01601f191660200190565b9181601f840112156108c55782359167ffffffffffffffff83116108c5576020808501948460051b0101116108c557565b919081101561095f5760051b0190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039081169081156109d057600080516020610ac783398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b604051631e4fbdf760e01b815260006004820152602490fd5b600080516020610ac7833981519152546001600160a01b03163303610a0a57565b60405163118cdaa760e01b8152336004820152602490fd5b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615610a5157565b604051631afcd79f60e31b8152600490fd5b90610a8a5750805115610a7857805190602001fd5b60405163d6bda27560e01b8152600490fd5b81511580610abd575b610a9b575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15610a9356fe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300a264697066735822122099a424d327632a6603c3a7ce542a0fda2e3475d1df983a0afa8dd134d430680164736f6c63430008180033",
+  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600091823560e01c9182634f1ef2861461064d57826352d1902d146105d45782636c9c8828146104e9578263715018a61461047f57826376f21472146102ce5782638da5cb5b14610294578263ad3cb1cc146101f4578263c4d66de8146100b557505063f2fde38b1461008657600080fd5b346100b25760203660031901126100b2576100af6100a26108af565b6100aa6109e9565b610975565b80f35b80fd5b909150346101f05760203660031901126101f0576100d16108af565b907ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0091825460ff81861c16159267ffffffffffffffff8216801590816101e8575b60011490816101de575b1590816101d5575b506101c7575067ffffffffffffffff19811660011784556101579190836101a8575b5061014f610a22565b6100aa610a22565b61015f610a22565b610167578280f35b805468ff00000000000000001916905551600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a138808280f35b68ffffffffffffffffff19166801000000000000000117845538610146565b855163f92ee8a960e01b8152fd5b90501538610124565b303b15915061011c565b859150610112565b8280fd5b909150346101f057826003193601126101f0578151908282019082821067ffffffffffffffff8311176102815750825260058152602090640352e302e360dc1b6020820152825193849260208452825192836020860152825b84811061026b57505050828201840152601f01601f19168101030190f35b818101830151888201880152879550820161024d565b634e487b7160e01b855260419052602484fd5b8382346102ca57816003193601126102ca57600080516020610ac78339815191525490516001600160a01b039091168152602090f35b5080fd5b9150346101f05760803660031901126101f05767ffffffffffffffff90823582811161047b57610301903690850161091e565b9190926024358181116104775761031b903690870161091e565b92909360443583811161047357610335903690890161091e565b909460643585811161046f5761034e9036908b0161091e565b9390996103596109e9565b82821480610466575b8061045d575b1561042b57508a5b81811061037b578b80f35b61038681838c61094f565b356001600160a01b0381169190829003610427576103a581858c61094f565b35916103b282878c61094f565b3560ff81168103610423576103c9838f8a9061094f565b35908a8216820361041f57895194855260ff16602085015267ffffffffffffffff1660408401526001927f050abf3ae18f9946316c27b06d26486c68efcad0df617c3b3a66812122413cfb90606090a201610370565b8f80fd5b8e80fd5b8c80fd5b606490602087519162461bcd60e51b8352820152600c60248201526b0988a9cbe9a92a69a82a886960a31b6044820152fd5b50848214610368565b50838214610362565b8a80fd5b8880fd5b8680fd5b8480fd5b83346100b257806003193601126100b2576104986109e9565b600080516020610ac783398151915280546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8390346102ca5760803660031901126102ca576105046108af565b6024356044359160ff8316830361047b576064359067ffffffffffffffff821682036105d0576105326109e9565b6001600160a01b031693841515806105c7575b156105975750945190815260ff91909116602082015267ffffffffffffffff909316604084015290917f050abf3ae18f9946316c27b06d26486c68efcad0df617c3b3a66812122413cfb90606090a280f35b606490602088519162461bcd60e51b8352820152600a6024820152694241445f504152414d5360b01b6044820152fd5b50821515610545565b8580fd5b9083346100b257806003193601126100b257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316300361064057602090517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b5163703e46dd60e11b8152fd5b9150806003193601126101f0576106626108af565b90602493843567ffffffffffffffff81116102ca57366023820112156102ca578085013561068f81610902565b9461069c855196876108ca565b81865260209182870193368a83830101116105d0578186928b8693018737880101526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116308114908115610881575b50610871576107016109e9565b81169585516352d1902d60e01b815283818a818b5afa869181610842575b5061073b575050505050505191634c9c8ce360e01b8352820152fd5b9088888894938c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9182810361082d5750853b15610819575080546001600160a01b031916821790558451889392917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8580a28251156107fb5750506107ed9582915190845af4913d156107f1573d6107df6107d682610902565b925192836108ca565b81528581943d92013e610a63565b5080f35b5060609250610a63565b95509550505050503461080d57505080f35b63b398979f60e01b8152fd5b8651634c9c8ce360e01b8152808501849052fd5b8751632a87526960e21b815280860191909152fd5b9091508481813d831161086a575b61085a81836108ca565b810103126104775751903861071f565b503d610850565b855163703e46dd60e11b81528890fd5b9050817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54161415386106f4565b600435906001600160a01b03821682036108c557565b600080fd5b90601f8019910116810190811067ffffffffffffffff8211176108ec57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116108ec57601f01601f191660200190565b9181601f840112156108c55782359167ffffffffffffffff83116108c5576020808501948460051b0101116108c557565b919081101561095f5760051b0190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039081169081156109d057600080516020610ac783398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b604051631e4fbdf760e01b815260006004820152602490fd5b600080516020610ac7833981519152546001600160a01b03163303610a0a57565b60405163118cdaa760e01b8152336004820152602490fd5b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615610a5157565b604051631afcd79f60e31b8152600490fd5b90610a8a5750805115610a7857805190602001fd5b60405163d6bda27560e01b8152600490fd5b81511580610abd575b610a9b575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15610a9356fe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300a264697066735822122099a424d327632a6603c3a7ce542a0fda2e3475d1df983a0afa8dd134d430680164736f6c63430008180033",
+  "linkReferences": {},
+  "deployedLinkReferences": {}
+}
diff --git a/clmsr-subgraph/abis/PointsGranterUpgradeable.json b/clmsr-subgraph/abis/PointsGranterUpgradeable.json
deleted file mode 100644
index e208697..0000000
--- a/clmsr-subgraph/abis/PointsGranterUpgradeable.json
+++ /dev/null
@@ -1,33 +0,0 @@
-[
-  {
-    "anonymous": false,
-    "inputs": [
-      {
-        "indexed": true,
-        "internalType": "address",
-        "name": "user",
-        "type": "address"
-      },
-      {
-        "indexed": false,
-        "internalType": "uint256",
-        "name": "amount",
-        "type": "uint256"
-      },
-      {
-        "indexed": false,
-        "internalType": "uint8",
-        "name": "reason",
-        "type": "uint8"
-      },
-      {
-        "indexed": false,
-        "internalType": "uint64",
-        "name": "contextTs",
-        "type": "uint64"
-      }
-    ],
-    "name": "PointsGranted",
-    "type": "event"
-  }
-]
diff --git a/clmsr-subgraph/goldsky.json b/clmsr-subgraph/goldsky.json
index 768b4cc..59028a8 100644
--- a/clmsr-subgraph/goldsky.json
+++ b/clmsr-subgraph/goldsky.json
@@ -3,12 +3,12 @@
   "chains": ["citrea-testnet-tangerine"],
   "subgraphs": {
     "signals-v0-citrea-dev": {
-      "path": "./subgraph-citrea-dev.yaml",
+      "path": "./build/subgraph.yaml",
       "chain": "citrea-testnet-tangerine",
       "version": "1.0.0"
     },
     "signals-v0-citrea-prod": {
-      "path": "./subgraph-citrea-prod.yaml",
+      "path": "./build/subgraph.yaml",
       "chain": "citrea-testnet-tangerine",
       "version": "1.0.0"
     }
diff --git a/clmsr-subgraph/package.json b/clmsr-subgraph/package.json
index c15f632..2fe76b5 100644
--- a/clmsr-subgraph/package.json
+++ b/clmsr-subgraph/package.json
@@ -4,16 +4,6 @@
   "scripts": {
     "codegen": "graph codegen",
     "build": "graph build",
-    "deploy:base:prod": "graph deploy --node https://api.studio.thegraph.com/deploy/ signals-v-0 --path subgraph-base-prod.yaml",
-    "deploy:base:dev": "graph deploy --node https://api.studio.thegraph.com/deploy/ signals-v-0-dev --path subgraph-base-dev.yaml",
-    "build:base:dev": "cp subgraph-base-dev.yaml subgraph.yaml && graph build && rm subgraph.yaml",
-    "build:base:prod": "cp subgraph-base-prod.yaml subgraph.yaml && graph build && rm subgraph.yaml",
-    "build:citrea:dev": "cp subgraph-citrea-dev.yaml subgraph.yaml && graph build && rm subgraph.yaml",
-    "build:citrea:prod": "cp subgraph-citrea-prod.yaml subgraph.yaml && graph build && rm subgraph.yaml",
-    "deploy:goldsky:citrea:dev": "cp subgraph-citrea-dev.yaml subgraph.yaml && goldsky subgraph deploy signals-v0-citrea-dev/1.0.0 --path . && rm subgraph.yaml",
-    "deploy:goldsky:citrea:prod": "cp subgraph-citrea-prod.yaml subgraph.yaml && goldsky subgraph deploy signals-v0-citrea-prod/1.0.0 --path . && rm subgraph.yaml",
-    "update:goldsky:citrea:dev": "cp subgraph-citrea-dev.yaml subgraph.yaml && goldsky subgraph update signals-v0-citrea-dev/1.0.0 --path . && rm subgraph.yaml",
-    "update:goldsky:citrea:prod": "cp subgraph-citrea-prod.yaml subgraph.yaml && goldsky subgraph update signals-v0-citrea-prod/1.0.0 --path . && rm subgraph.yaml",
     "create-local": "graph create --node http://localhost:8020/ clmsr-subgraph",
     "remove-local": "graph remove --node http://localhost:8020/ clmsr-subgraph",
     "deploy-local": "graph deploy --node http://localhost:8020/ --ipfs http://localhost:5001 clmsr-subgraph",
@@ -24,7 +14,17 @@
     "verify-contracts": "node scripts/verify-contracts.js",
     "quick-diagnosis": "node scripts/quick-diagnosis.js",
     "monitor": "node scripts/check-indexing.js",
-    "install-monitoring": "npm install graphql-request web3"
+    "install-monitoring": "npm install graphql-request web3",
+    "build:citrea:dev": "cp subgraph-citrea-dev.yaml subgraph.yaml && graph build && rm subgraph.yaml",
+    "build:citrea:prod": "cp subgraph-citrea-prod.yaml subgraph.yaml && graph build && rm subgraph.yaml",
+    "status:citrea:dev": "bash scripts/goldsky-status.sh citrea dev",
+    "status:citrea:prod": "bash scripts/goldsky-status.sh citrea prod",
+    "deploy:citrea:dev": "bash scripts/goldsky-deploy.sh citrea dev",
+    "deploy:citrea:prod": "bash scripts/goldsky-deploy.sh citrea prod",
+    "tag:citrea:dev": "bash scripts/goldsky-tag.sh citrea dev",
+    "tag:citrea:prod": "bash scripts/goldsky-tag.sh citrea prod",
+    "delete:citrea:dev": "bash scripts/goldsky-delete.sh citrea dev",
+    "delete:citrea:prod": "bash scripts/goldsky-delete.sh citrea prod"
   },
   "dependencies": {
     "@graphprotocol/graph-cli": "0.97.1",
diff --git a/clmsr-subgraph/schema.graphql b/clmsr-subgraph/schema.graphql
index 5dc070e..0a20997 100644
--- a/clmsr-subgraph/schema.graphql
+++ b/clmsr-subgraph/schema.graphql
@@ -15,25 +15,19 @@ type EmergencyUnpaused @entity(immutable: true) {
   transactionHash: Bytes!
 }
 
-type MarketCreated @entity(immutable: true) {
+type MarketSettled @entity(immutable: true) {
   id: Bytes!
   marketId: BigInt! # uint256
-  minTick: BigInt! # int256
-  maxTick: BigInt! # int256
-  tickSpacing: BigInt! # int256
-  startTimestamp: BigInt! # uint64
-  endTimestamp: BigInt! # uint64
-  numBins: BigInt! # uint32 (calculated bin count from tick range)
-  liquidityParameter: BigInt! # uint256
+  settlementTick: BigInt! # int256
   blockNumber: BigInt!
   blockTimestamp: BigInt!
   transactionHash: Bytes!
 }
 
-type MarketSettled @entity(immutable: true) {
+type MarketSettlementValueSubmitted @entity(immutable: true) {
   id: Bytes!
   marketId: BigInt! # uint256
-  settlementTick: BigInt! # int256
+  settlementValue: BigInt! # int256 (6 decimals)
   blockNumber: BigInt!
   blockTimestamp: BigInt!
   transactionHash: Bytes!
@@ -120,7 +114,8 @@ type Market @entity(immutable: false) {
   numBins: BigInt! # uint32 - 계산된 빈 개수
   liquidityParameter: BigInt!
   isSettled: Boolean!
-  settlementTick: BigInt # int256
+  settlementValue: BigInt # int256 (6 decimals, original value)
+  settlementTick: BigInt # int256 (calculated from settlementValue)
   lastUpdated: BigInt!
   # 관계 필드들
   bins: [BinState!]! @derivedFrom(field: "market")
diff --git a/clmsr-subgraph/scripts/goldsky-delete.sh b/clmsr-subgraph/scripts/goldsky-delete.sh
new file mode 100755
index 0000000..5fc487f
--- /dev/null
+++ b/clmsr-subgraph/scripts/goldsky-delete.sh
@@ -0,0 +1,39 @@
+#!/usr/bin/env bash
+set -euo pipefail
+
+NET="${1:-citrea}"          # citrea
+STAGE="${2:-dev}"           # dev | prod  
+VERSION="${3:?Usage: $0 <net> <stage> <version>}"  # 예: 1.0.0
+
+# 서브그래프 이름 규칙
+SUBGRAPH="signals-v0-${NET}-${STAGE}"
+
+echo "🗑️ Deleting ${SUBGRAPH}/${VERSION}"
+
+# 연결된 태그들 먼저 확인
+echo "🔍 Checking for attached tags..."
+goldsky subgraph list | grep "${SUBGRAPH}/${VERSION}" || {
+  echo "❌ Version ${VERSION} not found"
+  exit 1
+}
+
+# 태그 제거 확인
+read -p "⚠️  Remove all tags from this version first? (y/N): " -n 1 -r
+echo
+if [[ $REPLY =~ ^[Yy]$ ]]; then
+  echo "🏷️ Removing all tags from ${SUBGRAPH}/${VERSION}..."
+  for tag in "latest" "prod" "staging"; do
+    goldsky subgraph tag delete "${SUBGRAPH}/${VERSION}" --tag "${tag}" --force 2>/dev/null || true
+  done
+fi
+
+# 삭제 확인
+read -p "🚨 Are you sure you want to delete ${SUBGRAPH}/${VERSION}? (y/N): " -n 1 -r
+echo
+if [[ $REPLY =~ ^[Yy]$ ]]; then
+  goldsky subgraph delete "${SUBGRAPH}/${VERSION}" --force
+  echo "✅ Successfully deleted ${SUBGRAPH}/${VERSION}"
+else
+  echo "❌ Deletion cancelled"
+  exit 1
+fi
diff --git a/clmsr-subgraph/scripts/goldsky-deploy.sh b/clmsr-subgraph/scripts/goldsky-deploy.sh
new file mode 100755
index 0000000..406b980
--- /dev/null
+++ b/clmsr-subgraph/scripts/goldsky-deploy.sh
@@ -0,0 +1,96 @@
+#!/usr/bin/env bash
+set -euo pipefail
+
+NET="${1:-citrea}"          # citrea
+STAGE="${2:-dev}"           # dev | prod  
+NEW="${3:?Usage: $0 <net> <stage> <newVersion> [prevVersion]}"  # 예: 1.0.1
+PREV="${4:-}"               # 옵션: 이전 버전에서 graft
+
+# 서브그래프 이름/매니페스트 경로 규칙  
+SUBGRAPH="signals-v0-${NET}-new"
+YAML="subgraph-${NET}-${STAGE}.yaml"
+
+# clmsr-subgraph 루트로 이동
+pushd "$(dirname "$0")/.." >/dev/null
+
+# 1) 클린 빌드 - stale 산출물 완전 제거
+echo "🧹 Cleaning build artifacts..."
+rm -rf build generated subgraph.yaml
+
+# 2) 환경별 매니페스트 복사
+echo "📋 Setting up manifest for ${NET}-${STAGE}..."
+cp "$YAML" subgraph.yaml
+
+# 3) 완전 빌드 (코드젠 포함)
+echo "🔨 Building subgraph (codegen + build)..."
+graph codegen && graph build
+
+# 빌드 산출물 검증 (스키마/매핑 일치 보장)
+echo "🔍 Verifying build artifacts..."
+for t in "type Market @entity" "type MarketDistribution @entity" "type BinState @entity"; do
+  grep -q "$t" build/schema.graphql || { echo "❌ Missing: $t"; exit 1; }
+done
+echo "✅ Core entities verified in build/schema.graphql"
+
+# entities 매니페스트 검증 (BSD grep 호환)
+echo "🔍 Verifying entities in manifest..."
+if grep -- "- Market" build/subgraph.yaml >/dev/null 2>&1 && \
+   grep -- "- MarketDistribution" build/subgraph.yaml >/dev/null 2>&1 && \
+   grep -- "- BinState" build/subgraph.yaml >/dev/null 2>&1; then
+  echo "✅ 핵심 entities 확인 완료"
+
+# Market 필드 레벨 정합성 체크 (상세 로그)
+echo "🔍 Verifying Market schema fields..."
+must_have_fields=(
+  'id: String!'
+  'marketId: BigInt!'
+  'minTick: BigInt!'
+  'maxTick: BigInt!'
+  'tickSpacing: BigInt!'
+  'startTimestamp: BigInt!'
+  'endTimestamp: BigInt!'
+  'numBins: BigInt!'
+  'liquidityParameter: BigInt!'
+  'isSettled: Boolean!'
+  'settlementValue: BigInt'
+  'settlementTick: BigInt'
+  'lastUpdated: BigInt!'
+)
+
+echo "📋 Checking Market fields in build/schema.graphql:"
+for f in "${must_have_fields[@]}"; do
+  if grep -- "$f" build/schema.graphql >/dev/null 2>&1; then
+    echo "  ✅ Found: $f"
+  else
+    echo "  ❌ Missing: $f"
+    echo "📄 Current Market definition in schema:"
+    grep -A 20 "type Market @entity" build/schema.graphql | head -20
+    exit 1
+  fi
+done
+echo "✅ All Market schema fields verified"
+else
+  echo "❌ 핵심 entities 누락"
+  exit 1
+fi
+
+# (옵션) 이전 버전에서 그라프트
+GRAFT_FLAG=()
+if [[ -n "${PREV}" ]]; then
+  GRAFT_FLAG=(--graft-from "${SUBGRAPH}/${PREV}")
+  echo "📈 Grafting from ${SUBGRAPH}/${PREV}"
+fi
+
+echo "🚀 Deploying ${SUBGRAPH}/${NEW} from build artifacts..."
+if [[ ${#GRAFT_FLAG[@]} -gt 0 ]]; then
+  goldsky subgraph deploy "${SUBGRAPH}/${NEW}" --path ./build "${GRAFT_FLAG[@]}"
+else
+  goldsky subgraph deploy "${SUBGRAPH}/${NEW}" --path ./build
+fi
+
+rm -f subgraph.yaml
+popd >/dev/null
+
+echo "✅ Successfully deployed ${SUBGRAPH}/${NEW}"
+echo "📊 Check status: yarn status:${NET}:${STAGE}"
+echo "🏷️ Tag when ready: yarn tag:${NET}:${STAGE} ${NEW} latest"
diff --git a/clmsr-subgraph/scripts/goldsky-status.sh b/clmsr-subgraph/scripts/goldsky-status.sh
new file mode 100755
index 0000000..16c0291
--- /dev/null
+++ b/clmsr-subgraph/scripts/goldsky-status.sh
@@ -0,0 +1,25 @@
+#!/usr/bin/env bash
+set -euo pipefail
+
+NET="${1:-citrea}"          # citrea
+STAGE="${2:-dev}"           # dev | prod
+
+# 서브그래프 이름 규칙
+SUBGRAPH="signals-v0-${NET}-${STAGE}"
+
+echo "📊 Subgraph Status: ${SUBGRAPH}"
+echo "=================================="
+
+# 현재 배포된 모든 버전과 태그 조회
+goldsky subgraph list | grep "${SUBGRAPH}" || echo "No deployments found"
+
+echo ""
+echo "🔍 Current Tag Status:"
+echo "======================"
+goldsky subgraph list | grep "${SUBGRAPH}" | grep "latest\|prod\|staging" || echo "No tags found"
+
+echo ""
+echo "📈 Usage Instructions:"
+echo "======================"
+echo "Latest API: https://api.goldsky.com/api/public/project_cme6kru6aowuy01tb4c9xbdrj/subgraphs/${SUBGRAPH}/latest/gn"
+echo "Specific:   https://api.goldsky.com/api/public/project_cme6kru6aowuy01tb4c9xbdrj/subgraphs/${SUBGRAPH}/[VERSION]/gn"
diff --git a/clmsr-subgraph/scripts/goldsky-tag.sh b/clmsr-subgraph/scripts/goldsky-tag.sh
new file mode 100755
index 0000000..b58f416
--- /dev/null
+++ b/clmsr-subgraph/scripts/goldsky-tag.sh
@@ -0,0 +1,30 @@
+#!/usr/bin/env bash
+set -euo pipefail
+
+NET="${1:-citrea}"          # citrea
+STAGE="${2:-dev}"           # dev | prod
+VERSION="${3:?Usage: $0 <net> <stage> <version> <tag>}"  # 예: 1.0.1
+TAG="${4:?Usage: $0 <net> <stage> <version> <tag>}"      # latest | prod | staging
+
+# 서브그래프 이름 규칙
+SUBGRAPH="signals-v0-${NET}-${STAGE}"
+
+echo "🏷️ Tagging ${SUBGRAPH}/${VERSION} as '${TAG}'"
+
+# 기존 태그 삭제 (다른 버전에서)
+echo "🧹 Removing existing '${TAG}' tag..."
+goldsky subgraph list | grep "${SUBGRAPH}/" | grep "${TAG}" | while read -r line; do
+  if [[ "$line" =~ \*[[:space:]]+([^/]+/[^[:space:]]+)[[:space:]]+\-\>[[:space:]]+([^/]+/[^[:space:]]+) ]]; then
+    old_version="${BASH_REMATCH[1]}"
+    if [[ "${old_version}" != "${SUBGRAPH}/${VERSION}" ]]; then
+      echo "🗑️ Removing '${TAG}' tag from ${old_version}"
+      goldsky subgraph tag delete "${old_version}" --tag "${TAG}" --force 2>/dev/null || true
+    fi
+  fi
+done
+
+# 새 태그 생성
+goldsky subgraph tag create "${SUBGRAPH}/${VERSION}" --tag "${TAG}"
+
+echo "✅ Successfully tagged ${SUBGRAPH}/${VERSION} as '${TAG}'"
+echo "🌐 API URL: https://api.goldsky.com/api/public/project_cme6kru6aowuy01tb4c9xbdrj/subgraphs/${SUBGRAPH}/${TAG}/gn"
diff --git a/clmsr-subgraph/src/clmsr-market-core.ts b/clmsr-subgraph/src/clmsr-market-core.ts
index 46f444c..e1d1b25 100644
--- a/clmsr-subgraph/src/clmsr-market-core.ts
+++ b/clmsr-subgraph/src/clmsr-market-core.ts
@@ -18,9 +18,9 @@ import {
   PositionSettled as PositionSettledEvent,
   MarketCreated as MarketCreatedEvent,
   MarketSettled as MarketSettledEvent,
+  MarketSettlementValueSubmitted as MarketSettlementValueSubmittedEvent,
   RangeFactorApplied as RangeFactorAppliedEvent,
 } from "../generated/CLMSRMarketCore/CLMSRMarketCore";
-import { PointsGranted } from "../generated/PointsGranterUpgradeable/PointsGranterUpgradeable";
 import {
   PositionOpened,
   PositionIncreased,
@@ -28,8 +28,8 @@ import {
   PositionClosed,
   PositionClaimed,
   PositionSettled,
-  MarketCreated,
   MarketSettled,
+  MarketSettlementValueSubmitted,
   RangeFactorApplied,
   Market,
   UserPosition,
@@ -190,6 +190,14 @@ function calculateDisplayPrice(cost: BigInt, quantity: BigInt): BigDecimal {
 
 // ============= 기존 헬퍼 함수들 =============
 
+// Constants for WAD calculations
+const WAD = BigInt.fromString("1000000000000000000");
+
+// Helper function: safe WAD multiplication with floor division
+function wMulDown(a: BigInt, b: BigInt): BigInt {
+  return a.times(b).div(WAD);
+}
+
 // Helper function to update bin volumes for given tick range
 function updateBinVolumes(
   marketId: BigInt,
@@ -250,24 +258,6 @@ function updateBinVolumes(
 }
 
 export function handleMarketCreated(event: MarketCreatedEvent): void {
-  let entity = new MarketCreated(
-    event.transaction.hash.concatI32(event.logIndex.toI32())
-  );
-  entity.marketId = event.params.marketId;
-  entity.minTick = event.params.minTick;
-  entity.maxTick = event.params.maxTick;
-  entity.tickSpacing = event.params.tickSpacing;
-  entity.startTimestamp = event.params.startTimestamp;
-  entity.endTimestamp = event.params.endTimestamp;
-  entity.numBins = event.params.numBins;
-  entity.liquidityParameter = event.params.liquidityParameter;
-
-  entity.blockNumber = event.block.number;
-  entity.blockTimestamp = event.block.timestamp;
-  entity.transactionHash = event.transaction.hash;
-
-  entity.save();
-
   let marketIdStr = buildMarketId(event.params.marketId);
   let market = new Market(marketIdStr);
   market.marketId = event.params.marketId;
@@ -279,6 +269,8 @@ export function handleMarketCreated(event: MarketCreatedEvent): void {
   market.numBins = event.params.numBins;
   market.liquidityParameter = event.params.liquidityParameter;
   market.isSettled = false;
+  market.settlementValue = null;
+  market.settlementTick = null;
   market.lastUpdated = event.block.timestamp;
   market.save();
 
@@ -352,6 +344,32 @@ export function handleMarketSettled(event: MarketSettledEvent): void {
   let market = Market.load(buildMarketId(event.params.marketId))!;
   market.isSettled = true;
   market.settlementTick = event.params.settlementTick;
+  // Convert settlementTick to 6 decimal format for consistency
+  market.settlementValue = event.params.settlementTick.times(
+    BigInt.fromI32(1_000_000)
+  );
+  market.lastUpdated = event.block.timestamp;
+  market.save();
+}
+
+export function handleMarketSettlementValueSubmitted(
+  event: MarketSettlementValueSubmittedEvent
+): void {
+  let entity = new MarketSettlementValueSubmitted(
+    event.transaction.hash.concatI32(event.logIndex.toI32())
+  );
+  entity.marketId = event.params.marketId;
+  entity.settlementValue = event.params.settlementValue;
+
+  entity.blockNumber = event.block.number;
+  entity.blockTimestamp = event.block.timestamp;
+  entity.transactionHash = event.transaction.hash;
+
+  entity.save();
+
+  // Update market with settlement value (6 decimals)
+  let market = Market.load(buildMarketId(event.params.marketId))!;
+  market.settlementValue = event.params.settlementValue;
   market.lastUpdated = event.block.timestamp;
   market.save();
 }
@@ -1042,10 +1060,21 @@ export function handleRangeFactorApplied(event: RangeFactorAppliedEvent): void {
 
   entity.save();
 
-  let market = Market.load(buildMarketId(event.params.marketId))!;
+  let market = Market.load(buildMarketId(event.params.marketId));
+  if (market == null) {
+    // Market not found - skip this event
+    return;
+  }
   market.lastUpdated = event.block.timestamp;
   market.save();
 
+  let distribution = MarketDistribution.load(market.id);
+  if (distribution == null) {
+    // Distribution not found - skip this event
+    return;
+  }
+
+  // Convert tick range to bin indices (upper exclusive)
   let lowerBinIndex = event.params.lo
     .minus(market.minTick)
     .div(market.tickSpacing)
@@ -1053,19 +1082,22 @@ export function handleRangeFactorApplied(event: RangeFactorAppliedEvent): void {
   let upperBinIndex =
     event.params.hi.minus(market.minTick).div(market.tickSpacing).toI32() - 1;
 
+  // Contract ensures valid ranges - no silent clamping needed
+  // Invalid ranges would have been reverted before event emission
+
+  // (C) Apply factor to each bin (leaf model - contract equivalent)
   for (let binIndex = lowerBinIndex; binIndex <= upperBinIndex; binIndex++) {
     let binState = BinState.load(
       buildBinStateId(event.params.marketId, binIndex)
     )!;
-    binState.currentFactor = binState.currentFactor
-      .times(event.params.factor)
-      .div(BigInt.fromString("1000000000000000000"));
+    let updated = wMulDown(binState.currentFactor, event.params.factor);
+    binState.currentFactor = updated;
     binState.lastUpdated = event.block.timestamp;
     binState.updateCount = binState.updateCount.plus(BigInt.fromI32(1));
     binState.save();
   }
 
-  let distribution = MarketDistribution.load(market.id)!;
+  // (F) Recompute statistics and arrays (full bin traversal once)
   let totalSumWad = BigInt.fromI32(0);
   let minFactorWad = BigInt.fromString("999999999999999999999999999999");
   let maxFactorWad = BigInt.fromI32(0);
@@ -1087,47 +1119,14 @@ export function handleRangeFactorApplied(event: RangeFactorAppliedEvent): void {
     binVolumes.push(binState.totalVolume.toString());
   }
 
-  let avgFactorWad = totalSumWad.div(market.numBins);
-
+  // (G) Use actual leaf sum as truth (contract leaf model equivalent)
   distribution.totalSum = totalSumWad;
   distribution.minFactor = minFactorWad;
   distribution.maxFactor = maxFactorWad;
-  distribution.avgFactor = avgFactorWad;
+  distribution.avgFactor = distribution.totalSum.div(market.numBins);
   distribution.binFactors = binFactorsWad;
   distribution.binVolumes = binVolumes;
   distribution.version = distribution.version.plus(BigInt.fromI32(1));
   distribution.lastSnapshotAt = event.block.timestamp;
   distribution.save();
 }
-
-function mapReason(code: i32): string {
-  if (code == 1) return "ACTIVITY";
-  if (code == 2) return "PERFORMANCE";
-  if (code == 3) return "RISK_BONUS";
-  return "MANUAL";
-}
-
-/** Handle manual grant from PointsGranter */
-export function handlePointsGranted(e: PointsGranted): void {
-  const ts = e.params.contextTs.notEqual(BigInt.zero())
-    ? e.params.contextTs
-    : e.block.timestamp;
-
-  const reason = mapReason(e.params.reason as i32);
-  const userStats = getOrCreateUserStats(e.params.user);
-
-  // 포인트 적립
-  userStats.totalPoints = userStats.totalPoints.plus(e.params.amount);
-  if (reason == "ACTIVITY") {
-    userStats.activityPoints = userStats.activityPoints.plus(e.params.amount);
-  } else if (reason == "PERFORMANCE") {
-    userStats.performancePoints = userStats.performancePoints.plus(
-      e.params.amount
-    );
-  } else if (reason == "RISK_BONUS") {
-    userStats.riskBonusPoints = userStats.riskBonusPoints.plus(e.params.amount);
-  }
-  userStats.save();
-
-  recordEventHistory(e, userStats.user, e.params.amount, reason, ts);
-}
diff --git a/clmsr-subgraph/src/points.ts b/clmsr-subgraph/src/points.ts
index 1e1b9b0..3685f26 100644
--- a/clmsr-subgraph/src/points.ts
+++ b/clmsr-subgraph/src/points.ts
@@ -6,6 +6,8 @@ import {
   crypto,
 } from "@graphprotocol/graph-ts";
 import { EventHistory, UserStats } from "../generated/schema";
+import { PointsGranted } from "../generated/PointsGranter/PointsGranter";
+import { getOrCreateUserStats } from "./clmsr-market-core";
 
 // ============= 유틸리티 함수들 =============
 
@@ -110,6 +112,7 @@ export function addRiskBonusPoints(userStats: UserStats, amount: BigInt): void {
 /** Append a single history row from an event */
 export function recordEventHistory(
   e: ethereum.Event,
+
   user: Bytes,
   amount: BigInt,
   reason: string,
@@ -133,3 +136,38 @@ export function recordEventHistory(
   h.timestamp = timestamp;
   h.save();
 }
+
+// ============= Points 이벤트 핸들러 =============
+
+/** Map reason code to string */
+function mapReason(code: i32): string {
+  if (code == 1) return "ACTIVITY";
+  if (code == 2) return "PERFORMANCE";
+  if (code == 3) return "RISK_BONUS";
+  return "MANUAL";
+}
+
+/** Handle manual grant from PointsGranter */
+export function handlePointsGranted(e: PointsGranted): void {
+  const ts = e.params.contextTs.notEqual(BigInt.zero())
+    ? e.params.contextTs
+    : e.block.timestamp;
+
+  const reason = mapReason(e.params.reason as i32);
+  const userStats = getOrCreateUserStats(e.params.user);
+
+  // 포인트 적립
+  userStats.totalPoints = userStats.totalPoints.plus(e.params.amount);
+  if (reason == "ACTIVITY") {
+    userStats.activityPoints = userStats.activityPoints.plus(e.params.amount);
+  } else if (reason == "PERFORMANCE") {
+    userStats.performancePoints = userStats.performancePoints.plus(
+      e.params.amount
+    );
+  } else if (reason == "RISK_BONUS") {
+    userStats.riskBonusPoints = userStats.riskBonusPoints.plus(e.params.amount);
+  }
+  userStats.save();
+
+  recordEventHistory(e, userStats.user, e.params.amount, reason, ts);
+}
diff --git a/clmsr-subgraph/subgraph-base-dev.yaml b/clmsr-subgraph/subgraph-base-dev.yaml
deleted file mode 100644
index fcf145f..0000000
--- a/clmsr-subgraph/subgraph-base-dev.yaml
+++ /dev/null
@@ -1,76 +0,0 @@
-specVersion: 1.3.0
-indexerHints:
-  prune: auto
-schema:
-  file: ./schema.graphql
-dataSources:
-  # ===== 코어 컨트랙트 =====
-
-  - kind: ethereum
-    name: CLMSRMarketCore
-    network: base
-    source:
-      address: "0x894C07d390D7585c5205f2B81b9845e5432282B6"
-      abi: CLMSRMarketCore
-      startBlock: 33772759
-    mapping:
-      kind: ethereum/events
-      apiVersion: 0.0.9
-      language: wasm/assemblyscript
-      entities:
-        - MarketCreated
-        - MarketSettled
-        - PositionClaimed
-        - PositionClosed
-        - PositionDecreased
-        - PositionIncreased
-        - PositionOpened
-        - RangeFactorApplied
-        - EventHistory
-        - UserStats
-      abis:
-        - name: CLMSRMarketCore
-          file: ./abis/CLMSRMarketCoreUpgradeable.json
-      eventHandlers:
-        - event: MarketCreated(indexed uint256,uint64,uint64,int256,int256,int256,uint32,uint256)
-          handler: handleMarketCreated
-        - event: MarketSettled(indexed uint256,int256)
-          handler: handleMarketSettled
-        - event: PositionClaimed(indexed uint256,indexed address,uint256)
-          handler: handlePositionClaimed
-        - event: PositionClosed(indexed uint256,indexed address,uint256)
-          handler: handlePositionClosed
-        - event: PositionDecreased(indexed uint256,indexed address,uint128,uint128,uint256)
-          handler: handlePositionDecreased
-        - event: PositionIncreased(indexed uint256,indexed address,uint128,uint128,uint256)
-          handler: handlePositionIncreased
-        - event: PositionOpened(indexed uint256,indexed address,indexed uint256,int256,int256,uint128,uint256)
-          handler: handlePositionOpened
-        - event: PositionSettled(indexed uint256,indexed address,uint256,bool)
-          handler: handlePositionSettled
-        - event: RangeFactorApplied(indexed uint256,indexed int256,indexed int256,uint256)
-          handler: handleRangeFactorApplied
-      file: ./src/clmsr-market-core.ts
-
-  # ===== PointsGranter 컨트랙트 =====
-  - kind: ethereum
-    name: PointsGranterUpgradeable
-    network: base
-    source:
-      address: "0x963d372F484F13f375E9637CE67D75C87C9CcF67"
-      abi: PointsGranterUpgradeable
-      startBlock: 33772759
-    mapping:
-      kind: ethereum/events
-      apiVersion: 0.0.9
-      language: wasm/assemblyscript
-      entities:
-        - EventHistory
-        - UserStats
-      abis:
-        - name: PointsGranterUpgradeable
-          file: ./abis/PointsGranterUpgradeable.json
-      eventHandlers:
-        - event: PointsGranted(indexed address,uint256,uint8,uint64)
-          handler: handlePointsGranted
-      file: ./src/clmsr-market-core.ts
diff --git a/clmsr-subgraph/subgraph-base-prod.yaml b/clmsr-subgraph/subgraph-base-prod.yaml
deleted file mode 100644
index b74a596..0000000
--- a/clmsr-subgraph/subgraph-base-prod.yaml
+++ /dev/null
@@ -1,76 +0,0 @@
-specVersion: 1.3.0
-indexerHints:
-  prune: auto
-schema:
-  file: ./schema.graphql
-dataSources:
-  # ===== 코어 컨트랙트 =====
-
-  - kind: ethereum
-    name: CLMSRMarketCore
-    network: base
-    source:
-      address: "0xbBf5703b1755B462FC5FC7319A1d3ACA4E1988Bc"
-      abi: CLMSRMarketCore
-      startBlock: 33772759
-    mapping:
-      kind: ethereum/events
-      apiVersion: 0.0.9
-      language: wasm/assemblyscript
-      entities:
-        - MarketCreated
-        - MarketSettled
-        - PositionClaimed
-        - PositionClosed
-        - PositionDecreased
-        - PositionIncreased
-        - PositionOpened
-        - RangeFactorApplied
-        - EventHistory
-        - UserStats
-      abis:
-        - name: CLMSRMarketCore
-          file: ./abis/CLMSRMarketCoreUpgradeable.json
-      eventHandlers:
-        - event: MarketCreated(indexed uint256,uint64,uint64,int256,int256,int256,uint32,uint256)
-          handler: handleMarketCreated
-        - event: MarketSettled(indexed uint256,int256)
-          handler: handleMarketSettled
-        - event: PositionClaimed(indexed uint256,indexed address,uint256)
-          handler: handlePositionClaimed
-        - event: PositionClosed(indexed uint256,indexed address,uint256)
-          handler: handlePositionClosed
-        - event: PositionDecreased(indexed uint256,indexed address,uint128,uint128,uint256)
-          handler: handlePositionDecreased
-        - event: PositionIncreased(indexed uint256,indexed address,uint128,uint128,uint256)
-          handler: handlePositionIncreased
-        - event: PositionOpened(indexed uint256,indexed address,indexed uint256,int256,int256,uint128,uint256)
-          handler: handlePositionOpened
-        - event: PositionSettled(indexed uint256,indexed address,uint256,bool)
-          handler: handlePositionSettled
-        - event: RangeFactorApplied(indexed uint256,indexed int256,indexed int256,uint256)
-          handler: handleRangeFactorApplied
-      file: ./src/clmsr-market-core.ts
-
-  # ===== PointsGranter 컨트랙트 =====
-  - kind: ethereum
-    name: PointsGranterUpgradeable
-    network: base
-    source:
-      address: "0x68C6cb3BA572C53328F2c66a9809F5dE7b8b32dA"
-      abi: PointsGranterUpgradeable
-      startBlock: 33772759
-    mapping:
-      kind: ethereum/events
-      apiVersion: 0.0.9
-      language: wasm/assemblyscript
-      entities:
-        - EventHistory
-        - UserStats
-      abis:
-        - name: PointsGranterUpgradeable
-          file: ./abis/PointsGranterUpgradeable.json
-      eventHandlers:
-        - event: PointsGranted(indexed address,uint256,uint8,uint64)
-          handler: handlePointsGranted
-      file: ./src/clmsr-market-core.ts
diff --git a/clmsr-subgraph/subgraph-citrea-dev.yaml b/clmsr-subgraph/subgraph-citrea-dev.yaml
index 235315a..dbb9ed7 100644
--- a/clmsr-subgraph/subgraph-citrea-dev.yaml
+++ b/clmsr-subgraph/subgraph-citrea-dev.yaml
@@ -20,6 +20,7 @@ dataSources:
       entities:
         - MarketCreated
         - MarketSettled
+        - MarketSettlementValueSubmitted
         - PositionClaimed
         - PositionClosed
         - PositionDecreased
@@ -30,7 +31,7 @@ dataSources:
         - UserStats
       abis:
         - name: CLMSRMarketCore
-          file: ./abis/CLMSRMarketCoreUpgradeable.json
+          file: ./abis/CLMSRMarketCore.json
       eventHandlers:
         - event: MarketCreated(indexed uint256,uint64,uint64,int256,int256,int256,uint32,uint256)
           handler: handleMarketCreated
@@ -50,26 +51,28 @@ dataSources:
           handler: handlePositionSettled
         - event: RangeFactorApplied(indexed uint256,indexed int256,indexed int256,uint256)
           handler: handleRangeFactorApplied
+        - event: MarketSettlementValueSubmitted(indexed uint256,int256)
+          handler: handleMarketSettlementValueSubmitted
       file: ./src/clmsr-market-core.ts
 
   # ===== PointsGranter 컨트랙트 =====
   - kind: ethereum
-    name: PointsGranterUpgradeable
+    name: PointsGranter
     network: citrea-testnet-tangerine
     source:
       address: "0x59eb810fa5e7c0646902C29D9e8bfdaDf25Ce274"
-      abi: PointsGranterUpgradeable
+      abi: PointsGranter
       startBlock: 14044300
     mapping:
       kind: ethereum/events
       apiVersion: 0.0.9
       language: wasm/assemblyscript
       entities:
-        - PointsEventHistory
+        - EventHistory
         - UserStats
       abis:
-        - name: PointsGranterUpgradeable
-          file: ./abis/PointsGranterUpgradeable.json
+        - name: PointsGranter
+          file: ./abis/PointsGranter.json
       eventHandlers:
         - event: PointsGranted(indexed address,uint256,uint8,uint64)
           handler: handlePointsGranted
diff --git a/clmsr-subgraph/subgraph-citrea-prod.yaml b/clmsr-subgraph/subgraph-citrea-prod.yaml
index be85ff2..a744cfc 100644
--- a/clmsr-subgraph/subgraph-citrea-prod.yaml
+++ b/clmsr-subgraph/subgraph-citrea-prod.yaml
@@ -12,13 +12,14 @@ dataSources:
     source:
       address: "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf"
       abi: CLMSRMarketCore
-      startBlock: 14176879
+      startBlock: 14176880
     mapping:
       kind: ethereum/events
       apiVersion: 0.0.9
       language: wasm/assemblyscript
       entities:
-        - MarketCreated
+        - EmergencyPaused
+        - EmergencyUnpaused
         - MarketSettled
         - PositionClaimed
         - PositionClosed
@@ -26,11 +27,19 @@ dataSources:
         - PositionIncreased
         - PositionOpened
         - RangeFactorApplied
-        - EventHistory
+        - Market
+        - BinState
+        - MarketDistribution
+        - UserPosition
+        - Trade
         - UserStats
+        - MarketStats
+        - EventHistory
+        - PositionSettled
+        - MarketSettlementValueSubmitted
       abis:
         - name: CLMSRMarketCore
-          file: ./abis/CLMSRMarketCoreUpgradeable.json
+          file: ./abis/CLMSRMarketCore.json
       eventHandlers:
         - event: MarketCreated(indexed uint256,uint64,uint64,int256,int256,int256,uint32,uint256)
           handler: handleMarketCreated
@@ -50,27 +59,29 @@ dataSources:
           handler: handlePositionSettled
         - event: RangeFactorApplied(indexed uint256,indexed int256,indexed int256,uint256)
           handler: handleRangeFactorApplied
+        - event: MarketSettlementValueSubmitted(indexed uint256,int256)
+          handler: handleMarketSettlementValueSubmitted
       file: ./src/clmsr-market-core.ts
 
   # ===== PointsGranter 컨트랙트 =====
   - kind: ethereum
-    name: PointsGranterUpgradeable
+    name: PointsGranter
     network: citrea-testnet-tangerine
     source:
       address: "0x9E1265677B628A22b9C1d6f0FeCEb6241eA5268d"
-      abi: PointsGranterUpgradeable
+      abi: PointsGranter
       startBlock: 14176879
     mapping:
       kind: ethereum/events
       apiVersion: 0.0.9
       language: wasm/assemblyscript
       entities:
-        - PointsEventHistory
+        - EventHistory
         - UserStats
       abis:
-        - name: PointsGranterUpgradeable
-          file: ./abis/PointsGranterUpgradeable.json
+        - name: PointsGranter
+          file: ./abis/PointsGranter.json
       eventHandlers:
         - event: PointsGranted(indexed address,uint256,uint8,uint64)
           handler: handlePointsGranted
-      file: ./src/clmsr-market-core.ts
+      file: ./src/points.ts
diff --git a/clmsr-subgraph/tests/.bin/clmsr-market-core.wasm b/clmsr-subgraph/tests/.bin/clmsr-market-core.wasm
index d4491a1..6650d34 100644
Binary files a/clmsr-subgraph/tests/.bin/clmsr-market-core.wasm and b/clmsr-subgraph/tests/.bin/clmsr-market-core.wasm differ
diff --git a/clmsr-subgraph/tests/.latest.json b/clmsr-subgraph/tests/.latest.json
index 8699dbb..b533c2c 100644
--- a/clmsr-subgraph/tests/.latest.json
+++ b/clmsr-subgraph/tests/.latest.json
@@ -1,4 +1,4 @@
 {
   "version": "0.6.0",
-  "timestamp": 1755576766685
+  "timestamp": 1756223094334
 }
\ No newline at end of file
diff --git a/clmsr-subgraph/tests/clmsr-market-core-utils.ts b/clmsr-subgraph/tests/clmsr-market-core-utils.ts
index 9babded..2c4bb44 100644
--- a/clmsr-subgraph/tests/clmsr-market-core-utils.ts
+++ b/clmsr-subgraph/tests/clmsr-market-core-utils.ts
@@ -5,6 +5,7 @@ import {
   EmergencyUnpaused,
   MarketCreated,
   MarketSettled,
+  MarketSettlementValueSubmitted,
   PositionClaimed,
   PositionClosed,
   PositionDecreased,
@@ -150,6 +151,42 @@ export function createMarketSettledEvent(
   return marketSettledEvent;
 }
 
+export function createMarketSettlementValueSubmittedEvent(
+  marketId: BigInt,
+  settlementValue: BigInt
+): MarketSettlementValueSubmitted {
+  let marketSettlementValueSubmittedEvent =
+    changetype<MarketSettlementValueSubmitted>(newMockEvent());
+
+  // Mock 이벤트 기본값 설정
+  marketSettlementValueSubmittedEvent.address = Address.fromString(
+    "0xA16081F360e3847006dB660bae1c6d1b2e17eC2A"
+  );
+  marketSettlementValueSubmittedEvent.transaction.hash = Bytes.fromHexString(
+    "0x123456789012345678901234567890123456789012345678901234567890123C"
+  );
+  marketSettlementValueSubmittedEvent.logIndex = BigInt.fromI32(1);
+  marketSettlementValueSubmittedEvent.block.number = BigInt.fromI32(1);
+  marketSettlementValueSubmittedEvent.block.timestamp = BigInt.fromI32(1000000);
+
+  marketSettlementValueSubmittedEvent.parameters = new Array();
+
+  marketSettlementValueSubmittedEvent.parameters.push(
+    new ethereum.EventParam(
+      "marketId",
+      ethereum.Value.fromUnsignedBigInt(marketId)
+    )
+  );
+  marketSettlementValueSubmittedEvent.parameters.push(
+    new ethereum.EventParam(
+      "settlementValue",
+      ethereum.Value.fromSignedBigInt(settlementValue)
+    )
+  );
+
+  return marketSettlementValueSubmittedEvent;
+}
+
 export function createPositionClaimedEvent(
   positionId: BigInt,
   trader: Address,
diff --git a/clmsr-subgraph/tests/clmsr-market-core.test.ts b/clmsr-subgraph/tests/clmsr-market-core.test.ts
index 2cb96a2..c6cd59d 100644
--- a/clmsr-subgraph/tests/clmsr-market-core.test.ts
+++ b/clmsr-subgraph/tests/clmsr-market-core.test.ts
@@ -12,6 +12,7 @@ import { MarketDistribution } from "../generated/schema";
 import {
   handleMarketCreated,
   handleMarketSettled,
+  handleMarketSettlementValueSubmitted,
   handleRangeFactorApplied,
   handlePositionOpened,
   handlePositionDecreased,
@@ -22,6 +23,7 @@ import {
 import {
   createMarketCreatedEvent,
   createMarketSettledEvent,
+  createMarketSettlementValueSubmittedEvent,
   createRangeFactorAppliedEvent,
   createPositionOpenedEvent,
   createPositionDecreasedEvent,
@@ -951,13 +953,21 @@ describe("CLMSR Market Core Tests", () => {
     // 2. Verify market is initially active and not settled
     assert.fieldEquals("Market", "1", "isSettled", "false");
 
-    // 3. Settle market with tick 115 (within range 100-200)
+    // 3. Settle market with tick 115 (basic settlement)
     let settlementTick = BigInt.fromI32(115);
     let marketSettledEvent = createMarketSettledEvent(marketId, settlementTick);
     handleMarketSettled(marketSettledEvent);
 
-    // 4. Verify market settlement
+    // 4. Submit settlement value (6 decimals = 115_500_000 = 115.5)
+    let settlementValue = BigInt.fromI32(115_500_000); // 115.5 * 10^6
+    let marketSettlementValueSubmittedEvent =
+      createMarketSettlementValueSubmittedEvent(marketId, settlementValue);
+    handleMarketSettlementValueSubmitted(marketSettlementValueSubmittedEvent);
+
+    // 5. Verify both events
     assert.entityCount("MarketSettled", 1);
+    assert.entityCount("MarketSettlementValueSubmitted", 1);
+
     assert.fieldEquals(
       "MarketSettled",
       marketSettledEvent.transaction.hash
@@ -975,8 +985,30 @@ describe("CLMSR Market Core Tests", () => {
       "115"
     );
 
-    // 5. Verify market state updated
+    assert.fieldEquals(
+      "MarketSettlementValueSubmitted",
+      marketSettlementValueSubmittedEvent.transaction.hash
+        .concatI32(marketSettlementValueSubmittedEvent.logIndex.toI32())
+        .toHexString(),
+      "marketId",
+      "1"
+    );
+    assert.fieldEquals(
+      "MarketSettlementValueSubmitted",
+      marketSettlementValueSubmittedEvent.transaction.hash
+        .concatI32(marketSettlementValueSubmittedEvent.logIndex.toI32())
+        .toHexString(),
+      "settlementValue",
+      "115500000"
+    );
+
+    // 6. Verify market state updated with both values
     assert.fieldEquals("Market", "1", "isSettled", "true");
+    assert.fieldEquals("Market", "1", "settlementTick", "115");
+    // settlementValue should be updated by both events:
+    // First by MarketSettled: 115 * 1_000_000 = 115_000_000
+    // Then by MarketSettlementValueSubmitted: 115_500_000 (overwrites)
+    assert.fieldEquals("Market", "1", "settlementValue", "115500000");
   });
 
   test("PositionSettled - WIN scenario with detailed PnL and points calculation", () => {
diff --git a/contracts/core/CLMSRMarketCore.sol b/contracts/core/CLMSRMarketCore.sol
index c56b6e4..3a5ecf7 100644
--- a/contracts/core/CLMSRMarketCore.sol
+++ b/contracts/core/CLMSRMarketCore.sol
@@ -3,17 +3,28 @@ pragma solidity ^0.8.24;
 
 import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
 import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
-import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
+import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
+import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
+import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
+import "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol";
+import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
 import "../interfaces/ICLMSRMarketCore.sol";
 import "../interfaces/ICLMSRPosition.sol";
 import {LazyMulSegmentTree} from "../libraries/LazyMulSegmentTree.sol";
 import {FixedPointMathU} from "../libraries/FixedPointMath.sol";
 import {CLMSRErrors as CE} from "../errors/CLMSRErrors.sol";
 
-/// @title CLMSRMarketCore
+/// @title CLMSRMarketCore  
 /// @notice Core implementation for CLMSR Daily-Market System
-/// @dev Immutable contract handling core trading logic and market state
-contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
+/// @dev UUPS upgradeable contract handling core trading logic and market state
+contract CLMSRMarketCore is 
+    Initializable,
+    ICLMSRMarketCore, 
+    OwnableUpgradeable,
+    UUPSUpgradeable,
+    PausableUpgradeable,
+    ReentrancyGuardUpgradeable
+{
     using SafeERC20 for IERC20;
     using {
         FixedPointMathU.toWad,
@@ -35,14 +46,14 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
     uint32 public constant MAX_TICK_COUNT = 1_000_000;
     
     /// @notice Minimum liquidity parameter (alpha)
-    uint256 public constant MIN_LIQUIDITY_PARAMETER = 1e15; // 0.001 ETH
+    uint256 public constant MIN_LIQUIDITY_PARAMETER = 1e15; // 0.001 
     
     /// @notice Maximum liquidity parameter (alpha)
-    uint256 public constant MAX_LIQUIDITY_PARAMETER = 1e21; // 1000 ETH
+    uint256 public constant MAX_LIQUIDITY_PARAMETER = 1e23; // 100000 
     
     
     /// @notice Maximum safe input for PRB-Math exp() function
-    uint256 private constant MAX_EXP_INPUT_WAD = 130_000_000_000_000_000; // 0.13 * 1e18
+    uint256 private constant MAX_EXP_INPUT_WAD = 1_000_000_000_000_000_000; // 1.0 * 1e18
     
     /// @notice Maximum number of chunks allowed per transaction to prevent gas DoS
     /// Increased to handle larger institutional trades while maintaining safety
@@ -54,16 +65,12 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
     // ========================================
     
     /// @notice Payment token (USDC - 6 decimals)
-    IERC20 public immutable paymentToken;
+    IERC20 public paymentToken;
     
     /// @notice Position NFT contract
-    ICLMSRPosition public immutable positionContract;
+    ICLMSRPosition public positionContract;
     
-    /// @notice Manager contract address
-    address public immutable managerContract;
-    
-    /// @notice Contract pause state
-    bool public paused;
+
     
     /// @notice Market data storage
     mapping(uint256 => Market) public markets;
@@ -74,7 +81,8 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
     /// @notice Next market ID counter for auto-increment
     uint256 public _nextMarketId;
     
-
+    /// @dev Gap for future storage variables
+    uint256[49] private __gap;
     
 
 
@@ -82,24 +90,6 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
     // MODIFIERS
     // ========================================
     
-    /// @notice Only manager can call
-    modifier onlyManager() {
-        if (msg.sender != managerContract) {
-            revert CE.UnauthorizedCaller(msg.sender);
-        }
-        _;
-    }
-    
-
-    
-    /// @notice Contract must not be paused
-    modifier whenNotPaused() {
-        if (paused) {
-            revert CE.ContractPaused();
-        }
-        _;
-    }
-    
     /// @notice Market must exist
     modifier marketExists(uint256 marketId) {
         if (!_marketExists(marketId)) {
@@ -109,33 +99,37 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
     }
 
     // ========================================
-    // CONSTRUCTOR
+    // INITIALIZER
     // ========================================
     
-    /// @notice Initialize the core contract
+    /// @notice Initialize the upgradeable contract
     /// @param _paymentToken ERC20 token for payments
     /// @param _positionContract Position NFT contract
-    /// @param _managerContract Manager contract
-    constructor(
+    function initialize(
         address _paymentToken,
-        address _positionContract,
-        address _managerContract
-    ) {
+        address _positionContract
+    ) external initializer {
         if (_paymentToken == address(0) || 
-            _positionContract == address(0) || 
-            _managerContract == address(0)) {
+            _positionContract == address(0)) {
             revert CE.ZeroAddress();
         }
         
+        __Ownable_init(msg.sender);
+        __UUPSUpgradeable_init();
+        __Pausable_init();
+        __ReentrancyGuard_init();
+        
         paymentToken = IERC20(_paymentToken);
-        positionContract = ICLMSRPosition(_positionContract);
-        managerContract = _managerContract;
+        positionContract = ICLMSRPosition(_positionContract);    
         
         // Initialize market ID counter
         _nextMarketId = 1;
         
         // Note: 6 decimals assumed for payment token (USDC)
     }
+    
+    /// @notice Authorize upgrade (only owner)
+    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}
 
     // ========================================
     // MARKET MANAGEMENT FUNCTIONS
@@ -149,7 +143,7 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
         uint64 startTimestamp,
         uint64 endTimestamp,
         uint256 liquidityParameter
-    ) external override onlyManager whenNotPaused returns (uint256 marketId) {
+    ) external override onlyOwner whenNotPaused returns (uint256 marketId) {
         // Auto-generate market ID
         marketId = _nextMarketId;
         _nextMarketId++;
@@ -184,7 +178,10 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
             maxTick: maxTick,
             tickSpacing: tickSpacing,
             numBins: numBins,
-            liquidityParameter: liquidityParameter
+            liquidityParameter: liquidityParameter,
+            positionEventsCursor: 0,
+            positionEventsEmitted: false,
+            settlementValue: 0
         });
         
         // Initialize segment tree
@@ -194,39 +191,106 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
     }
     
     /// @inheritdoc ICLMSRMarketCore
-    function settleMarket(uint256 marketId, int256 settlementTick) 
-        external override onlyManager marketExists(marketId) {
+    function settleMarket(uint256 marketId, int256 settlementValue) 
+        external override onlyOwner marketExists(marketId) {
         Market storage market = markets[marketId];
         
         if (market.settled) {
             revert CE.MarketAlreadySettled(marketId);
         }
         
+        // Convert 6-decimal settlementValue to integer tick (floor division)
+        int256 settlementTick = settlementValue / 1_000_000;
+        
         // Validate settlement tick is within market bounds
         if (settlementTick < market.minTick || settlementTick > market.maxTick) {
             revert CE.InvalidTick(settlementTick, market.minTick, market.maxTick);
         }
         
-        // Settle market with exact tick value
+        // Settle market with both original value and calculated tick
         market.settled = true;
+        market.settlementValue = settlementValue;
         market.settlementTick = settlementTick;
         market.isActive = false;
         
+        // Initialize position events emission state
+        market.positionEventsCursor = 0;
+        market.positionEventsEmitted = false;
+        
         emit MarketSettled(marketId, settlementTick);
+        emit MarketSettlementValueSubmitted(marketId, settlementValue);
+    }
+
+    /// @inheritdoc ICLMSRMarketCore
+    function emitPositionSettledBatch(
+        uint256 marketId,
+        uint256 scanLimit
+    ) external override onlyOwner marketExists(marketId) {
+        Market storage m = markets[marketId];
+        if (!m.settled) revert CE.MarketNotSettled(marketId);
+        if (m.positionEventsEmitted) return;
+        require(scanLimit > 0, "scanLimit=0");
+
+        // 커서가 0이면 1번 position부터 시작
+        uint256 fromId = m.positionEventsCursor == 0 ? 1 : uint256(m.positionEventsCursor);
+        uint256 maxIdExclusive = positionContract.getNextId(); // nextId는 Exclusive 상한
+        if (fromId >= maxIdExclusive) {
+            m.positionEventsEmitted = true;
+            emit PositionEventsProgress(marketId, fromId, fromId, true);
+            return;
+        }
+
+        uint256 toIdExclusive = fromId + scanLimit;
+        if (toIdExclusive > maxIdExclusive) toIdExclusive = maxIdExclusive;
+
+        // 스캔 범위 내에서 해당 마켓 포지션만 이벤트 emit
+        for (uint256 pid = fromId; pid < toIdExclusive; ++pid) {
+            // 존재하지 않거나 다른 마켓이면 건너뜀
+            if (!positionContract.exists(pid)) continue;
+            ICLMSRPosition.Position memory p = positionContract.getPosition(pid);
+            if (p.marketId != marketId) continue;
+
+            // 승/패 및 페이아웃 계산
+            uint256 payout = _calculateClaimAmount(pid);
+            bool isWin = payout > 0;
+
+            // 소유자 (존재 확인 후 ownerOf 사용)
+            address trader = positionContract.ownerOf(pid);
+            emit PositionSettled(pid, trader, payout, isWin);
+        }
+
+        // 커서를 다음 스캔 시작점으로 이동
+        m.positionEventsCursor = uint32(toIdExclusive);
+        bool done = (toIdExclusive == maxIdExclusive);
+        if (done) m.positionEventsEmitted = true;
+
+        // 진행 이벤트: 이제 'positionId' 범위를 의미 (배열 인덱스 아님)
+        emit PositionEventsProgress(marketId, fromId, toIdExclusive - 1, done);
+    }
+
+    /// @inheritdoc ICLMSRMarketCore
+    function updateMarketTiming(
+        uint256 marketId,
+        uint64 newStartTimestamp,
+        uint64 newEndTimestamp
+    ) external override onlyOwner marketExists(marketId) {
+        Market storage market = markets[marketId];
         
-        uint256[] memory positionIds = positionContract.getMarketPositions(marketId);
+        // Market must not be settled
+        if (market.settled) {
+            revert CE.MarketAlreadySettled(marketId);
+        }
         
-        for (uint256 i = 0; i < positionIds.length; i++) {
-            uint256 posId = positionIds[i];
-            ICLMSRPosition.Position memory pos = positionContract.getPosition(posId);
-            address owner = positionContract.ownerOf(posId);
-            
-            // Position wins if settlement tick is within position range [lowerTick, upperTick)
-            bool isWin = pos.lowerTick <= settlementTick && pos.upperTick > settlementTick;
-            uint256 payout = isWin ? uint256(pos.quantity) : 0;
-            
-            emit PositionSettled(posId, owner, payout, isWin);
+        // Validate new time range
+        if (newStartTimestamp >= newEndTimestamp) {
+            revert CE.InvalidTimeRange();
         }
+        
+        // Update timing
+        market.startTimestamp = newStartTimestamp;
+        market.endTimestamp = newEndTimestamp;
+        
+        emit MarketTimingUpdated(marketId, newStartTimestamp, newEndTimestamp);
     }
 
     // ========================================
@@ -385,7 +449,7 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
     // STATE QUERY FUNCTIONS
     // ========================================
     
-    /// @inheritdoc ICLMSRMarketCore
+        /// @inheritdoc ICLMSRMarketCore
     function getMarket(uint256 marketId) 
         external view override returns (Market memory market) {
         if (!_marketExists(marketId)) {
@@ -394,9 +458,9 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
         return markets[marketId];
     }
     
-    /// @inheritdoc ICLMSRMarketCore
+        /// @inheritdoc ICLMSRMarketCore
     function getTickValue(uint256 marketId, int256 tick) 
-        external view override marketExists(marketId) returns (uint256 value) {
+    external view override marketExists(marketId) returns (uint256 value) {
         Market memory market = markets[marketId];
         _validateTick(tick, market);
         
@@ -438,7 +502,7 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
     function propagateLazy(uint256 marketId, int256 lo, int256 hi)
         external
         override
-        onlyManager
+        onlyOwner
         marketExists(marketId)
         returns (uint256 sum)
     {
@@ -463,7 +527,7 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
     function applyRangeFactor(uint256 marketId, int256 lo, int256 hi, uint256 factor)
         external
         override
-        onlyManager
+        onlyOwner
         marketExists(marketId)
     {
         Market memory market = markets[marketId];
@@ -480,53 +544,44 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
         emit RangeFactorApplied(marketId, lo, hi, factor);
     }
     
-    /// @inheritdoc ICLMSRMarketCore
+        /// @inheritdoc ICLMSRMarketCore
     function getPositionContract() external view override returns (address) {
         return address(positionContract);
     }
     
-    /// @inheritdoc ICLMSRMarketCore
+        /// @inheritdoc ICLMSRMarketCore
     function getPaymentToken() external view override returns (address) {
         return address(paymentToken);
     }
     
 
     
-    /// @notice Get manager contract address
-    /// @return Manager contract address
-    function getManagerContract() external view returns (address) {
-        return managerContract;
-    }
+
     
     // ========================================
     // EMERGENCY FUNCTIONS
     // ========================================
     
-    /// @inheritdoc ICLMSRMarketCore
-    function pause(string calldata reason) external override onlyManager {
-        _pause(reason);
+        /// @inheritdoc ICLMSRMarketCore
+    function pause(string calldata reason) external override onlyOwner {
+        _pauseWithReason(reason);
     }
     
-    /// @inheritdoc ICLMSRMarketCore
-    function unpause() external override onlyManager {
-        _unpause();
+        /// @inheritdoc ICLMSRMarketCore
+    function unpause() external override onlyOwner {
+        super._unpause();
+        emit EmergencyUnpaused(msg.sender);
     }
     
     /// @notice Internal pause implementation
-    function _pause(string memory reason) internal {
-        paused = true;
+    function _pauseWithReason(string memory reason) internal {
+        super._pause();
         emit EmergencyPaused(msg.sender, reason);
     }
     
-    /// @notice Internal unpause implementation
-    function _unpause() internal {
-        paused = false;
-        emit EmergencyUnpaused(msg.sender);
-    }
-    
     /// @inheritdoc ICLMSRMarketCore
     function isPaused() external view override returns (bool) {
-        return paused;
+        return paused();
     }
 
     // ========================================
@@ -663,7 +718,7 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
         
         // Update position quantity
         newQuantity = position.quantity + additionalQuantity;
-        positionContract.setPositionQuantity(positionId, newQuantity);
+        positionContract.updateQuantity(positionId, newQuantity);
         
         emit PositionIncreased(positionId, msg.sender, additionalQuantity, newQuantity, cost6);
     }
@@ -717,9 +772,9 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
         newQuantity = position.quantity - sellQuantity;
         if (newQuantity == 0) {
             // Burn position if quantity becomes zero
-            positionContract.burnPosition(positionId);
+            positionContract.burn(positionId);
         } else {
-            positionContract.setPositionQuantity(positionId, newQuantity);
+            positionContract.updateQuantity(positionId, newQuantity);
         }
         
         emit PositionDecreased(positionId, msg.sender, sellQuantity, newQuantity, proceeds);
@@ -752,7 +807,7 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
         _pushUSDC(msg.sender, payout);
         
         // Burn position NFT (position is claimed)
-        positionContract.burnPosition(positionId);
+        positionContract.burn(positionId);
         
         emit PositionClaimed(positionId, msg.sender, payout);
     }
@@ -830,7 +885,7 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
         return proceedsWad.fromWadRoundUp();
     }
     
-    /// @inheritdoc ICLMSRMarketCore
+        /// @inheritdoc ICLMSRMarketCore
     function calculateCloseProceeds(
         uint256 positionId
     ) external view override returns (uint256 proceeds) {
@@ -851,6 +906,51 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
     ) external view override returns (uint256 amount) {
         return _calculateClaimAmount(positionId);
     }
+    
+    /// @inheritdoc ICLMSRMarketCore
+    function calculateQuantityFromCost(
+        uint256 marketId,
+        int256 lowerTick,
+        int256 upperTick,
+        uint256 cost
+    ) external view override marketExists(marketId) returns (uint128 quantity) {
+        if (cost == 0) {
+            return 0;
+        }
+        
+        Market memory market = markets[marketId];
+        _validateTick(lowerTick, market);
+        _validateTick(upperTick, market);
+        
+        if (lowerTick > upperTick) {
+            revert CE.InvalidTickRange(lowerTick, upperTick);
+        }
+        
+        // 🚨 NO POINT BETTING: Reject same tick betting
+        if (lowerTick == upperTick) {
+            revert CE.InvalidTickRange(lowerTick, upperTick);
+        }
+        
+        // ✅ RANGE BETTING: Allow any valid range (single or multiple intervals)
+        // Must be aligned to tick spacing
+        if ((upperTick - lowerTick) % market.tickSpacing != 0) {
+            revert CE.InvalidTickRange(lowerTick, upperTick);
+        }
+        
+        // Convert cost to WAD for internal calculation
+        uint256 costWad = uint256(cost).toWad();
+        uint256 quantityWad = _calculateQuantityFromCostInternal(marketId, lowerTick, upperTick, costWad);
+        
+        // Convert quantity back to 6-decimal for external interface
+        uint256 quantityValue = quantityWad.fromWad();
+        
+        // Ensure result fits in uint128
+        if (quantityValue > type(uint128).max) {
+            revert CE.InvalidQuantity(type(uint128).max);
+        }
+        
+        return uint128(quantityValue);
+    }
 
     // ========================================
     // INTERNAL CALCULATION FUNCTIONS
@@ -872,6 +972,55 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
         }
     }
     
+    /// @notice Calculate quantity that can be bought with given cost (inverse function)
+    /// @dev Implements inverse of CLMSR formula: from C = α * ln(Σ_after / Σ_before), solve for q
+    /// @param marketId Market identifier
+    /// @param lowerTick Lower tick bound
+    /// @param upperTick Upper tick bound
+    /// @param costWad Target cost in WAD format
+    /// @return quantityWad Purchasable quantity in WAD format
+    function _calculateQuantityFromCostInternal(
+        uint256 marketId,
+        int256 lowerTick,
+        int256 upperTick,
+        uint256 costWad
+    ) internal view returns (uint256 quantityWad) {
+        Market memory market = markets[marketId];
+        uint256 alpha = market.liquidityParameter;
+        
+        // Convert range to bins
+        (uint32 lowerBin, uint32 upperBin) = _rangeToBins(lowerTick, upperTick, market);
+        
+        // Get current state with proper lazy propagation
+        // Use getRangeSum for entire tree to get accurate total with lazy values
+        uint256 sumBefore = LazyMulSegmentTree.getRangeSum(marketTrees[marketId], 0, market.numBins - 1);
+        uint256 affectedSum = LazyMulSegmentTree.getRangeSum(marketTrees[marketId], lowerBin, upperBin);
+        
+        // Ensure tree is properly initialized
+        if (sumBefore == 0) revert CE.TreeNotInitialized();
+        
+        if (affectedSum == 0) {
+            revert CE.TreeNotInitialized(); // Cannot calculate quantity from cost: affected sum is zero
+        }
+        
+        // Direct mathematical inverse:
+        // From: C = α * ln(sumAfter / sumBefore)
+        // Calculate: q = α * ln(factor)
+        
+        // Calculate target sum after: sumAfter = sumBefore * exp(C/α) - use safe chunking
+        uint256 expValue = _safeExp(costWad, alpha);
+        uint256 targetSumAfter = sumBefore.wMul(expValue);
+        
+        // Calculate required affected sum after trade
+        uint256 requiredAffectedSum = targetSumAfter - (sumBefore - affectedSum);
+        
+        // Calculate factor: newAffectedSum / affectedSum
+        uint256 factor = requiredAffectedSum.wDiv(affectedSum);
+        
+        // Calculate quantity: q = α * ln(factor)
+        quantityWad = alpha.wMul(factor.wLn());
+    }
+    
     /// @notice Calculate cost of a trade using CLMSR formula with chunk-split logic
     /// @dev CLMSR formula: C = α * ln(Σ_after / Σ_before) where each tick has exp(q_i/α)
     function _calculateTradeCostInternal(
@@ -894,7 +1043,7 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
             return _calculateSingleTradeCost(marketId, lowerTick, upperTick, totalQuantity, alpha);
         } else {
             // Split into chunks with proper cumulative calculation
-            uint256 sumBefore = LazyMulSegmentTree.getTotalSum(marketTrees[marketId]);
+            uint256 sumBefore = LazyMulSegmentTree.getRangeSum(marketTrees[marketId], 0, market.numBins - 1);
             uint256 affectedSum = LazyMulSegmentTree.getRangeSum(marketTrees[marketId], lowerBin, upperBin);
             
             // Ensure tree is properly initialized
@@ -987,15 +1136,15 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
         uint256 quantity,
         uint256 alpha
     ) internal view returns (uint256 cost) {
-        // Get current sum before trade using cached total sum
-        uint256 sumBefore = LazyMulSegmentTree.getTotalSum(marketTrees[marketId]);
+        // Get current sum before trade with proper lazy propagation
+        Market memory market = markets[marketId];
+        uint256 sumBefore = LazyMulSegmentTree.getRangeSum(marketTrees[marketId], 0, market.numBins - 1);
         
         // Calculate multiplicative factor: exp(quantity / α)
         uint256 quantityScaled = quantity.wDiv(alpha);
         uint256 factor = quantityScaled.wExp();
         
         // Calculate sum after trade - convert range to bins
-        Market memory market = markets[marketId];
         (uint32 lowerBin, uint32 upperBin) = _rangeToBins(lowerTick, upperTick, market);
         uint256 affectedSum = LazyMulSegmentTree.getRangeSum(marketTrees[marketId], lowerBin, upperBin);
         
@@ -1042,7 +1191,7 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
             return _calculateSingleSellProceeds(marketId, lowerTick, upperTick, totalQuantity, alpha);
         } else {
             // Split into chunks with proper cumulative calculation
-            uint256 sumBefore = LazyMulSegmentTree.getTotalSum(marketTrees[marketId]);
+            uint256 sumBefore = LazyMulSegmentTree.getRangeSum(marketTrees[marketId], 0, market.numBins - 1);
             uint256 affectedSum = LazyMulSegmentTree.getRangeSum(marketTrees[marketId], lowerBin, upperBin);
             
             // Ensure tree is properly initialized
@@ -1133,6 +1282,9 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
         }
     }
     
+    /// @notice Debug event for sell proceeds calculation
+    event DebugSellProceeds(uint256 step, uint256 value1, uint256 value2, string message);
+
     /// @notice Calculate proceeds for a single chunk (small quantity)
     function _calculateSingleSellProceeds(
         uint256 marketId,
@@ -1141,8 +1293,9 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
         uint256 quantity,
         uint256 alpha
     ) internal view returns (uint256 proceeds) {
-        // Get current sum before sell using cached total sum
-        uint256 sumBefore = LazyMulSegmentTree.getTotalSum(marketTrees[marketId]);
+        // Get current sum before sell with proper lazy propagation
+        Market memory market = markets[marketId];
+        uint256 sumBefore = LazyMulSegmentTree.getRangeSum(marketTrees[marketId], 0, market.numBins - 1);
         
         // Calculate multiplicative factor: exp(-quantity / α) = 1 / exp(quantity / α)
         uint256 quantityScaled = quantity.wDiv(alpha);
@@ -1150,7 +1303,6 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
         uint256 inverseFactor = FixedPointMathU.WAD.wDiv(factor);
         
         // Calculate sum after sell - convert range to indices
-        Market memory market = markets[marketId];
         (uint32 lowerBin, uint32 upperBin) = _rangeToBins(lowerTick, upperTick, market);
         uint256 affectedSum = LazyMulSegmentTree.getRangeSum(marketTrees[marketId], lowerBin, upperBin);
         
@@ -1165,9 +1317,6 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
         // Safety check: ensure sumAfter > 0 to prevent division by zero
         if (sumAfter == 0) revert CE.TreeNotInitialized(); // Reusing existing error
         
-        // Ensure tree is properly initialized
-        if (sumBefore == 0) revert CE.TreeNotInitialized();
-        
         // CLMSR proceeds formula: α * ln(sumBefore / sumAfter)
         if (sumBefore <= sumAfter) {
             return 0; // No proceeds if sum doesn't decrease
@@ -1378,7 +1527,7 @@ contract CLMSRMarketCore is ICLMSRMarketCore, ReentrancyGuard {
         _pushUSDC(msg.sender, proceeds);
         
         // Burn position NFT
-        positionContract.burnPosition(positionId);
+        positionContract.burn(positionId);
         
         emit PositionClosed(positionId, msg.sender, proceeds);
     }
diff --git a/contracts/core/CLMSRMarketCoreUpgradeable.sol b/contracts/core/CLMSRMarketCoreUpgradeable.sol
deleted file mode 100644
index ef6ad42..0000000
--- a/contracts/core/CLMSRMarketCoreUpgradeable.sol
+++ /dev/null
@@ -1,1436 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.24;
-
-import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
-import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
-import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
-import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
-import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
-import "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol";
-import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
-import "../interfaces/ICLMSRMarketCoreUpgradeable.sol";
-import "../interfaces/ICLMSRPositionUpgradeable.sol";
-import {LazyMulSegmentTree} from "../libraries/LazyMulSegmentTree.sol";
-import {FixedPointMathU} from "../libraries/FixedPointMath.sol";
-import {CLMSRErrors as CE} from "../errors/CLMSRErrors.sol";
-import "hardhat/console.sol";
-
-/// @title CLMSRMarketCoreUpgradeable
-/// @notice Upgradeable core implementation for CLMSR Daily-Market System
-/// @dev UUPS upgradeable contract handling core trading logic and market state
-contract CLMSRMarketCoreUpgradeable is 
-    Initializable,
-    ICLMSRMarketCoreUpgradeable, 
-    OwnableUpgradeable,
-    UUPSUpgradeable,
-    PausableUpgradeable,
-    ReentrancyGuardUpgradeable
-{
-    using SafeERC20 for IERC20;
-    using {
-        FixedPointMathU.toWad,
-        FixedPointMathU.fromWad,
-        FixedPointMathU.fromWadRoundUp,
-        FixedPointMathU.wMul,
-        FixedPointMathU.wDiv,
-        FixedPointMathU.wExp,
-        FixedPointMathU.wLn
-    } for uint256;
-
-
-
-    // ========================================
-    // CONSTANTS
-    // ========================================
-    
-    /// @notice Maximum number of ticks per market (segment tree safety)
-    uint32 public constant MAX_TICK_COUNT = 1_000_000;
-    
-    /// @notice Minimum liquidity parameter (alpha)
-    uint256 public constant MIN_LIQUIDITY_PARAMETER = 1e15; // 0.001 
-    
-    /// @notice Maximum liquidity parameter (alpha)
-    uint256 public constant MAX_LIQUIDITY_PARAMETER = 1e23; // 100000 
-    
-    
-    /// @notice Maximum safe input for PRB-Math exp() function
-    uint256 private constant MAX_EXP_INPUT_WAD = 1_000_000_000_000_000_000; // 1.0 * 1e18
-    
-    /// @notice Maximum number of chunks allowed per transaction to prevent gas DoS
-    /// Increased to handle larger institutional trades while maintaining safety
-    /// This allows for trades up to 500 * maxSafeQuantityPerChunk in size
-    uint256 private constant MAX_CHUNKS_PER_TX = 1000;
-
-    // ========================================
-    // STATE VARIABLES
-    // ========================================
-    
-    /// @notice Payment token (USDC - 6 decimals)
-    IERC20 public paymentToken;
-    
-    /// @notice Position NFT contract
-    ICLMSRPositionUpgradeable public positionContract;
-    
-
-    
-    /// @notice Market data storage
-    mapping(uint256 => Market) public markets;
-    
-    /// @notice Segment trees for each market (marketId => tree)
-    mapping(uint256 => LazyMulSegmentTree.Tree) public marketTrees;
-    
-    /// @notice Next market ID counter for auto-increment
-    uint256 public _nextMarketId;
-    
-    /// @dev Gap for future storage variables
-    uint256[49] private __gap;
-    
-
-    
-
-
-    // ========================================
-    // MODIFIERS
-    // ========================================
-    
-
-    
-
-    
-
-    
-    /// @notice Market must exist
-    modifier marketExists(uint256 marketId) {
-        if (!_marketExists(marketId)) {
-            revert CE.MarketNotFound(marketId);
-        }
-        _;
-    }
-
-    // ========================================
-    // INITIALIZER
-    // ========================================
-    
-    /// @notice Initialize the upgradeable contract
-    /// @param _paymentToken ERC20 token for payments
-    /// @param _positionContract Position NFT contract
-    function initialize(
-        address _paymentToken,
-        address _positionContract
-    ) external initializer {
-        if (_paymentToken == address(0) || 
-            _positionContract == address(0)) {
-            revert CE.ZeroAddress();
-        }
-        
-        __Ownable_init(msg.sender);
-        __UUPSUpgradeable_init();
-        __Pausable_init();
-        __ReentrancyGuard_init();
-        
-        paymentToken = IERC20(_paymentToken);
-        positionContract = ICLMSRPositionUpgradeable(_positionContract);    
-        
-        // Initialize market ID counter
-        _nextMarketId = 1;
-        
-        // Note: 6 decimals assumed for payment token (USDC)
-    }
-    
-    /// @notice Authorize upgrade (only owner)
-    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}
-
-    // ========================================
-    // MARKET MANAGEMENT FUNCTIONS
-    // ========================================
-    
-    /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function createMarket(
-        int256 minTick,
-        int256 maxTick,
-        int256 tickSpacing,
-        uint64 startTimestamp,
-        uint64 endTimestamp,
-        uint256 liquidityParameter
-    ) external override onlyOwner whenNotPaused returns (uint256 marketId) {
-        // Auto-generate market ID
-        marketId = _nextMarketId;
-        _nextMarketId++;
-        
-        // Validate market parameters
-        _validateMarketParameters(minTick, maxTick, tickSpacing);
-        
-        if (startTimestamp >= endTimestamp) {
-            revert CE.InvalidTimeRange();
-        }
-        
-        if (liquidityParameter < MIN_LIQUIDITY_PARAMETER || 
-            liquidityParameter > MAX_LIQUIDITY_PARAMETER) {
-            revert CE.InvalidLiquidityParameter();
-        }
-        
-        // Calculate number of bins
-        uint32 numBins = _calculateNumBins(minTick, maxTick, tickSpacing);
-        
-        if (numBins == 0 || numBins > MAX_TICK_COUNT) {
-            revert CE.BinCountExceedsLimit(numBins, MAX_TICK_COUNT);
-        }
-        
-        // Create market
-        markets[marketId] = Market({
-            isActive: true,
-            settled: false,
-            startTimestamp: startTimestamp,
-            endTimestamp: endTimestamp,
-            settlementTick: 0,
-            minTick: minTick,
-            maxTick: maxTick,
-            tickSpacing: tickSpacing,
-            numBins: numBins,
-            liquidityParameter: liquidityParameter,
-            positionEventsCursor: 0,
-            positionEventsEmitted: false
-        });
-        
-        // Initialize segment tree
-        LazyMulSegmentTree.init(marketTrees[marketId], numBins);
-        
-        emit MarketCreated(marketId, startTimestamp, endTimestamp, minTick, maxTick, tickSpacing, numBins, liquidityParameter);
-    }
-    
-    /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function settleMarket(uint256 marketId, int256 settlementTick) 
-        external override onlyOwner marketExists(marketId) {
-        Market storage market = markets[marketId];
-        
-        if (market.settled) {
-            revert CE.MarketAlreadySettled(marketId);
-        }
-        
-        // Validate settlement tick is within market bounds
-        if (settlementTick < market.minTick || settlementTick > market.maxTick) {
-            revert CE.InvalidTick(settlementTick, market.minTick, market.maxTick);
-        }
-        
-        // Settle market with exact tick value
-        market.settled = true;
-        market.settlementTick = settlementTick;
-        market.isActive = false;
-        
-        // Initialize position events emission state
-        market.positionEventsCursor = 0;
-        market.positionEventsEmitted = false;
-        
-        emit MarketSettled(marketId, settlementTick);
-    }
-
-    /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function emitPositionSettledBatch(
-        uint256 marketId,
-        uint256 limit
-    ) external override onlyOwner marketExists(marketId) {
-        Market storage m = markets[marketId];
-        if (!m.settled) revert CE.MarketNotSettled(marketId);
-        if (m.positionEventsEmitted) return;
-        require(limit > 0, "limit=0");
-
-        uint256 start = uint256(m.positionEventsCursor);
-
-        uint256[] memory ids = positionContract.getMarketPositions(marketId);
-        uint256 total = ids.length;
-        if (start >= total) {
-            m.positionEventsEmitted = true;
-            emit PositionEventsProgress(marketId, start, start, true);
-            return;
-        }
-
-        uint256 end = start + limit;
-        if (end > total) end = total;
-
-        int256 st = m.settlementTick;
-        for (uint256 i = start; i < end; ++i) {
-            uint256 posId = ids[i];
-            ICLMSRPositionUpgradeable.Position memory p = positionContract.getPosition(posId);
-            address owner = positionContract.ownerOf(posId);
-            bool isWin = (p.lowerTick <= st) && (p.upperTick > st);
-            uint256 payout = isWin ? uint256(p.quantity) : 0;
-            emit PositionSettled(posId, owner, payout, isWin);
-        }
-
-        m.positionEventsCursor = uint32(end);
-        bool done = (end == total);
-        if (done) m.positionEventsEmitted = true;
-
-        emit PositionEventsProgress(marketId, start, end, done);
-    }
-
-    /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function updateMarketTiming(
-        uint256 marketId,
-        uint64 newStartTimestamp,
-        uint64 newEndTimestamp
-    ) external override onlyOwner marketExists(marketId) {
-        Market storage market = markets[marketId];
-        
-        // Market must not be settled
-        if (market.settled) {
-            revert CE.MarketAlreadySettled(marketId);
-        }
-        
-        // Validate new time range
-        if (newStartTimestamp >= newEndTimestamp) {
-            revert CE.InvalidTimeRange();
-        }
-        
-        // Update timing
-        market.startTimestamp = newStartTimestamp;
-        market.endTimestamp = newEndTimestamp;
-        
-        emit MarketTimingUpdated(marketId, newStartTimestamp, newEndTimestamp);
-    }
-
-    // ========================================
-    // TICK VALIDATION AND CONVERSION FUNCTIONS
-    // ========================================
-    
-    /// @notice Validate market parameters
-    /// @param minTick Minimum tick value
-    /// @param maxTick Maximum tick value  
-    /// @param tickSpacing Tick spacing
-    function _validateMarketParameters(int256 minTick, int256 maxTick, int256 tickSpacing) internal pure {
-        if (minTick >= maxTick) {
-            revert CE.InvalidMarketParameters(minTick, maxTick, tickSpacing);
-        }
-        
-        if (tickSpacing <= 0) {
-            revert CE.InvalidMarketParameters(minTick, maxTick, tickSpacing);
-        }
-        
-        // Check that the range is divisible by tickSpacing
-        if ((maxTick - minTick) % tickSpacing != 0) {
-            revert CE.InvalidMarketParameters(minTick, maxTick, tickSpacing);
-        }
-    }
-    
-    /// @notice Calculate number of tick ranges for a market
-    /// @param minTick Minimum tick value
-    /// @param maxTick Maximum tick value
-    /// @param tickSpacing Tick spacing
-    /// @return numBins Number of bins (tick ranges, not tick points)
-    function _calculateNumBins(int256 minTick, int256 maxTick, int256 tickSpacing) internal pure returns (uint32) {
-        int256 range = maxTick - minTick;
-        int256 ranges = range / tickSpacing; // No +1 for ranges
-        require(ranges > 0 && ranges <= int256(uint256(MAX_TICK_COUNT)), "Invalid range count");
-        return uint32(uint256(ranges));
-    }
-    
-    /// @notice Validate that a tick is within market bounds and follows spacing
-    /// @param tick Tick to validate
-    /// @param market Market data
-    function _validateTick(int256 tick, Market memory market) internal pure {
-        if (tick < market.minTick || tick > market.maxTick) {
-            revert CE.InvalidTick(tick, market.minTick, market.maxTick);
-        }
-        
-        if ((tick - market.minTick) % market.tickSpacing != 0) {
-            revert CE.InvalidTickSpacing(tick, market.tickSpacing);
-        }
-    }
-    
-    /// @notice Convert tick range to segment tree bin
-    /// @param lowerTick Lower bound of range (inclusive)
-    /// @param upperTick Upper bound of range (exclusive)  
-    /// @param market Market data
-    /// @return bin Segment tree bin (0-based)
-    function _rangeToBin(int256 lowerTick, int256 upperTick, Market memory market) internal pure returns (uint32) {
-        // Validate range format
-        if (upperTick != lowerTick + market.tickSpacing) {
-            revert CE.InvalidTickRange(lowerTick, upperTick);
-        }
-        
-        int256 binInt = (lowerTick - market.minTick) / market.tickSpacing;
-        require(binInt >= 0 && binInt < int256(uint256(market.numBins)), "Range bin out of bounds");
-        return uint32(uint256(binInt));
-    }
-    
-    /// @notice Convert segment tree bin to tick range
-    /// @param bin Segment tree bin (0-based)
-    /// @param market Market data
-    /// @return lowerTick Lower bound of range (inclusive)
-    /// @return upperTick Upper bound of range (exclusive)
-    function _binToRange(uint32 bin, Market memory market) internal pure returns (int256 lowerTick, int256 upperTick) {
-        require(bin < market.numBins, "Bin out of bounds");
-        lowerTick = market.minTick + int256(uint256(bin)) * market.tickSpacing;
-        upperTick = lowerTick + market.tickSpacing;
-    }
-    
-    /// @notice Validate that a range is properly formatted
-    /// @param lowerTick Lower bound (inclusive)
-    /// @param upperTick Upper bound (exclusive)
-    /// @param market Market data
-    function _validateRange(int256 lowerTick, int256 upperTick, Market memory market) internal pure {
-        // Range must be exactly one tick spacing
-        if (upperTick != lowerTick + market.tickSpacing) {
-            revert CE.InvalidTickRange(lowerTick, upperTick);
-        }
-        
-        // Lower tick must be valid and aligned
-        _validateTick(lowerTick, market);
-        
-        // Upper tick must be within bounds (but can equal maxTick for last range)
-        if (upperTick > market.maxTick) {
-            revert CE.InvalidTick(upperTick, market.minTick, market.maxTick);
-                 }
-     }
-     
-       /// @notice Convert betting range to segment tree bins
-       /// @param lowerTick Range lower boundary (inclusive)
-       /// @param upperTick Range upper boundary (exclusive) 
-       /// @param market Market data
-       /// @return lowerBin Starting bin
-       /// @return upperBin Ending bin (inclusive in segment tree range)
-       function _rangeToBins(int256 lowerTick, int256 upperTick, Market memory market) 
-           internal pure returns (uint32 lowerBin, uint32 upperBin) {
-           lowerBin = uint32(uint256((lowerTick - market.minTick) / market.tickSpacing));
-           upperBin = uint32(uint256((upperTick - market.minTick) / market.tickSpacing - 1));
-           
-           require(lowerBin < market.numBins && upperBin < market.numBins, "Range bins out of bounds");
-           require(lowerBin <= upperBin, "Invalid range bins");
-       }
-       
-
-     // ========================================
-     // INTERNAL HELPER FUNCTIONS
-     // ========================================
-    
-    /// @notice Check if market exists
-    function _marketExists(uint256 marketId) internal view returns (bool) {
-        return markets[marketId].numBins > 0;
-    }
-    
-
-    
-    /// @notice Pull USDC from user (6-decimal amount)
-    function _pullUSDC(address from, uint256 amt6) internal {
-        if (amt6 > 0) {
-            paymentToken.safeTransferFrom(from, address(this), amt6);
-        }
-    }
-    
-    /// @notice Push USDC to user (6-decimal amount)
-    function _pushUSDC(address to, uint256 amt6) internal {
-        if (amt6 > 0) {
-            paymentToken.safeTransfer(to, amt6);
-        }
-    }
-    
-    /// @notice Calculate trade cost with 6-decimal input, returns WAD
-    function _calcCostInWad(
-        uint256 marketId,
-        int256 lowerTick,
-        int256 upperTick,
-        uint128 qty6
-    ) internal view returns (uint256 costWad) {
-        uint256 qtyWad = uint256(qty6).toWad();
-        return _calculateTradeCostInternal(marketId, lowerTick, upperTick, qtyWad);
-    }
-    
-
-    
-
-    
-
-
-    // ========================================
-    // STATE QUERY FUNCTIONS
-    // ========================================
-    
-        /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function getMarket(uint256 marketId) 
-        external view override returns (Market memory market) {
-        if (!_marketExists(marketId)) {
-            revert CE.MarketNotFound(marketId);
-        }
-        return markets[marketId];
-    }
-    
-        /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function getTickValue(uint256 marketId, int256 tick) 
-    external view override marketExists(marketId) returns (uint256 value) {
-        Market memory market = markets[marketId];
-        _validateTick(tick, market);
-        
-        // Convert single tick to range [tick, tick+spacing)
-        (uint32 lowerBin, uint32 upperBin) = _rangeToBins(tick, tick + market.tickSpacing, market);
-        return LazyMulSegmentTree.getRangeSum(marketTrees[marketId], lowerBin, upperBin);
-    }
-    
-    /// @notice Get range sum for market ticks (public view function)
-    /// @param marketId Market identifier
-    /// @param lo Lower tick (inclusive, actual tick value)
-    /// @param hi Upper tick (inclusive, actual tick value)
-    /// @return sum Sum of values in range
-    function getRangeSum(uint256 marketId, int256 lo, int256 hi)
-        public
-        view
-        override
-        marketExists(marketId)
-        returns (uint256 sum)
-    {
-        Market memory market = markets[marketId];
-        _validateTick(lo, market);
-        _validateTick(hi, market);
-        
-        if (lo > hi) {
-            revert CE.InvalidTickRange(lo, hi);
-        }
-        
-        (uint32 loBin, uint32 hiBin) = _rangeToBins(lo, hi, market);
-        
-        return LazyMulSegmentTree.getRangeSum(marketTrees[marketId], loBin, hiBin);
-    }
-
-    /// @notice Propagate lazy values for market ticks (Keeper only)
-    /// @param marketId Market identifier
-    /// @param lo Lower tick (inclusive, actual tick value)
-    /// @param hi Upper tick (inclusive, actual tick value)
-    /// @return sum Sum of values in range after propagation
-    function propagateLazy(uint256 marketId, int256 lo, int256 hi)
-        external
-        override
-        onlyOwner
-        marketExists(marketId)
-        returns (uint256 sum)
-    {
-        Market memory market = markets[marketId];
-        _validateTick(lo, market);
-        _validateTick(hi, market);
-        
-        if (lo > hi) {
-            revert CE.InvalidTickRange(lo, hi);
-        }
-        
-        (uint32 loBin, uint32 hiBin) = _rangeToBins(lo, hi, market);
-        
-        return LazyMulSegmentTree.propagateLazy(marketTrees[marketId], loBin, hiBin);
-    }
-
-    /// @notice Apply range factor to market ticks (Keeper only)
-    /// @param marketId Market identifier
-    /// @param lo Lower tick (inclusive, actual tick value)
-    /// @param hi Upper tick (inclusive, actual tick value)
-    /// @param factor Multiplication factor in WAD format
-    function applyRangeFactor(uint256 marketId, int256 lo, int256 hi, uint256 factor)
-        external
-        override
-        onlyOwner
-        marketExists(marketId)
-    {
-        Market memory market = markets[marketId];
-        _validateTick(lo, market);
-        _validateTick(hi, market);
-        
-        if (lo > hi) {
-            revert CE.InvalidTickRange(lo, hi);
-        }
-        
-        (uint32 loBin, uint32 hiBin) = _rangeToBins(lo, hi, market);
-        
-        LazyMulSegmentTree.applyRangeFactor(marketTrees[marketId], loBin, hiBin, factor);
-        emit RangeFactorApplied(marketId, lo, hi, factor);
-    }
-    
-        /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function getPositionContract() external view override returns (address) {
-        return address(positionContract);
-    }
-    
-        /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function getPaymentToken() external view override returns (address) {
-        return address(paymentToken);
-    }
-    
-
-    
-
-    
-    // ========================================
-    // EMERGENCY FUNCTIONS
-    // ========================================
-    
-        /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function pause(string calldata reason) external override onlyOwner {
-        _pauseWithReason(reason);
-    }
-    
-        /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function unpause() external override onlyOwner {
-        super._unpause();
-        emit EmergencyUnpaused(msg.sender);
-    }
-    
-    /// @notice Internal pause implementation
-    function _pauseWithReason(string memory reason) internal {
-        super._pause();
-        emit EmergencyPaused(msg.sender, reason);
-    }
-    
-    /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function isPaused() external view override returns (bool) {
-        return paused();
-    }
-
-    // ========================================
-    // EXECUTION FUNCTIONS
-    // ========================================
-    
-    /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function openPosition(
-        uint256 marketId,
-        int256 lowerTick,
-        int256 upperTick,
-        uint128 quantity,
-        uint256 maxCost
-    ) external override whenNotPaused nonReentrant returns (uint256 positionId) {
-        // Validate parameters
-        if (quantity == 0) {
-            revert CE.InvalidQuantity(quantity);
-        }
-        
-        Market storage market = markets[marketId];
-        if (!_marketExists(marketId)) {
-            revert CE.MarketNotFound(marketId);
-        }
-        
-        if (!market.isActive) {
-            revert CE.MarketNotActive();
-        }
-        
-        // Validate market timing
-        if (block.timestamp < market.startTimestamp) {
-            revert CE.MarketNotStarted();
-        }
-        
-        if (block.timestamp > market.endTimestamp) {
-            // Deactivate expired market
-            market.isActive = false;
-            revert CE.MarketExpired();
-        }
-        
-        // Validate ticks are within market bounds and follow spacing
-        _validateTick(lowerTick, market);
-        _validateTick(upperTick, market);
-        
-        if (lowerTick > upperTick) {
-            revert CE.InvalidTickRange(lowerTick, upperTick);
-        }
-        
-        // 🚨 NO POINT BETTING: Reject same tick betting
-        if (lowerTick == upperTick) {
-            revert CE.InvalidTickRange(lowerTick, upperTick);
-        }
-        
-        // ✅ RANGE BETTING: Allow any valid range (single or multiple intervals)
-        // Must be aligned to tick spacing
-        if ((upperTick - lowerTick) % market.tickSpacing != 0) {
-            revert CE.InvalidTickRange(lowerTick, upperTick);
-        }
-        
-        // Calculate trade cost and convert to 6-decimal with round-up to prevent zero-cost attacks
-        uint256 costWad = _calcCostInWad(marketId, lowerTick, upperTick, quantity);
-        uint256 cost6 = costWad.fromWadRoundUp();
-        
-        if (cost6 > maxCost) {
-            revert CE.CostExceedsMaximum(cost6, maxCost);
-        }
-        
-        // Transfer payment from caller (msg.sender)
-        _pullUSDC(msg.sender, cost6);
-        
-        // Update market state using WAD quantity
-        uint256 qtyWad = uint256(quantity).toWad();
-        _applyFactorChunked(marketId, lowerTick, upperTick, qtyWad, markets[marketId].liquidityParameter, true);
-        
-        // Mint position NFT to caller (msg.sender) with original 6-decimal quantity (storage unchanged)
-        positionId = positionContract.mintPosition(
-            msg.sender,
-            marketId,
-            lowerTick,
-            upperTick,
-            quantity
-        );
-        
-        emit PositionOpened(
-            positionId,
-            msg.sender,
-            marketId,
-            lowerTick,
-            upperTick,
-            quantity,
-            cost6
-        );
-    }
-    
-    /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function increasePosition(
-        uint256 positionId,
-        uint128 additionalQuantity,
-        uint256 maxCost
-    ) external override whenNotPaused nonReentrant returns (uint128 newQuantity) {
-        if (additionalQuantity == 0) {
-            revert CE.InvalidQuantity(additionalQuantity);
-        }
-        
-        // Get position data and validate market
-        ICLMSRPositionUpgradeable.Position memory position = positionContract.getPosition(positionId);
-        address trader = positionContract.ownerOf(positionId);
-        
-        // Verify caller owns the position
-        if (trader != msg.sender) {
-            revert CE.UnauthorizedCaller(msg.sender);
-        }
-        
-        _validateActiveMarket(position.marketId);
-        
-        // Calculate cost with round-up to prevent zero-cost attacks
-        uint256 costWad = _calculateTradeCostInternal(
-            position.marketId,
-            position.lowerTick,
-            position.upperTick,
-            uint256(additionalQuantity).toWad()
-        );
-        uint256 cost6 = costWad.fromWadRoundUp();
-        
-        if (cost6 > maxCost) {
-            revert CE.CostExceedsMaximum(cost6, maxCost);
-        }
-        
-        // Transfer payment from caller
-        _pullUSDC(msg.sender, cost6);
-        
-        // Update market state
-        uint256 deltaWad = uint256(additionalQuantity).toWad();
-        _applyFactorChunked(position.marketId, position.lowerTick, position.upperTick, deltaWad, markets[position.marketId].liquidityParameter, true);
-        
-        // Update position quantity
-        newQuantity = position.quantity + additionalQuantity;
-        positionContract.updateQuantity(positionId, newQuantity);
-        
-        emit PositionIncreased(positionId, msg.sender, additionalQuantity, newQuantity, cost6);
-    }
-    
-    /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function decreasePosition(
-        uint256 positionId,
-        uint128 sellQuantity,
-        uint256 minProceeds
-    ) external override whenNotPaused nonReentrant returns (uint128 newQuantity, uint256 proceeds) {
-        if (sellQuantity == 0) {
-            revert CE.InvalidQuantity(sellQuantity);
-        }
-        
-        // Get position data and validate market
-        ICLMSRPositionUpgradeable.Position memory position = positionContract.getPosition(positionId);
-        address trader = positionContract.ownerOf(positionId);
-        
-        // Verify caller owns the position
-        if (trader != msg.sender) {
-            revert CE.UnauthorizedCaller(msg.sender);
-        }
-        
-        _validateActiveMarket(position.marketId);
-        
-        if (sellQuantity > position.quantity) {
-            revert CE.InvalidQuantity(sellQuantity);
-        }
-        
-        // Calculate proceeds with round-up for fair treatment
-        uint256 proceedsWad = _calculateSellProceeds(
-            position.marketId,
-            position.lowerTick,
-            position.upperTick,
-            uint256(sellQuantity).toWad()
-        );
-        proceeds = proceedsWad.fromWadRoundUp();
-        
-        if (proceeds < minProceeds) {
-            revert CE.CostExceedsMaximum(minProceeds, proceeds); // Reusing error for slippage
-        }
-        
-        // Update market state
-        uint256 sellDeltaWad = uint256(sellQuantity).toWad();
-        _applyFactorChunked(position.marketId, position.lowerTick, position.upperTick, sellDeltaWad, markets[position.marketId].liquidityParameter, false);
-        
-        // Transfer proceeds to caller
-        _pushUSDC(msg.sender, proceeds);
-        
-        // Update position quantity
-        newQuantity = position.quantity - sellQuantity;
-        if (newQuantity == 0) {
-            // Burn position if quantity becomes zero
-            positionContract.burn(positionId);
-        } else {
-            positionContract.updateQuantity(positionId, newQuantity);
-        }
-        
-        emit PositionDecreased(positionId, msg.sender, sellQuantity, newQuantity, proceeds);
-    }
-
-
-    
-    /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function claimPayout(
-        uint256 positionId
-    ) external override whenNotPaused nonReentrant returns (uint256 payout) {
-        // Get position data
-        ICLMSRPositionUpgradeable.Position memory position = positionContract.getPosition(positionId);
-        address trader = positionContract.ownerOf(positionId);
-        
-        // Verify caller owns the position
-        if (trader != msg.sender) {
-            revert CE.UnauthorizedCaller(msg.sender);
-        }
-        
-        Market memory market = markets[position.marketId];
-        if (!market.settled) {
-            revert CE.MarketNotSettled(position.marketId);
-        }
-        
-        // Calculate payout
-        payout = _calculateClaimAmount(positionId);
-        
-        // Transfer payout to caller
-        _pushUSDC(msg.sender, payout);
-        
-        // Burn position NFT (position is claimed)
-        positionContract.burn(positionId);
-        
-        emit PositionClaimed(positionId, msg.sender, payout);
-    }
-
-    // ========================================
-    // CALCULATION FUNCTIONS
-    // ========================================
-    
-    /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function calculateOpenCost(
-        uint256 marketId,
-        int256 lowerTick,
-        int256 upperTick,
-        uint128 quantity
-    ) external view override marketExists(marketId) returns (uint256 cost) {
-        if (quantity == 0) {
-            revert CE.InvalidQuantity(quantity);
-        }
-        
-        Market memory market = markets[marketId];
-        _validateTick(lowerTick, market);
-        _validateTick(upperTick, market);
-        
-        if (lowerTick > upperTick) {
-            revert CE.InvalidTickRange(lowerTick, upperTick);
-        }
-        
-        // 🚨 NO POINT BETTING: Reject same tick betting
-        if (lowerTick == upperTick) {
-            revert CE.InvalidTickRange(lowerTick, upperTick);
-        }
-        
-        // ✅ RANGE BETTING: Allow any valid range (single or multiple intervals)
-        // Must be aligned to tick spacing
-        if ((upperTick - lowerTick) % market.tickSpacing != 0) {
-            revert CE.InvalidTickRange(lowerTick, upperTick);
-        }
-        
-        // Convert quantity to WAD for internal calculation
-        uint256 quantityWad = uint256(quantity).toWad();
-        uint256 costWad = _calculateTradeCostInternal(marketId, lowerTick, upperTick, quantityWad);
-        // Convert cost back to 6-decimal for external interface with round-up
-        return costWad.fromWadRoundUp();
-    }
-    
-    /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function calculateIncreaseCost(
-        uint256 positionId,
-        uint128 additionalQuantity
-    ) external view override returns (uint256 cost) {
-        ICLMSRPositionUpgradeable.Position memory position = positionContract.getPosition(positionId);
-        uint256 quantityWad = uint256(additionalQuantity).toWad();
-        uint256 costWad = _calculateTradeCostInternal(
-            position.marketId,
-            position.lowerTick,
-            position.upperTick,
-            quantityWad
-        );
-        return costWad.fromWadRoundUp();
-    }
-    
-    /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function calculateDecreaseProceeds(
-        uint256 positionId,
-        uint128 sellQuantity
-    ) external view override returns (uint256 proceeds) {
-        ICLMSRPositionUpgradeable.Position memory position = positionContract.getPosition(positionId);
-        uint256 quantityWad = uint256(sellQuantity).toWad();
-        uint256 proceedsWad = _calculateSellProceeds(
-            position.marketId,
-            position.lowerTick,
-            position.upperTick,
-            quantityWad
-        );
-        return proceedsWad.fromWadRoundUp();
-    }
-    
-        /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function calculateCloseProceeds(
-        uint256 positionId
-    ) external view override returns (uint256 proceeds) {
-        ICLMSRPositionUpgradeable.Position memory position = positionContract.getPosition(positionId);
-        uint256 quantityWad = uint256(position.quantity).toWad();
-        uint256 proceedsWad = _calculateSellProceeds(
-            position.marketId,
-            position.lowerTick,
-            position.upperTick,
-            quantityWad
-        );
-        return proceedsWad.fromWadRoundUp();
-    }
-    
-    /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function calculateClaimAmount(
-        uint256 positionId
-    ) external view override returns (uint256 amount) {
-        return _calculateClaimAmount(positionId);
-    }
-
-    // ========================================
-    // INTERNAL CALCULATION FUNCTIONS
-    // ========================================
-
-    /// @dev Calculate exp(q/α) safely by chunking to avoid overflow
-    /// @param q Quantity in WAD format
-    /// @param alpha Liquidity parameter in WAD format
-    /// @return res Result of exp(q/α) in WAD format
-    function _safeExp(uint256 q, uint256 alpha) internal pure returns (uint256 res) {
-        uint256 maxPerChunk = alpha.wMul(MAX_EXP_INPUT_WAD); // α * 0.13
-        res = FixedPointMathU.WAD; // 1.0
-        
-        while (q > 0) {
-            uint256 chunk = q > maxPerChunk ? maxPerChunk : q;
-            uint256 factor = (chunk.wDiv(alpha)).wExp(); // Safe: chunk/α ≤ 0.13
-            res = res.wMul(factor);
-            q -= chunk;
-        }
-    }
-    
-    /// @notice Calculate cost of a trade using CLMSR formula with chunk-split logic
-    /// @dev CLMSR formula: C = α * ln(Σ_after / Σ_before) where each tick has exp(q_i/α)
-    function _calculateTradeCostInternal(
-        uint256 marketId,
-        int256 lowerTick,
-        int256 upperTick,
-        uint256 quantity
-    ) internal view returns (uint256 cost) {
-        Market memory market = markets[marketId];
-        
-        // Convert range to bins
-        (uint32 lowerBin, uint32 upperBin) = _rangeToBins(lowerTick, upperTick, market);
-        
-        uint256 totalQuantity = quantity;
-        uint256 alpha = market.liquidityParameter;
-        uint256 maxSafeQuantityPerChunk = alpha.wMul(MAX_EXP_INPUT_WAD) - 1; // -1 wei to prevent rounding errors
-        
-        if (totalQuantity <= maxSafeQuantityPerChunk) {
-            // Safe to calculate in single operation
-            return _calculateSingleTradeCost(marketId, lowerTick, upperTick, totalQuantity, alpha);
-        } else {
-            // Split into chunks with proper cumulative calculation
-            uint256 sumBefore = LazyMulSegmentTree.getTotalSum(marketTrees[marketId]);
-            uint256 affectedSum = LazyMulSegmentTree.getRangeSum(marketTrees[marketId], lowerBin, upperBin);
-            
-            // Ensure tree is properly initialized
-            if (sumBefore == 0) revert CE.TreeNotInitialized();
-            
-            // Calculate required number of chunks and prevent gas DoS
-            uint256 requiredChunks = (totalQuantity + maxSafeQuantityPerChunk - 1) / maxSafeQuantityPerChunk;
-            
-            if (requiredChunks > MAX_CHUNKS_PER_TX) {
-                revert CE.InvalidQuantity(uint128(totalQuantity)); // Quantity too large for single transaction
-            }
-            
-            // Chunk-split with cumulative state tracking
-            uint256 totalCost = 0;
-            uint256 remainingQuantity = totalQuantity;
-            uint256 currentSumBefore = sumBefore;
-            uint256 currentAffectedSum = affectedSum;
-            uint256 chunkCount = 0;
-            
-            while (remainingQuantity > 0 && chunkCount < MAX_CHUNKS_PER_TX) {
-                uint256 chunkQuantity = remainingQuantity > maxSafeQuantityPerChunk 
-                    ? maxSafeQuantityPerChunk 
-                    : remainingQuantity;
-                
-                // Calculate factor for this chunk
-                uint256 quantityScaled = chunkQuantity.wDiv(alpha);
-                uint256 factor = quantityScaled.wExp();
-                
-                // ✨ Adaptive overflow guard: check if multiplication would overflow
-                if (currentAffectedSum > type(uint256).max / factor) {
-                    // Reduce chunk size to prevent overflow
-                    chunkQuantity = _computeSafeChunk(
-                        currentAffectedSum, 
-                        alpha, 
-                        remainingQuantity, 
-                        MAX_CHUNKS_PER_TX - chunkCount
-                    );
-                    
-                    // Ensure chunk makes meaningful progress
-                    if (chunkQuantity > remainingQuantity) {
-                        chunkQuantity = remainingQuantity;
-                    }
-                    
-                    quantityScaled = chunkQuantity.wDiv(alpha);
-                    factor = quantityScaled.wExp();
-                }
-                
-                // Calculate new sums after this chunk with overflow protection
-                uint256 newAffectedSum;
-                
-                // Additional safety check: verify multiplication won't overflow in wMul
-                if (currentAffectedSum > 0 && factor > type(uint256).max / currentAffectedSum) {
-                    // This should not happen due to our adaptive chunking, but add extra safety
-                    revert CE.TreeNotInitialized(); // Reusing existing error
-                }
-                
-                newAffectedSum = currentAffectedSum.wMul(factor);
-                uint256 sumAfter = currentSumBefore - currentAffectedSum + newAffectedSum;
-                
-                // Calculate cost for this chunk: α * ln(sumAfter / sumBefore)
-                if (sumAfter <= currentSumBefore) revert CE.TreeNotInitialized(); // Reusing existing error
-                uint256 ratio = sumAfter.wDiv(currentSumBefore);
-                uint256 chunkCost = alpha.wMul(ratio.wLn());
-                totalCost += chunkCost;
-                
-                // Ensure we make progress to prevent infinite loops
-                if (chunkQuantity == 0) {
-                    revert CE.TreeNotInitialized(); // Reusing existing error
-                }
-                
-                // Update state for next chunk
-                currentSumBefore = sumAfter;
-                currentAffectedSum = newAffectedSum;
-                remainingQuantity -= chunkQuantity;
-                chunkCount++;
-            }
-            
-            // Additional safety check
-            if (remainingQuantity != 0) revert CE.TreeNotInitialized(); // Reusing existing error
-            
-            return totalCost;
-        }
-    }
-    
-    /// @notice Calculate cost for a single chunk (small quantity)
-    function _calculateSingleTradeCost(
-        uint256 marketId,
-        int256 lowerTick,
-        int256 upperTick,
-        uint256 quantity,
-        uint256 alpha
-    ) internal view returns (uint256 cost) {
-        // Get current sum before trade using cached total sum
-        uint256 sumBefore = LazyMulSegmentTree.getTotalSum(marketTrees[marketId]);
-        
-        // Calculate multiplicative factor: exp(quantity / α)
-        uint256 quantityScaled = quantity.wDiv(alpha);
-        uint256 factor = quantityScaled.wExp();
-        
-        // Calculate sum after trade - convert range to bins
-        Market memory market = markets[marketId];
-        (uint32 lowerBin, uint32 upperBin) = _rangeToBins(lowerTick, upperTick, market);
-        uint256 affectedSum = LazyMulSegmentTree.getRangeSum(marketTrees[marketId], lowerBin, upperBin);
-        
-        // Ensure tree is properly initialized
-        if (sumBefore == 0) revert CE.TreeNotInitialized();
-        
-        // ✨ Check for overflow before multiplication - fallback to chunked mode if needed
-        if (affectedSum > type(uint256).max / factor) {
-            // Fallback to chunked calculation to handle large affected sums
-            return _calculateTradeCostInternal(marketId, lowerTick, upperTick, quantity);
-        }
-        
-        uint256 sumAfter = sumBefore - affectedSum + affectedSum.wMul(factor);
-        // Regular trade: C = α * ln(Σ_after / Σ_before)
-        if (sumAfter <= sumBefore) {
-            return 0; // No cost if sum doesn't increase
-        }
-        
-        uint256 ratio = sumAfter.wDiv(sumBefore);
-        uint256 lnRatio = ratio.wLn();
-        cost = alpha.wMul(lnRatio);
-    }
-    
-    /// @notice Calculate proceeds from selling quantity
-    /// @dev CLMSR formula with exp(-quantity/α) factor applied to affected ticks
-    /// @notice Calculate sell proceeds with safe chunk splitting for large quantities
-    function _calculateSellProceeds(
-        uint256 marketId,
-        int256 lowerTick,
-        int256 upperTick,
-        uint256 quantity
-    ) internal view returns (uint256 proceeds) {
-        Market memory market = markets[marketId];
-        
-        // Convert range to bins
-        (uint32 lowerBin, uint32 upperBin) = _rangeToBins(lowerTick, upperTick, market);
-        
-        uint256 totalQuantity = quantity;
-        uint256 alpha = market.liquidityParameter;
-        uint256 maxSafeQuantityPerChunk = alpha.wMul(MAX_EXP_INPUT_WAD) - 1; // -1 wei to prevent rounding errors
-        
-        if (totalQuantity <= maxSafeQuantityPerChunk) {
-            // Safe to calculate in single operation
-            return _calculateSingleSellProceeds(marketId, lowerTick, upperTick, totalQuantity, alpha);
-        } else {
-            // Split into chunks with proper cumulative calculation
-            uint256 sumBefore = LazyMulSegmentTree.getTotalSum(marketTrees[marketId]);
-            uint256 affectedSum = LazyMulSegmentTree.getRangeSum(marketTrees[marketId], lowerBin, upperBin);
-            
-            // Ensure tree is properly initialized
-            if (sumBefore == 0) revert CE.TreeNotInitialized();
-            
-            // Calculate required number of chunks and prevent gas DoS
-            uint256 requiredChunks = (totalQuantity + maxSafeQuantityPerChunk - 1) / maxSafeQuantityPerChunk;
-            
-            if (requiredChunks > MAX_CHUNKS_PER_TX) {
-                revert CE.InvalidQuantity(uint128(totalQuantity)); // Quantity too large for single transaction
-            }
-            
-            // Chunk-split with cumulative state tracking
-            uint256 totalProceeds = 0;
-            uint256 remainingQuantity = totalQuantity;
-            uint256 currentSumBefore = sumBefore;
-            uint256 currentAffectedSum = affectedSum;
-            uint256 chunkCount = 0;
-            
-            while (remainingQuantity > 0 && chunkCount < MAX_CHUNKS_PER_TX) {
-                uint256 chunkQuantity = remainingQuantity > maxSafeQuantityPerChunk 
-                    ? maxSafeQuantityPerChunk 
-                    : remainingQuantity;
-                
-                // Calculate inverse factor for this chunk: 1 / exp(quantity/α)
-                uint256 quantityScaled = chunkQuantity.wDiv(alpha);
-                uint256 factor = quantityScaled.wExp();
-                uint256 inverseFactor = FixedPointMathU.WAD.wDiv(factor);
-                
-                // ✨ Adaptive overflow guard: check if multiplication would overflow
-                if (currentAffectedSum > type(uint256).max / inverseFactor) {
-                    // Reduce chunk size to prevent overflow
-                    chunkQuantity = _computeSafeChunk(
-                        currentAffectedSum, 
-                        alpha, 
-                        remainingQuantity, 
-                        MAX_CHUNKS_PER_TX - chunkCount
-                    );
-                    
-                    // Ensure chunk makes meaningful progress
-                    if (chunkQuantity > remainingQuantity) {
-                        chunkQuantity = remainingQuantity;
-                    }
-                    
-                    quantityScaled = chunkQuantity.wDiv(alpha);
-                    factor = quantityScaled.wExp();
-                    inverseFactor = FixedPointMathU.WAD.wDiv(factor);
-                }
-                
-                // Calculate new sums after this chunk with overflow protection
-                uint256 newAffectedSum;
-                
-                // Additional safety check: verify multiplication won't overflow in wMul
-                if (currentAffectedSum > 0 && inverseFactor > type(uint256).max / currentAffectedSum) {
-                    // This should not happen due to our adaptive chunking, but add extra safety
-                    revert CE.TreeNotInitialized(); // Reusing existing error
-                }
-                
-                newAffectedSum = currentAffectedSum.wMul(inverseFactor);
-                uint256 sumAfter = currentSumBefore - currentAffectedSum + newAffectedSum;
-                
-                // Safety check: ensure sumAfter > 0 to prevent division by zero
-                if (sumAfter == 0) revert CE.TreeNotInitialized(); // Reusing existing error
-                
-                // Calculate proceeds for this chunk: α * ln(sumBefore / sumAfter)
-                if (currentSumBefore > sumAfter) {
-                    uint256 ratio = currentSumBefore.wDiv(sumAfter);
-                    uint256 chunkProceeds = alpha.wMul(ratio.wLn());
-                    totalProceeds += chunkProceeds;
-                }
-                
-                // Ensure we make progress to prevent infinite loops
-                if (chunkQuantity == 0) {
-                    revert CE.TreeNotInitialized(); // Reusing existing error
-                }
-                
-                // Update state for next chunk
-                currentSumBefore = sumAfter;
-                currentAffectedSum = newAffectedSum;
-                remainingQuantity -= chunkQuantity;
-                chunkCount++;
-            }
-            
-            // Additional safety check
-            if (remainingQuantity != 0) revert CE.TreeNotInitialized(); // Reusing existing error
-            
-            return totalProceeds;
-        }
-    }
-    
-    /// @notice Debug event for sell proceeds calculation
-    event DebugSellProceeds(uint256 step, uint256 value1, uint256 value2, string message);
-
-    /// @notice Calculate proceeds for a single chunk (small quantity)
-    function _calculateSingleSellProceeds(
-        uint256 marketId,
-        int256 lowerTick,
-        int256 upperTick,
-        uint256 quantity,
-        uint256 alpha
-    ) internal view returns (uint256 proceeds) {
-        // Get current sum before sell using cached total sum
-        uint256 sumBefore = LazyMulSegmentTree.getTotalSum(marketTrees[marketId]);
-        
-        // Calculate multiplicative factor: exp(-quantity / α) = 1 / exp(quantity / α)
-        uint256 quantityScaled = quantity.wDiv(alpha);
-        uint256 factor = quantityScaled.wExp();
-        uint256 inverseFactor = FixedPointMathU.WAD.wDiv(factor);
-        
-        // Calculate sum after sell - convert range to indices
-        Market memory market = markets[marketId];
-        (uint32 lowerBin, uint32 upperBin) = _rangeToBins(lowerTick, upperTick, market);
-        uint256 affectedSum = LazyMulSegmentTree.getRangeSum(marketTrees[marketId], lowerBin, upperBin);
-        
-        // ✨ Check for overflow before multiplication - fallback to chunked mode if needed
-        if (affectedSum > type(uint256).max / inverseFactor) {
-            // Fallback to chunked calculation to handle large affected sums
-            return _calculateSellProceeds(marketId, lowerTick, upperTick, quantity);
-        }
-        
-        uint256 sumAfter = sumBefore - affectedSum + affectedSum.wMul(inverseFactor);
-        
-        // Safety check: ensure sumAfter > 0 to prevent division by zero
-        if (sumAfter == 0) revert CE.TreeNotInitialized(); // Reusing existing error
-        
-        // CLMSR proceeds formula: α * ln(sumBefore / sumAfter)
-        if (sumBefore <= sumAfter) {
-            return 0; // No proceeds if sum doesn't decrease
-        }
-        
-        uint256 ratio = sumBefore.wDiv(sumAfter);
-        uint256 lnRatio = ratio.wLn();
-        proceeds = alpha.wMul(lnRatio);
-    }
-    
-    /// @notice Compute safe chunk size to prevent overflow in multiplication
-    /// @param currentSum Current affected sum that will be multiplied
-    /// @param alpha Liquidity parameter
-    /// @param remainingQty Remaining quantity to process
-    /// @param chunksLeft Number of chunks remaining (MAX_CHUNKS_PER_TX - chunkCount)
-    /// @return safeChunk Safe chunk quantity that won't cause overflow
-    function _computeSafeChunk(
-        uint256 currentSum, 
-        uint256 alpha, 
-        uint256 remainingQty, 
-        uint256 chunksLeft
-    ) internal pure returns (uint256 safeChunk) {
-        // If no chunks left, return remaining quantity
-        if (chunksLeft == 0) return remainingQty;
-        
-        // Calculate minimum progress needed to complete within remaining chunks
-        uint256 minProgress = (remainingQty + chunksLeft - 1) / chunksLeft; // Ceiling division
-        if (minProgress == 0) minProgress = 1; // Ensure at least 1 wei progress
-        
-        // Calculate maximum safe quantity based on exponential limits
-        uint256 maxSafeQuantity = alpha.wMul(MAX_EXP_INPUT_WAD);
-        
-        // If currentSum is large, be more conservative to prevent overflow
-        if (currentSum > alpha.wMul(50e18)) { // 50x alpha threshold (50e18 = 50 * WAD)
-            maxSafeQuantity = alpha / 10; // Very conservative
-        }
-        
-        // Choose the minimum to ensure both progress and safety
-        safeChunk = minProgress < maxSafeQuantity ? minProgress : maxSafeQuantity;
-        
-        // Final safety check - ensure we don't exceed remaining quantity
-        if (safeChunk > remainingQty) {
-            safeChunk = remainingQty;
-        }
-    }
-
-    /// @notice Calculate claimable amount from settled position
-    function _calculateClaimAmount(uint256 positionId) internal view returns (uint256 amount) {
-        ICLMSRPositionUpgradeable.Position memory position = positionContract.getPosition(positionId);
-        Market memory market = markets[position.marketId];
-        
-        if (!market.settled) {
-            return 0;
-        }
-        
-        // Check if settlement tick is within position range [lowerTick, upperTick)
-        bool hasWinning = (position.lowerTick <= market.settlementTick && 
-                          position.upperTick > market.settlementTick);
-        
-        if (hasWinning) {
-            // Position wins - return quantity as payout
-            amount = uint256(position.quantity);
-        } else {
-            // Position loses - no payout
-            amount = 0;
-        }
-    }
-    
-    /// @notice Update market state for a trade (buy)
-    /// @dev Use mulRange to apply exp(quantity/α) factor, with chunk-split for large factors
-
-    
-    /// @notice Apply factor with chunk-split to handle large exponential values
-    /// @dev Splits large quantity into safe chunks to avoid factor limits and gas DoS
-    /// @param marketId Market identifier
-    /// @param lowerTick Lower tick bound
-    /// @param upperTick Upper tick bound
-    /// @param quantity Total quantity to apply
-    /// @param alpha Liquidity parameter
-    /// @param isBuy True for buy (positive exp), false for sell (negative exp)
-    function _applyFactorChunked(
-        uint256 marketId,
-        int256 lowerTick,
-        int256 upperTick,
-        uint256 quantity,
-        uint256 alpha,
-        bool isBuy
-    ) internal {
-        // Get market data and convert range to bins
-        Market memory market = markets[marketId];
-        (uint32 lowerBin, uint32 upperBin) = _rangeToBins(lowerTick, upperTick, market);
-        
-        // Use fixed safe chunk size to avoid overflow in chunk calculations
-        // This ensures that quantity/alpha ratios stay within safe bounds
-        // for exponential calculations in PRB-Math
-        uint256 maxSafeQuantityPerChunk = alpha.wMul(MAX_EXP_INPUT_WAD) - 1; // -1 wei to prevent rounding errors
-        
-        if (quantity <= maxSafeQuantityPerChunk) {
-            // Safe to apply in single operation
-            uint256 quantityScaled = quantity.wDiv(alpha);
-            uint256 factor = quantityScaled.wExp();
-            
-            if (!isBuy) {
-                // For sell, use inverse factor
-                factor = FixedPointMathU.WAD.wDiv(factor);
-            }
-            
-            // Verify factor is within safe bounds
-            if (factor < LazyMulSegmentTree.MIN_FACTOR || factor > LazyMulSegmentTree.MAX_FACTOR) revert CE.FactorOutOfBounds();
-            
-            LazyMulSegmentTree.applyRangeFactor(marketTrees[marketId], lowerBin, upperBin, factor);
-            // Use original tick values for event
-            emit RangeFactorApplied(marketId, lowerTick, upperTick, factor);
-        } else {
-            // Calculate required number of chunks and prevent gas DoS
-            uint256 requiredChunks = (quantity + maxSafeQuantityPerChunk - 1) / maxSafeQuantityPerChunk;
-            
-            if (requiredChunks > MAX_CHUNKS_PER_TX) {
-                revert CE.InvalidQuantity(uint128(quantity)); // Quantity too large for single transaction
-            }
-            
-            // Split into chunks with gas-efficient batch processing
-            uint256 remainingQuantity = quantity;
-            uint256 chunkCount = 0;
-            
-            while (remainingQuantity > 0 && chunkCount < MAX_CHUNKS_PER_TX) {
-                uint256 chunkQuantity = remainingQuantity > maxSafeQuantityPerChunk 
-                    ? maxSafeQuantityPerChunk 
-                    : remainingQuantity;
-                
-                uint256 quantityScaled = chunkQuantity.wDiv(alpha);
-                uint256 factor = quantityScaled.wExp();
-                
-                if (!isBuy) {
-                    // For sell, use inverse factor
-                    factor = FixedPointMathU.WAD.wDiv(factor);
-                }
-                
-                // Verify factor is within safe bounds for each chunk
-                if (factor < LazyMulSegmentTree.MIN_FACTOR || factor > LazyMulSegmentTree.MAX_FACTOR) revert CE.FactorOutOfBounds();
-                
-                LazyMulSegmentTree.applyRangeFactor(marketTrees[marketId], lowerBin, upperBin, factor);
-                // Use original tick values for event
-                emit RangeFactorApplied(marketId, lowerTick, upperTick, factor);
-                
-                remainingQuantity -= chunkQuantity;
-                chunkCount++;
-            }
-            
-            // Additional safety check
-            if (remainingQuantity != 0) revert CE.IncompleteChunkProcessing();
-        }
-    }
-
-    /// @notice Internal function to validate market is active and timing is correct
-    function _validateActiveMarket(uint256 marketId) internal {
-        Market storage market = markets[marketId];
-        if (!market.isActive) {
-            revert CE.MarketNotActive();
-        }
-        
-        // Validate market timing
-        if (block.timestamp < market.startTimestamp) {
-            revert CE.MarketNotStarted();
-        }
-        
-        if (block.timestamp > market.endTimestamp) {
-            // Deactivate expired market
-            market.isActive = false;
-            revert CE.MarketExpired();
-        }
-    }
-    
-    /// @inheritdoc ICLMSRMarketCoreUpgradeable
-    function closePosition(
-        uint256 positionId,
-        uint256 minProceeds
-    ) external override whenNotPaused nonReentrant returns (uint256 proceeds) {
-        // Get position data and validate market
-        ICLMSRPositionUpgradeable.Position memory position = positionContract.getPosition(positionId);
-        address trader = positionContract.ownerOf(positionId);
-        
-        // Verify caller owns the position
-        if (trader != msg.sender) {
-            revert CE.UnauthorizedCaller(msg.sender);
-        }
-        
-        _validateActiveMarket(position.marketId);
-        
-        // Calculate proceeds from closing entire position with round-up for fair treatment
-        uint256 positionQuantityWad = FixedPointMathU.toWad(uint256(position.quantity));
-        uint256 proceedsWad = _calculateSellProceeds(
-            position.marketId,
-            position.lowerTick,
-            position.upperTick,
-            positionQuantityWad
-        );
-        proceeds = FixedPointMathU.fromWadRoundUp(proceedsWad);
-        
-        if (proceeds < minProceeds) {
-            revert CE.CostExceedsMaximum(minProceeds, proceeds); // Reusing error for slippage
-        }
-        
-        // Update market state (selling entire position)
-        _applyFactorChunked(position.marketId, position.lowerTick, position.upperTick, positionQuantityWad, markets[position.marketId].liquidityParameter, false);
-        
-        // Transfer proceeds to caller
-        _pushUSDC(msg.sender, proceeds);
-        
-        // Burn position NFT
-        positionContract.burn(positionId);
-        
-        emit PositionClosed(positionId, msg.sender, proceeds);
-    }
-} 
\ No newline at end of file
diff --git a/contracts/core/CLMSRPosition.sol b/contracts/core/CLMSRPosition.sol
index 2cd9c6d..9d9d143 100644
--- a/contracts/core/CLMSRPosition.sol
+++ b/contracts/core/CLMSRPosition.sol
@@ -2,15 +2,24 @@
 pragma solidity ^0.8.24;
 
 import "../interfaces/ICLMSRPosition.sol";
-import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
+import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
+import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
+import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
+import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
 import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";
 import "@openzeppelin/contracts/utils/Base64.sol";
 import "@openzeppelin/contracts/utils/Strings.sol";
 
 /// @title CLMSRPosition
-/// @notice Production-grade ERC721 implementation for CLMSR position management
-/// @dev Gas-optimized position tokens with immutable core authorization
-contract CLMSRPosition is ICLMSRPosition, ERC721 {
+/// @notice ERC721 implementation for CLMSR position management
+/// @dev 가스 최적화된 포지션 토큰과 코어 인증
+contract CLMSRPosition is 
+    Initializable,
+    ICLMSRPosition, 
+    ERC721Upgradeable,
+    OwnableUpgradeable,
+    UUPSUpgradeable
+{
     using EnumerableSet for EnumerableSet.UintSet;
     using Strings for uint256;
 
@@ -18,20 +27,23 @@ contract CLMSRPosition is ICLMSRPosition, ERC721 {
     // STORAGE LAYOUT (Gas Optimized)
     // ========================================
     
-    /// @notice Immutable core contract address for authorization
-    address public immutable core;
+    /// @notice Core contract address for authorization
+    address public core;
     
     /// @notice Next position ID to mint (starts at 1)
-    uint256 private _nextId = 1;
+    uint256 private _nextId;
     
     /// @notice Current total supply (excluding burned tokens)
     uint256 private _totalSupply;
     
     /// @notice Position data mapping
-    mapping(uint256 => Position) private _positions;
+    mapping(uint256 => ICLMSRPosition.Position) private _positions;
     
     /// @notice Owner to position IDs mapping (gas-optimized with EnumerableSet)
     mapping(address => EnumerableSet.UintSet) private _ownedTokens;
+    
+    /// @dev Gap for future storage variables
+    uint256[50] private __gap;
 
     // ========================================
     // MODIFIERS
@@ -44,14 +56,30 @@ contract CLMSRPosition is ICLMSRPosition, ERC721 {
     }
 
     // ========================================
-    // CONSTRUCTOR
+    // INITIALIZER
     // ========================================
     
-    /// @notice Initialize position contract with core authorization
-    /// @param _core Core contract address (immutable)
-    constructor(address _core) ERC721("CLMSR Position", "CLMSR-POS") {
-        if (_core == address(0)) revert ZeroAddress();
+    /// @notice Initialize the upgradeable position contract
+    /// @param _core Core contract address
+    function initialize(address _core) external initializer {
+        // Allow ZeroAddress temporarily for deployment, will be updated later
+        
+        __ERC721_init("CLMSR Position", "CLMSR-POS");
+        __Ownable_init(msg.sender);
+        __UUPSUpgradeable_init();
+        
         core = _core;
+        _nextId = 1;
+    }
+    
+    /// @notice Authorize upgrade (only owner)
+    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}
+    
+    /// @notice Update core contract address (only owner)
+    /// @param _newCore New core contract address
+    function updateCore(address _newCore) external onlyOwner {
+        if (_newCore == address(0)) revert ZeroAddress();
+        core = _newCore;
     }
 
     // ========================================
@@ -61,10 +89,10 @@ contract CLMSRPosition is ICLMSRPosition, ERC721 {
     /// @notice Override tokenURI to provide dynamic metadata
     /// @param tokenId Position token ID
     /// @return URI string with base64-encoded JSON metadata
-    function tokenURI(uint256 tokenId) public view override(ERC721, ICLMSRPosition) returns (string memory) {
+    function tokenURI(uint256 tokenId) public view override(ERC721Upgradeable) returns (string memory) {
         if (!_exists(tokenId)) revert PositionNotFound(tokenId);
         
-        Position memory position = _positions[tokenId];
+        ICLMSRPosition.Position memory position = _positions[tokenId];
         
         // Generate dynamic JSON metadata
         string memory json = string(abi.encodePacked(
@@ -90,9 +118,9 @@ contract CLMSRPosition is ICLMSRPosition, ERC721 {
     /// @param tokenId Token ID being transferred
     /// @param auth Authorized address
     /// @return Previous owner
-    function _update(address to, uint256 tokenId, address auth) 
+        function _update(address to, uint256 tokenId, address auth) 
         internal 
-        override(ERC721) 
+        override(ERC721Upgradeable) 
         returns (address) 
     {
         address from = _ownerOf(tokenId);
@@ -129,7 +157,7 @@ contract CLMSRPosition is ICLMSRPosition, ERC721 {
         positionId = _nextId++;
         
         // Store position data with gas-optimized packing
-        _positions[positionId] = Position({
+        _positions[positionId] = ICLMSRPosition.Position({
             marketId: marketId,
             lowerTick: lowerTick,
             upperTick: upperTick,
@@ -147,7 +175,7 @@ contract CLMSRPosition is ICLMSRPosition, ERC721 {
     }
 
     /// @inheritdoc ICLMSRPosition
-    function setPositionQuantity(uint256 positionId, uint128 newQuantity) external onlyCore {
+    function updateQuantity(uint256 positionId, uint128 newQuantity) external onlyCore {
         if (!_exists(positionId)) revert PositionNotFound(positionId);
         if (newQuantity == 0) revert InvalidQuantity(newQuantity);
         
@@ -158,7 +186,7 @@ contract CLMSRPosition is ICLMSRPosition, ERC721 {
     }
 
     /// @inheritdoc ICLMSRPosition
-    function burnPosition(uint256 positionId) external onlyCore {
+    function burn(uint256 positionId) external onlyCore {
         if (!_exists(positionId)) revert PositionNotFound(positionId);
         
         address owner = ownerOf(positionId);
@@ -175,18 +203,20 @@ contract CLMSRPosition is ICLMSRPosition, ERC721 {
         emit PositionBurned(positionId, owner);
     }
 
+
+
     // ========================================
     // POSITION QUERIES
     // ========================================
     
     /// @inheritdoc ICLMSRPosition
-    function getPosition(uint256 positionId) external view returns (Position memory data) {
+    function getPosition(uint256 positionId) external view returns (ICLMSRPosition.Position memory data) {
         if (!_exists(positionId)) revert PositionNotFound(positionId);
         return _positions[positionId];
     }
 
     /// @inheritdoc ICLMSRPosition
-    function getPositionsByOwner(address owner) external view returns (uint256[] memory positionIds) {
+    function getOwnerPositions(address owner) external view returns (uint256[] memory positionIds) {
         return _ownedTokens[owner].values();
     }
 
@@ -269,27 +299,16 @@ contract CLMSRPosition is ICLMSRPosition, ERC721 {
     function supportsInterface(bytes4 interfaceId) 
         public 
         view 
-        override(ERC721, IERC165) 
+        override(ERC721Upgradeable, IERC165) 
         returns (bool) 
     {
         return interfaceId == type(ICLMSRPosition).interfaceId || 
                super.supportsInterface(interfaceId);
     }
 
-    // ========================================
-    // METADATA & URI FUNCTIONS
-    // ========================================
-    
 
 
-    /// @inheritdoc ICLMSRPosition
-    function contractURI() external pure returns (string memory) {
-        string memory json = '{"name": "CLMSR Positions", "description": "Position tokens for CLMSR prediction markets"}';
-        return string(abi.encodePacked(
-            "data:application/json;base64,",
-            Base64.encode(bytes(json))
-        ));
-    }
+
 
     // ========================================
     // INTERNAL HELPERS
@@ -346,7 +365,7 @@ contract CLMSRPosition is ICLMSRPosition, ERC721 {
     /// @notice Get total number of positions owned by address
     /// @param owner Address to query
     /// @return count Number of positions owned
-    function balanceOf(address owner) public view override(ERC721, IERC721) returns (uint256 count) {
+    function balanceOf(address owner) public view override(ERC721Upgradeable, IERC721) returns (uint256 count) {
         if (owner == address(0)) revert ERC721InvalidOwner(address(0));
         return _ownedTokens[owner].length();
     }
@@ -354,7 +373,7 @@ contract CLMSRPosition is ICLMSRPosition, ERC721 {
     /// @notice Find the owner of a token
     /// @param tokenId The identifier for a token
     /// @return The address of the owner of the token
-    function ownerOf(uint256 tokenId) public view override(ERC721, IERC721) returns (address) {
+    function ownerOf(uint256 tokenId) public view override(ERC721Upgradeable, IERC721) returns (address) {
         return super.ownerOf(tokenId);
     }
 
@@ -369,4 +388,7 @@ contract CLMSRPosition is ICLMSRPosition, ERC721 {
     function getCoreContract() external view returns (address) {
         return core;
     }
+
+
+
 } 
\ No newline at end of file
diff --git a/contracts/core/CLMSRPositionUpgradeable.sol b/contracts/core/CLMSRPositionUpgradeable.sol
deleted file mode 100644
index a82a1ba..0000000
--- a/contracts/core/CLMSRPositionUpgradeable.sol
+++ /dev/null
@@ -1,392 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.24;
-
-import "../interfaces/ICLMSRPositionUpgradeable.sol";
-import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
-import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
-import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
-import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
-import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";
-import "@openzeppelin/contracts/utils/Base64.sol";
-import "@openzeppelin/contracts/utils/Strings.sol";
-
-/// @title CLMSRPositionUpgradeable
-/// @notice Upgradeable ERC721 implementation for CLMSR position management
-/// @dev Gas-optimized position tokens with upgradeable core authorization
-contract CLMSRPositionUpgradeable is 
-    Initializable,
-    ICLMSRPositionUpgradeable, 
-    ERC721Upgradeable,
-    OwnableUpgradeable,
-    UUPSUpgradeable
-{
-    using EnumerableSet for EnumerableSet.UintSet;
-    using Strings for uint256;
-
-    // ========================================
-    // STORAGE LAYOUT (Gas Optimized)
-    // ========================================
-    
-    /// @notice Core contract address for authorization
-    address public core;
-    
-    /// @notice Next position ID to mint (starts at 1)
-    uint256 private _nextId;
-    
-    /// @notice Current total supply (excluding burned tokens)
-    uint256 private _totalSupply;
-    
-    /// @notice Position data mapping
-    mapping(uint256 => ICLMSRPositionUpgradeable.Position) private _positions;
-    
-    /// @notice Owner to position IDs mapping (gas-optimized with EnumerableSet)
-    mapping(address => EnumerableSet.UintSet) private _ownedTokens;
-    
-    /// @dev Gap for future storage variables
-    uint256[50] private __gap;
-
-    // ========================================
-    // MODIFIERS
-    // ========================================
-    
-    /// @notice Restricts access to core contract only
-    modifier onlyCore() {
-        if (msg.sender != core) revert UnauthorizedCaller(msg.sender);
-        _;
-    }
-
-    // ========================================
-    // INITIALIZER
-    // ========================================
-    
-    /// @notice Initialize the upgradeable position contract
-    /// @param _core Core contract address
-    function initialize(address _core) external initializer {
-        // Allow ZeroAddress temporarily for deployment, will be updated later
-        
-        __ERC721_init("CLMSR Position", "CLMSR-POS");
-        __Ownable_init(msg.sender);
-        __UUPSUpgradeable_init();
-        
-        core = _core;
-        _nextId = 1;
-    }
-    
-    /// @notice Authorize upgrade (only owner)
-    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}
-    
-    /// @notice Update core contract address (only owner)
-    /// @param _newCore New core contract address
-    function updateCore(address _newCore) external onlyOwner {
-        if (_newCore == address(0)) revert ZeroAddress();
-        core = _newCore;
-    }
-
-    // ========================================
-    // ERC721 OVERRIDES
-    // ========================================
-    
-    /// @notice Override tokenURI to provide dynamic metadata
-    /// @param tokenId Position token ID
-    /// @return URI string with base64-encoded JSON metadata
-    function tokenURI(uint256 tokenId) public view override(ERC721Upgradeable) returns (string memory) {
-        if (!_exists(tokenId)) revert PositionNotFound(tokenId);
-        
-        ICLMSRPositionUpgradeable.Position memory position = _positions[tokenId];
-        
-        // Generate dynamic JSON metadata
-        string memory json = string(abi.encodePacked(
-            '{"name":"CLMSR Position #', tokenId.toString(), '",',
-            '"description":"CLMSR Range Position",',
-            '"attributes":[',
-                '{"trait_type":"Market ID","value":', position.marketId.toString(), '},',
-                '{"trait_type":"Lower Tick","value":', uint256(position.lowerTick).toString(), '},',
-                '{"trait_type":"Upper Tick","value":', uint256(position.upperTick).toString(), '},',
-                '{"trait_type":"Quantity","value":', uint256(position.quantity).toString(), '},',
-                '{"trait_type":"Created At","value":', uint256(position.createdAt).toString(), '}',
-            ']}'
-        ));
-        
-        return string(abi.encodePacked(
-            "data:application/json;base64,",
-            Base64.encode(bytes(json))
-        ));
-    }
-
-    /// @notice Override _update to maintain owner token tracking
-    /// @param to Recipient address
-    /// @param tokenId Token ID being transferred
-    /// @param auth Authorized address
-    /// @return Previous owner
-        function _update(address to, uint256 tokenId, address auth) 
-        internal 
-        override(ERC721Upgradeable) 
-        returns (address) 
-    {
-        address from = _ownerOf(tokenId);
-        
-        // Call parent implementation
-        address previousOwner = super._update(to, tokenId, auth);
-        
-        // Update owner token tracking
-        if (from != address(0)) {
-            _ownedTokens[from].remove(tokenId);
-        }
-        if (to != address(0)) {
-            _ownedTokens[to].add(tokenId);
-        }
-        
-        return previousOwner;
-    }
-
-    // ========================================
-    // POSITION MANAGEMENT (Core Only)
-    // ========================================
-    
-    /// @inheritdoc ICLMSRPositionUpgradeable
-    function mintPosition(
-        address to,
-        uint256 marketId,
-        int256 lowerTick,
-        int256 upperTick,
-        uint128 quantity
-    ) external onlyCore returns (uint256 positionId) {
-        if (to == address(0)) revert ZeroAddress();
-        if (quantity == 0) revert InvalidQuantity(quantity);
-        
-        positionId = _nextId++;
-        
-        // Store position data with gas-optimized packing
-        _positions[positionId] = ICLMSRPositionUpgradeable.Position({
-            marketId: marketId,
-            lowerTick: lowerTick,
-            upperTick: upperTick,
-            quantity: quantity,
-            createdAt: uint64(block.timestamp)
-        });
-        
-        // Mint NFT (this will trigger _update and add to _ownedTokens)
-        _safeMint(to, positionId);
-        
-        // Increment total supply (only if not already handled by ERC721)
-        _totalSupply++;
-        
-        emit PositionMinted(positionId, to, marketId, lowerTick, upperTick, quantity);
-    }
-
-    /// @inheritdoc ICLMSRPositionUpgradeable
-    function updateQuantity(uint256 positionId, uint128 newQuantity) external onlyCore {
-        if (!_exists(positionId)) revert PositionNotFound(positionId);
-        if (newQuantity == 0) revert InvalidQuantity(newQuantity);
-        
-        uint128 oldQuantity = _positions[positionId].quantity;
-        _positions[positionId].quantity = newQuantity;
-        
-        emit PositionUpdated(positionId, oldQuantity, newQuantity);
-    }
-
-    /// @inheritdoc ICLMSRPositionUpgradeable
-    function burn(uint256 positionId) external onlyCore {
-        if (!_exists(positionId)) revert PositionNotFound(positionId);
-        
-        address owner = ownerOf(positionId);
-        
-        // Burn NFT (this will trigger _update and remove from _ownedTokens)
-        _burn(positionId);
-        
-        // Decrement total supply
-        _totalSupply--;
-        
-        // Clean up position data
-        delete _positions[positionId];
-        
-        emit PositionBurned(positionId, owner);
-    }
-
-
-
-    // ========================================
-    // POSITION QUERIES
-    // ========================================
-    
-    /// @inheritdoc ICLMSRPositionUpgradeable
-    function getPosition(uint256 positionId) external view returns (ICLMSRPositionUpgradeable.Position memory data) {
-        if (!_exists(positionId)) revert PositionNotFound(positionId);
-        return _positions[positionId];
-    }
-
-    /// @inheritdoc ICLMSRPositionUpgradeable
-    function getOwnerPositions(address owner) external view returns (uint256[] memory positionIds) {
-        return _ownedTokens[owner].values();
-    }
-
-    /// @inheritdoc ICLMSRPositionUpgradeable
-    function getUserPositionsInMarket(address owner, uint256 marketId) 
-        external 
-        view 
-        returns (uint256[] memory positionIds) 
-    {
-        uint256[] memory allTokens = _ownedTokens[owner].values();
-        uint256[] memory temp = new uint256[](allTokens.length);
-        uint256 count = 0;
-        
-        unchecked {
-            for (uint256 i = 0; i < allTokens.length; ++i) {
-                uint256 tokenId = allTokens[i];
-                if (_positions[tokenId].marketId == marketId) {
-                    temp[count] = tokenId;
-                    ++count;
-                }
-            }
-        }
-        
-        // Create result array with exact size
-        positionIds = new uint256[](count);
-        unchecked {
-            for (uint256 i = 0; i < count; ++i) {
-                positionIds[i] = temp[i];
-            }
-        }
-    }
-
-    /// @inheritdoc ICLMSRPositionUpgradeable
-    function getMarketPositions(uint256 marketId) 
-        external 
-        view 
-        returns (uint256[] memory positionIds) 
-    {
-        // Count positions for this market
-        uint256 count = 0;
-        uint256 totalPositions = _nextId - 1;
-        
-        // First pass: count matching positions
-        unchecked {
-            for (uint256 i = 1; i <= totalPositions; ++i) {
-                if (_exists(i) && _positions[i].marketId == marketId) {
-                    ++count;
-                }
-            }
-        }
-        
-        // Second pass: collect matching positions
-        positionIds = new uint256[](count);
-        uint256 index = 0;
-        unchecked {
-            for (uint256 i = 1; i <= totalPositions; ++i) {
-                if (_exists(i) && _positions[i].marketId == marketId) {
-                    positionIds[index] = i;
-                    ++index;
-                }
-            }
-        }
-    }
-
-    /// @inheritdoc ICLMSRPositionUpgradeable
-    function exists(uint256 positionId) external view returns (bool) {
-        return _exists(positionId);
-    }
-
-    /// @notice Check if caller is authorized (core contract)
-    function isAuthorizedCaller(address caller) external view returns (bool) {
-        return caller == core;
-    }
-
-    // ========================================
-    // ERC165 SUPPORT
-    // ========================================
-    
-    /// @notice ERC165 interface support
-    function supportsInterface(bytes4 interfaceId) 
-        public 
-        view 
-        override(ERC721Upgradeable, IERC165) 
-        returns (bool) 
-    {
-        return interfaceId == type(ICLMSRPositionUpgradeable).interfaceId || 
-               super.supportsInterface(interfaceId);
-    }
-
-
-
-
-
-    // ========================================
-    // INTERNAL HELPERS
-    // ========================================
-    
-    /// @notice Convert int256 to string
-    function _int256ToString(int256 value) internal pure returns (string memory) {
-        if (value == 0) {
-            return "0";
-        }
-        
-        bool negative = value < 0;
-        uint256 temp = negative ? uint256(-value) : uint256(value);
-        
-        bytes memory buffer = new bytes(78); // max length for int256
-        uint256 digits;
-        
-        while (temp != 0) {
-            digits++;
-            buffer[78 - digits] = bytes1(uint8(48 + temp % 10));
-            temp /= 10;
-        }
-        
-        if (negative) {
-            digits++;
-            buffer[78 - digits] = "-";
-        }
-        
-        bytes memory result = new bytes(digits);
-        for (uint256 i = 0; i < digits; i++) {
-            result[i] = buffer[78 - digits + i];
-        }
-        
-        return string(result);
-    }
-
-    /// @notice Check if token exists
-    /// @param tokenId Token ID to check
-    /// @return True if token exists
-    function _exists(uint256 tokenId) internal view returns (bool) {
-        return _ownerOf(tokenId) != address(0);
-    }
-
-    // ========================================
-    // VIEW FUNCTIONS FOR ANALYTICS
-    // ========================================
-    
-    /// @notice Get total supply of position tokens
-    /// @return Total number of existing positions (excluding burned)
-    function totalSupply() external view returns (uint256) {
-        return _totalSupply;
-    }
-    
-    /// @notice Get total number of positions owned by address
-    /// @param owner Address to query
-    /// @return count Number of positions owned
-    function balanceOf(address owner) public view override(ERC721Upgradeable, IERC721) returns (uint256 count) {
-        if (owner == address(0)) revert ERC721InvalidOwner(address(0));
-        return _ownedTokens[owner].length();
-    }
-
-    /// @notice Find the owner of a token
-    /// @param tokenId The identifier for a token
-    /// @return The address of the owner of the token
-    function ownerOf(uint256 tokenId) public view override(ERC721Upgradeable, IERC721) returns (address) {
-        return super.ownerOf(tokenId);
-    }
-
-    /// @notice Get next position ID that will be minted
-    /// @return Next position ID
-    function getNextId() external view returns (uint256) {
-        return _nextId;
-    }
-
-    /// @notice Get core contract address
-    /// @return Core contract address
-    function getCoreContract() external view returns (address) {
-        return core;
-    }
-
-} 
\ No newline at end of file
diff --git a/contracts/interfaces/ICLMSRMarketCore.sol b/contracts/interfaces/ICLMSRMarketCore.sol
index e704ffe..c456be0 100644
--- a/contracts/interfaces/ICLMSRMarketCore.sol
+++ b/contracts/interfaces/ICLMSRMarketCore.sol
@@ -2,8 +2,8 @@
 pragma solidity ^0.8.24;
 
 /// @title ICLMSRMarketCore
-/// @notice Core interface for CLMSR Daily-Market System
-/// @dev Immutable contract handling core trading logic and market state
+/// @notice Upgradeable core interface for CLMSR Daily-Market System
+/// @dev UUPS upgradeable contract handling core trading logic and market state
 interface ICLMSRMarketCore {
     // ========================================
     // STRUCTS
@@ -15,16 +15,22 @@ interface ICLMSRMarketCore {
         bool settled;                   // Market is settled
         uint64 startTimestamp;          // Market start time
         uint64 endTimestamp;            // Market end time
-        int256 settlementTick;          // Winning tick value (only if settled)
+        int256 settlementTick;          // Winning tick value (only if settled) - floored from settlementValue
         int256 minTick;                 // Minimum allowed tick value
         int256 maxTick;                 // Maximum allowed tick value
         int256 tickSpacing;             // Spacing between valid ticks
         uint32 numBins;                 // Number of bins in market (calculated)
         uint256 liquidityParameter;    // Alpha parameter (1e18 scale)
+        
+        // Position events emission state
+        uint32 positionEventsCursor;    // Next emission start index
+        bool positionEventsEmitted;     // All events emitted flag
+        
+        // ⚠️ UPGRADE SAFE: New fields must be added at the end
+        int256 settlementValue;         // Original settlement value with 6 decimals (only if settled)
     }
     
 
-
     // ========================================
     // EVENTS
     // ========================================
@@ -45,6 +51,11 @@ interface ICLMSRMarketCore {
         int256 settlementTick
     );
 
+    event MarketSettlementValueSubmitted(
+        uint256 indexed marketId,
+        int256 settlementValue
+    );
+
     event PositionSettled(
         uint256 indexed positionId,
         address indexed trader,
@@ -52,6 +63,13 @@ interface ICLMSRMarketCore {
         bool isWin
     );
 
+    event PositionEventsProgress(
+        uint256 indexed marketId,
+        uint256 from,
+        uint256 to,
+        bool done
+    );
+
     event PositionOpened(
         uint256 indexed positionId,
         address indexed trader,
@@ -99,6 +117,12 @@ interface ICLMSRMarketCore {
         address indexed by
     );
 
+    event MarketTimingUpdated(
+        uint256 indexed marketId,
+        uint64 newStartTimestamp,
+        uint64 newEndTimestamp
+    );
+
     /// @notice Emitted when range multiplication factor is applied
     /// @param marketId Market identifier
     /// @param lo Left boundary (inclusive)
@@ -115,7 +139,7 @@ interface ICLMSRMarketCore {
     // MARKET MANAGEMENT FUNCTIONS
     // ========================================
     
-    /// @notice Create a new market (only callable by Manager)
+    /// @notice Create a new market (only callable by Owner)
     /// @dev Stores market data and initializes all tick values to WAD (1e18)
     /// @param marketId Market identifier
     /// @param minTick Minimum allowed tick value
@@ -134,11 +158,28 @@ interface ICLMSRMarketCore {
         uint256 liquidityParameter
     ) external returns (uint256 marketId);
     
-    /// @notice Settle a market (only callable by Manager)
-    /// @dev Sets exact winning tick value and enables position claiming
+    /// @notice Settle a market (only callable by Owner)
+    /// @dev Sets exact winning settlement value (6 decimals) and calculates corresponding tick value
+    /// @param marketId Market identifier
+    /// @param settlementValue Exact winning settlement value with 6 decimals
+    function settleMarket(uint256 marketId, int256 settlementValue) external;
+
+    /// @notice Emit position settled events in batches (only callable by Owner)
+    /// @dev Emits PositionSettled events for positions using cursor-based pagination
+    /// @param marketId Market identifier
+    /// @param limit Maximum number of positions to process in this batch
+    function emitPositionSettledBatch(uint256 marketId, uint256 limit) external;
+
+    /// @notice Update market timing (only callable by Owner)
+    /// @dev Changes market start and end timestamps for a specific market
     /// @param marketId Market identifier
-    /// @param settlementTick Exact winning tick value
-    function settleMarket(uint256 marketId, int256 settlementTick) external;
+    /// @param newStartTimestamp New market start time
+    /// @param newEndTimestamp New market end time
+    function updateMarketTiming(
+        uint256 marketId,
+        uint64 newStartTimestamp,
+        uint64 newEndTimestamp
+    ) external;
 
     // ========================================
     // EXECUTION FUNCTIONS
@@ -246,6 +287,19 @@ interface ICLMSRMarketCore {
     function calculateClaimAmount(
         uint256 positionId
     ) external view returns (uint256 amount);
+    
+    /// @notice Calculate quantity that can be bought with given cost (inverse function)
+    /// @param marketId Market identifier
+    /// @param lowerTick Lower tick bound
+    /// @param upperTick Upper tick bound
+    /// @param cost Target cost to spend (6 decimals)
+    /// @return quantity Purchasable quantity
+    function calculateQuantityFromCost(
+        uint256 marketId,
+        int256 lowerTick,
+        int256 upperTick,
+        uint256 cost
+    ) external view returns (uint128 quantity);
 
     // ========================================
     // STATE QUERY FUNCTIONS
@@ -270,9 +324,6 @@ interface ICLMSRMarketCore {
     /// @return Payment token address
     function getPaymentToken() external view returns (address);
     
-    
-
-    
     // ========================================
     // SEGMENT TREE FUNCTIONS
     // ========================================
@@ -287,7 +338,7 @@ interface ICLMSRMarketCore {
         external view returns (uint256 sum);
     
     /// @notice Propagate lazy values and return range sum (state-changing function)
-    /// @dev For Keeper/Manager - actually pushes lazy values down the tree
+    /// @dev For Keeper/Owner - actually pushes lazy values down the tree
     /// @param marketId Market identifier
     /// @param lo Left boundary (inclusive, actual tick value)
     /// @param hi Right boundary (inclusive, actual tick value)
@@ -296,7 +347,7 @@ interface ICLMSRMarketCore {
         external returns (uint256 sum);
     
     /// @notice Apply multiplication factor to range (state-changing function)
-    /// @dev For Keeper/Manager - updates market state by applying factor
+    /// @dev For Keeper/Owner - updates market state by applying factor
     /// @param marketId Market identifier
     /// @param lo Left boundary (inclusive, actual tick value)
     /// @param hi Right boundary (inclusive, actual tick value)
@@ -318,4 +369,4 @@ interface ICLMSRMarketCore {
     /// @notice Check if contract is paused
     /// @return True if paused
     function isPaused() external view returns (bool);
-} 
\ No newline at end of file
+}
\ No newline at end of file
diff --git a/contracts/interfaces/ICLMSRMarketCoreUpgradeable.sol b/contracts/interfaces/ICLMSRMarketCoreUpgradeable.sol
deleted file mode 100644
index ce9462f..0000000
--- a/contracts/interfaces/ICLMSRMarketCoreUpgradeable.sol
+++ /dev/null
@@ -1,351 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.24;
-
-/// @title ICLMSRMarketCoreUpgradeable
-/// @notice Upgradeable core interface for CLMSR Daily-Market System
-/// @dev UUPS upgradeable contract handling core trading logic and market state
-interface ICLMSRMarketCoreUpgradeable {
-    // ========================================
-    // STRUCTS
-    // ========================================
-    
-    /// @notice Market information
-    struct Market {
-        bool isActive;                  // Market is active
-        bool settled;                   // Market is settled
-        uint64 startTimestamp;          // Market start time
-        uint64 endTimestamp;            // Market end time
-        int256 settlementTick;          // Winning tick value (only if settled)
-        int256 minTick;                 // Minimum allowed tick value
-        int256 maxTick;                 // Maximum allowed tick value
-        int256 tickSpacing;             // Spacing between valid ticks
-        uint32 numBins;                 // Number of bins in market (calculated)
-        uint256 liquidityParameter;    // Alpha parameter (1e18 scale)
-        
-        // Position events emission state
-        uint32 positionEventsCursor;    // Next emission start index
-        bool positionEventsEmitted;     // All events emitted flag
-    }
-    
-
-    // ========================================
-    // EVENTS
-    // ========================================
-    
-    event MarketCreated(
-        uint256 indexed marketId,
-        uint64 startTimestamp,
-        uint64 endTimestamp,
-        int256 minTick,
-        int256 maxTick,
-        int256 tickSpacing,
-        uint32 numBins,
-        uint256 liquidityParameter
-    );
-
-    event MarketSettled(
-        uint256 indexed marketId,
-        int256 settlementTick
-    );
-
-    event PositionSettled(
-        uint256 indexed positionId,
-        address indexed trader,
-        uint256 payout,
-        bool isWin
-    );
-
-    event PositionEventsProgress(
-        uint256 indexed marketId,
-        uint256 from,
-        uint256 to,
-        bool done
-    );
-
-    event PositionOpened(
-        uint256 indexed positionId,
-        address indexed trader,
-        uint256 indexed marketId,
-        int256 lowerTick,
-        int256 upperTick,
-        uint128 quantity,
-        uint256 cost
-    );
-
-    event PositionIncreased(
-        uint256 indexed positionId,
-        address indexed trader,
-        uint128 additionalQuantity,
-        uint128 newQuantity,
-        uint256 cost
-    );
-
-    event PositionDecreased(
-        uint256 indexed positionId,
-        address indexed trader,
-        uint128 sellQuantity,
-        uint128 newQuantity,
-        uint256 proceeds
-    );
-
-    event PositionClosed(
-        uint256 indexed positionId,
-        address indexed trader,
-        uint256 proceeds
-    );
-
-    event PositionClaimed(
-        uint256 indexed positionId,
-        address indexed trader,
-        uint256 payout
-    );
-
-    event EmergencyPaused(
-        address indexed by,
-        string reason
-    );
-
-    event EmergencyUnpaused(
-        address indexed by
-    );
-
-    event MarketTimingUpdated(
-        uint256 indexed marketId,
-        uint64 newStartTimestamp,
-        uint64 newEndTimestamp
-    );
-
-    /// @notice Emitted when range multiplication factor is applied
-    /// @param marketId Market identifier
-    /// @param lo Left boundary (inclusive)
-    /// @param hi Right boundary (inclusive)
-    /// @param factor Multiplication factor in WAD format
-    event RangeFactorApplied(
-        uint256 indexed marketId,
-        int256 indexed lo,
-        int256 indexed hi,
-        uint256 factor
-    );
-
-    // ========================================
-    // MARKET MANAGEMENT FUNCTIONS
-    // ========================================
-    
-    /// @notice Create a new market (only callable by Owner)
-    /// @dev Stores market data and initializes all tick values to WAD (1e18)
-    /// @param marketId Market identifier
-    /// @param minTick Minimum allowed tick value
-    /// @param maxTick Maximum allowed tick value
-    /// @param tickSpacing Spacing between valid ticks
-    /// @param startTimestamp Market start time
-    /// @param endTimestamp Market end time
-    /// @param liquidityParameter Alpha parameter (1e18 scale)
-    /// @return marketId Auto-generated market identifier
-    function createMarket(
-        int256 minTick,
-        int256 maxTick,
-        int256 tickSpacing,
-        uint64 startTimestamp,
-        uint64 endTimestamp,
-        uint256 liquidityParameter
-    ) external returns (uint256 marketId);
-    
-    /// @notice Settle a market (only callable by Owner)
-    /// @dev Sets exact winning tick value and enables position claiming
-    /// @param marketId Market identifier
-    /// @param settlementTick Exact winning tick value
-    function settleMarket(uint256 marketId, int256 settlementTick) external;
-
-    /// @notice Emit position settled events in batches (only callable by Owner)
-    /// @dev Emits PositionSettled events for positions using cursor-based pagination
-    /// @param marketId Market identifier
-    /// @param limit Maximum number of positions to process in this batch
-    function emitPositionSettledBatch(uint256 marketId, uint256 limit) external;
-
-    /// @notice Update market timing (only callable by Owner)
-    /// @dev Changes market start and end timestamps for a specific market
-    /// @param marketId Market identifier
-    /// @param newStartTimestamp New market start time
-    /// @param newEndTimestamp New market end time
-    function updateMarketTiming(
-        uint256 marketId,
-        uint64 newStartTimestamp,
-        uint64 newEndTimestamp
-    ) external;
-
-    // ========================================
-    // EXECUTION FUNCTIONS
-    // ========================================
-    
-    /// @notice Open a new position by buying a range
-    /// @param marketId Market identifier
-    /// @param lowerTick Lower tick bound (inclusive)
-    /// @param upperTick Upper tick bound (inclusive)
-    /// @param quantity Position quantity (always positive, Long-Only)
-    /// @param maxCost Maximum cost willing to pay
-    /// @return positionId Newly created position ID
-    function openPosition(
-        uint256 marketId,
-        int256 lowerTick,
-        int256 upperTick,
-        uint128 quantity,
-        uint256 maxCost
-    ) external returns (uint256 positionId);
-    
-    /// @notice Increase existing position quantity (buy more)
-    /// @param positionId Position to increase
-    /// @param additionalQuantity Additional quantity to buy
-    /// @param maxCost Maximum additional cost willing to pay
-    /// @return newQuantity New total quantity after increase
-    function increasePosition(
-        uint256 positionId,
-        uint128 additionalQuantity,
-        uint256 maxCost
-    ) external returns (uint128 newQuantity);
-    
-    /// @notice Decrease existing position quantity (sell some)
-    /// @param positionId Position to decrease
-    /// @param sellQuantity Quantity to sell (must be <= current quantity)
-    /// @param minProceeds Minimum proceeds willing to accept
-    /// @return newQuantity New total quantity after decrease
-    /// @return proceeds Actual proceeds received
-    function decreasePosition(
-        uint256 positionId,
-        uint128 sellQuantity,
-        uint256 minProceeds
-    ) external returns (uint128 newQuantity, uint256 proceeds);
-    
-    /// @notice Close entire position (sell all)
-    /// @param positionId Position to close
-    /// @param minProceeds Minimum proceeds willing to accept
-    /// @return proceeds Total proceeds from closing position
-    function closePosition(
-        uint256 positionId,
-        uint256 minProceeds
-    ) external returns (uint256 proceeds);
-    
-    /// @notice Claim position payout after market settlement
-    /// @param positionId Position to claim
-    /// @return payout Amount paid out to position holder
-    function claimPayout(
-        uint256 positionId
-    ) external returns (uint256 payout);
-
-    // ========================================
-    // CALCULATION FUNCTIONS
-    // ========================================
-    
-    /// @notice Calculate cost of opening a new position
-    /// @param marketId Market identifier
-    /// @param lowerTick Lower tick bound
-    /// @param upperTick Upper tick bound
-    /// @param quantity Position quantity
-    /// @return cost Estimated cost
-    function calculateOpenCost(
-        uint256 marketId,
-        int256 lowerTick,
-        int256 upperTick,
-        uint128 quantity
-    ) external view returns (uint256 cost);
-    
-    /// @notice Calculate cost of increasing existing position
-    /// @param positionId Position identifier  
-    /// @param additionalQuantity Additional quantity to buy
-    /// @return cost Estimated additional cost
-    function calculateIncreaseCost(
-        uint256 positionId,
-        uint128 additionalQuantity
-    ) external view returns (uint256 cost);
-    
-    /// @notice Calculate proceeds from decreasing position
-    /// @param positionId Position identifier
-    /// @param sellQuantity Quantity to sell
-    /// @return proceeds Estimated proceeds
-    function calculateDecreaseProceeds(
-        uint256 positionId,
-        uint128 sellQuantity
-    ) external view returns (uint256 proceeds);
-    
-    /// @notice Calculate proceeds from closing entire position
-    /// @param positionId Position identifier
-    /// @return proceeds Estimated proceeds
-    function calculateCloseProceeds(
-        uint256 positionId
-    ) external view returns (uint256 proceeds);
-    
-    /// @notice Calculate claimable amount from settled position
-    /// @param positionId Position identifier
-    /// @return amount Claimable amount
-    function calculateClaimAmount(
-        uint256 positionId
-    ) external view returns (uint256 amount);
-
-    // ========================================
-    // STATE QUERY FUNCTIONS
-    // ========================================
-    
-    /// @notice Get market information
-    /// @param marketId Market identifier
-    /// @return market Market data
-    function getMarket(uint256 marketId) external view returns (Market memory market);
-    
-    /// @notice Get tick value by actual tick value
-    /// @param marketId Market identifier
-    /// @param tick Actual tick value
-    /// @return value Tick value
-    function getTickValue(uint256 marketId, int256 tick) external view returns (uint256 value);
-    
-    /// @notice Get position contract address
-    /// @return Position contract address
-    function getPositionContract() external view returns (address);
-    
-    /// @notice Get payment token address
-    /// @return Payment token address
-    function getPaymentToken() external view returns (address);
-    
-    // ========================================
-    // SEGMENT TREE FUNCTIONS
-    // ========================================
-    
-    /// @notice Get range sum with on-the-fly lazy calculation (view function)
-    /// @dev For general users - returns latest values without state changes
-    /// @param marketId Market identifier
-    /// @param lo Left boundary (inclusive, actual tick value)
-    /// @param hi Right boundary (inclusive, actual tick value)
-    /// @return sum Sum of exponential values in range
-    function getRangeSum(uint256 marketId, int256 lo, int256 hi) 
-        external view returns (uint256 sum);
-    
-    /// @notice Propagate lazy values and return range sum (state-changing function)
-    /// @dev For Keeper/Owner - actually pushes lazy values down the tree
-    /// @param marketId Market identifier
-    /// @param lo Left boundary (inclusive, actual tick value)
-    /// @param hi Right boundary (inclusive, actual tick value)
-    /// @return sum Sum of exponential values in range
-    function propagateLazy(uint256 marketId, int256 lo, int256 hi) 
-        external returns (uint256 sum);
-    
-    /// @notice Apply multiplication factor to range (state-changing function)
-    /// @dev For Keeper/Owner - updates market state by applying factor
-    /// @param marketId Market identifier
-    /// @param lo Left boundary (inclusive, actual tick value)
-    /// @param hi Right boundary (inclusive, actual tick value)
-    /// @param factor Multiplication factor (WAD scale)
-    function applyRangeFactor(uint256 marketId, int256 lo, int256 hi, uint256 factor) 
-        external;
-
-    // ========================================
-    // EMERGENCY FUNCTIONS
-    // ========================================
-    
-    /// @notice Pause the contract
-    /// @param reason Reason for pausing
-    function pause(string calldata reason) external;
-    
-    /// @notice Unpause the contract
-    function unpause() external;
-    
-    /// @notice Check if contract is paused
-    /// @return True if paused
-    function isPaused() external view returns (bool);
-}
\ No newline at end of file
diff --git a/contracts/interfaces/ICLMSRPosition.sol b/contracts/interfaces/ICLMSRPosition.sol
index 69160de..fa1ec57 100644
--- a/contracts/interfaces/ICLMSRPosition.sol
+++ b/contracts/interfaces/ICLMSRPosition.sol
@@ -4,14 +4,15 @@ pragma solidity ^0.8.24;
 import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
 
 /// @title ICLMSRPosition
-/// @notice Interface for CLMSR position management
-/// @dev ERC721-based position tokens representing range positions (immutable contract)
+/// @notice Upgradeable interface for CLMSR position NFT management
+/// @dev ERC721 NFT contract for position tokens
 interface ICLMSRPosition is IERC721 {
+    
     // ========================================
     // STRUCTS
     // ========================================
     
-    /// @notice Position data structure
+    /// @notice Position data structure (same as legacy for compatibility)
     struct Position {
         uint256 marketId;               // Market identifier
         int256 lowerTick;               // Lower tick bound (inclusive)
@@ -19,89 +20,96 @@ interface ICLMSRPosition is IERC721 {
         uint128 quantity;               // Position quantity (always positive, Long-Only)
         uint64 createdAt;               // Creation timestamp
     }
-
+    
+    // ========================================
+    // ERRORS
+    // ========================================
+    
+    error UnauthorizedCaller(address caller);
+    error PositionNotFound(uint256 positionId);
+    error InvalidMarketId(uint256 marketId);
+    error InvalidTicks(int256 lowerTick, int256 upperTick);
+    error InvalidQuantity(uint128 quantity);
+    error PositionAlreadyClaimed(uint256 positionId);
+    error NotPositionOwner(address caller, address owner);
+    error ZeroAddress();
+    
     // ========================================
     // EVENTS
     // ========================================
     
     event PositionMinted(
         uint256 indexed positionId,
-        address indexed owner,
+        address indexed trader,
         uint256 indexed marketId,
         int256 lowerTick,
         int256 upperTick,
         uint128 quantity
     );
-
+    
+    event PositionBurned(
+        uint256 indexed positionId,
+        address indexed trader
+    );
+    
     event PositionUpdated(
         uint256 indexed positionId,
         uint128 oldQuantity,
         uint128 newQuantity
     );
-
-    event PositionBurned(
+    
+    event PositionClaimed(
         uint256 indexed positionId,
-        address indexed owner
+        address indexed trader
     );
-
-    // ========================================
-    // ERRORS
-    // ========================================
     
-    error PositionNotFound(uint256 positionId);
-    error UnauthorizedCaller(address caller);
-    error InvalidQuantity(uint128 quantity);
-    error ZeroAddress();
-
     // ========================================
-    // POSITION MANAGEMENT (Core contract only)
+    // CORE FUNCTIONS
     // ========================================
     
-    /// @notice Mint a new position token
-    /// @dev Only callable by authorized core contract
-    /// @param to Position owner
+    /// @notice Mint a new position NFT (only callable by Core contract)
+    /// @param trader Position owner
     /// @param marketId Market identifier
     /// @param lowerTick Lower tick bound
     /// @param upperTick Upper tick bound
     /// @param quantity Position quantity
     /// @return positionId Newly minted position ID
     function mintPosition(
-        address to,
+        address trader,
         uint256 marketId,
         int256 lowerTick,
         int256 upperTick,
         uint128 quantity
     ) external returns (uint256 positionId);
-
-    /// @notice Update position quantity to absolute value
-    /// @dev Only callable by authorized core contract
-    /// @param positionId Position to update
-    /// @param newQuantity New absolute quantity value
-    function setPositionQuantity(
-        uint256 positionId,
-        uint128 newQuantity
-    ) external;
-
-    /// @notice Burn a position token
-    /// @dev Only callable by authorized core contract
+    
+    /// @notice Burn a position NFT (only callable by Core contract)
     /// @param positionId Position to burn
-    function burnPosition(uint256 positionId) external;
-
+    function burn(uint256 positionId) external;
+    
+    /// @notice Set position quantity (only callable by Core contract)
+    /// @param positionId Position to update
+    /// @param newQuantity New quantity value
+    function updateQuantity(uint256 positionId, uint128 newQuantity) external;
+    
+    
     // ========================================
-    // POSITION QUERIES
+    // VIEW FUNCTIONS
     // ========================================
     
     /// @notice Get position data
     /// @param positionId Position identifier
-    /// @return data Position data structure
-    function getPosition(uint256 positionId) 
-        external view returns (Position memory data);
-
-    /// @notice Get all positions owned by an address
-    /// @param owner Address to query
-    /// @return positionIds Array of position IDs owned by the address
-    function getPositionsByOwner(address owner) 
-        external view returns (uint256[] memory positionIds);
+    /// @return position Position data
+    function getPosition(uint256 positionId) external view returns (Position memory position);
+    
+    /// @notice Get all position IDs for a specific market
+    /// @param marketId Market identifier
+    /// @return positionIds Array of position IDs
+    function getMarketPositions(uint256 marketId) external view returns (uint256[] memory positionIds);
+    
+    /// @notice Get all position IDs owned by an address
+    /// @param owner Position owner
+    /// @return positionIds Array of position IDs
+    function getOwnerPositions(address owner) external view returns (uint256[] memory positionIds);
 
     /// @notice Get positions for a specific market and owner
     /// @param owner Address to query
@@ -109,32 +117,21 @@ interface ICLMSRPosition is IERC721 {
     /// @return positionIds Array of position IDs for the market
     function getUserPositionsInMarket(address owner, uint256 marketId) 
         external view returns (uint256[] memory positionIds);
-
-    /// @notice Get all positions for a specific market (all owners)
-    /// @param marketId Market identifier
-    /// @return positionIds Array of all position IDs for the market
-    function getMarketPositions(uint256 marketId) 
-        external view returns (uint256[] memory positionIds);
-
-    /// @notice Get total number of positions
-    /// @return Total supply of position tokens
-    function totalSupply() external view returns (uint256);
-
+    
     /// @notice Check if a position exists
     /// @param positionId Position identifier
-    /// @return True if position exists
-    function exists(uint256 positionId) external view returns (bool);
-
-    // ========================================
-    // METADATA & URI FUNCTIONS
-    // ========================================
+    /// @return exists True if position exists
+    function exists(uint256 positionId) external view returns (bool exists);
     
-    /// @notice Get the token URI for a position
-    /// @param positionId Position identifier
-    /// @return URI string for the token metadata
-    function tokenURI(uint256 positionId) external view returns (string memory);
-
-    /// @notice Get the contract URI for marketplace metadata
-    /// @return URI string for contract metadata
-    function contractURI() external view returns (string memory);
-} 
\ No newline at end of file
+    /// @notice Get next position ID
+    /// @return nextId Next position ID to be minted
+    function getNextId() external view returns (uint256 nextId);
+    
+    /// @notice Get total supply of positions (excluding burned)
+    /// @return supply Total supply
+    function totalSupply() external view returns (uint256 supply);
+    
+    /// @notice Get core contract address
+    /// @return core Core contract address
+    function core() external view returns (address core);
+}
\ No newline at end of file
diff --git a/contracts/interfaces/ICLMSRPositionUpgradeable.sol b/contracts/interfaces/ICLMSRPositionUpgradeable.sol
deleted file mode 100644
index 2c36004..0000000
--- a/contracts/interfaces/ICLMSRPositionUpgradeable.sol
+++ /dev/null
@@ -1,137 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.24;
-
-import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
-
-/// @title ICLMSRPositionUpgradeable
-/// @notice Upgradeable interface for CLMSR position NFT management
-/// @dev ERC721 NFT contract for position tokens
-interface ICLMSRPositionUpgradeable is IERC721 {
-    
-    // ========================================
-    // STRUCTS
-    // ========================================
-    
-    /// @notice Position data structure (same as legacy for compatibility)
-    struct Position {
-        uint256 marketId;               // Market identifier
-        int256 lowerTick;               // Lower tick bound (inclusive)
-        int256 upperTick;               // Upper tick bound (inclusive)
-        uint128 quantity;               // Position quantity (always positive, Long-Only)
-        uint64 createdAt;               // Creation timestamp
-    }
-    
-    // ========================================
-    // ERRORS
-    // ========================================
-    
-    error UnauthorizedCaller(address caller);
-    error PositionNotFound(uint256 positionId);
-    error InvalidMarketId(uint256 marketId);
-    error InvalidTicks(int256 lowerTick, int256 upperTick);
-    error InvalidQuantity(uint128 quantity);
-    error PositionAlreadyClaimed(uint256 positionId);
-    error NotPositionOwner(address caller, address owner);
-    error ZeroAddress();
-    
-    // ========================================
-    // EVENTS
-    // ========================================
-    
-    event PositionMinted(
-        uint256 indexed positionId,
-        address indexed trader,
-        uint256 indexed marketId,
-        int256 lowerTick,
-        int256 upperTick,
-        uint128 quantity
-    );
-    
-    event PositionBurned(
-        uint256 indexed positionId,
-        address indexed trader
-    );
-    
-    event PositionUpdated(
-        uint256 indexed positionId,
-        uint128 oldQuantity,
-        uint128 newQuantity
-    );
-    
-    event PositionClaimed(
-        uint256 indexed positionId,
-        address indexed trader
-    );
-    
-    // ========================================
-    // CORE FUNCTIONS
-    // ========================================
-    
-    /// @notice Mint a new position NFT (only callable by Core contract)
-    /// @param trader Position owner
-    /// @param marketId Market identifier
-    /// @param lowerTick Lower tick bound
-    /// @param upperTick Upper tick bound
-    /// @param quantity Position quantity
-    /// @return positionId Newly minted position ID
-    function mintPosition(
-        address trader,
-        uint256 marketId,
-        int256 lowerTick,
-        int256 upperTick,
-        uint128 quantity
-    ) external returns (uint256 positionId);
-    
-    /// @notice Burn a position NFT (only callable by Core contract)
-    /// @param positionId Position to burn
-    function burn(uint256 positionId) external;
-    
-    /// @notice Set position quantity (only callable by Core contract)
-    /// @param positionId Position to update
-    /// @param newQuantity New quantity value
-    function updateQuantity(uint256 positionId, uint128 newQuantity) external;
-    
-    
-    // ========================================
-    // VIEW FUNCTIONS
-    // ========================================
-    
-    /// @notice Get position data
-    /// @param positionId Position identifier
-    /// @return position Position data
-    function getPosition(uint256 positionId) external view returns (Position memory position);
-    
-    /// @notice Get all position IDs for a specific market
-    /// @param marketId Market identifier
-    /// @return positionIds Array of position IDs
-    function getMarketPositions(uint256 marketId) external view returns (uint256[] memory positionIds);
-    
-    /// @notice Get all position IDs owned by an address
-    /// @param owner Position owner
-    /// @return positionIds Array of position IDs
-    function getOwnerPositions(address owner) external view returns (uint256[] memory positionIds);
-
-    /// @notice Get positions for a specific market and owner
-    /// @param owner Address to query
-    /// @param marketId Market identifier
-    /// @return positionIds Array of position IDs for the market
-    function getUserPositionsInMarket(address owner, uint256 marketId) 
-        external view returns (uint256[] memory positionIds);
-    
-    /// @notice Check if a position exists
-    /// @param positionId Position identifier
-    /// @return exists True if position exists
-    function exists(uint256 positionId) external view returns (bool exists);
-    
-    /// @notice Get next position ID
-    /// @return nextId Next position ID to be minted
-    function getNextId() external view returns (uint256 nextId);
-    
-    /// @notice Get total supply of positions (excluding burned)
-    /// @return supply Total supply
-    function totalSupply() external view returns (uint256 supply);
-    
-    /// @notice Get core contract address
-    /// @return core Core contract address
-    function core() external view returns (address core);
-}
\ No newline at end of file
diff --git a/contracts/libraries/LazyMulSegmentTree.sol b/contracts/libraries/LazyMulSegmentTree.sol
index 7534e66..911ce81 100644
--- a/contracts/libraries/LazyMulSegmentTree.sol
+++ b/contracts/libraries/LazyMulSegmentTree.sol
@@ -54,7 +54,7 @@ library LazyMulSegmentTree {
     uint256 public constant ONE_WAD = 1e18;
     uint256 public constant MIN_FACTOR = 0.01e18;  // 0.01% minimum - allow wide range for CLMSR
     uint256 public constant MAX_FACTOR = 100e18;   // 100x maximum - allow wide range for CLMSR
-    uint256 public constant FLUSH_THRESHOLD = 1e30; // 1,000,000,000,000 WAD - auto-flush when pendingFactor exceeds this
+    uint256 public constant FLUSH_THRESHOLD = 1e21; // 1,000,000,000,000 WAD - auto-flush when pendingFactor exceeds this
 
     // ========================================
     // HELPER FUNCTIONS
@@ -461,16 +461,16 @@ library LazyMulSegmentTree {
         if (r < lo || l > hi) return 0;
         
         Node storage node = tree.nodes[nodeIndex];
-        
-        // Apply current node's lazy to accumulated lazy
-        uint256 newAccFactor = accFactor.wMul(node.pendingFactor);
-        
+
         // Complete overlap
         if (l >= lo && r <= hi) {
             // node.sum already contains pendingFactor, so only apply ancestor accumulated factor
             return node.sum.wMul(accFactor);
         }
         
+        // Apply current node's lazy to accumulated lazy
+        uint256 newAccFactor = accFactor.wMul(node.pendingFactor);
+        
         // Partial overlap - recurse with accumulated lazy
         uint32 mid = l + (r - l) / 2;
         (uint32 leftChild, uint32 rightChild) = _unpackChildPtr(node.childPtr);
diff --git a/contracts/mocks/MockPosition.sol b/contracts/mocks/MockPosition.sol
deleted file mode 100644
index 7dd4b8a..0000000
--- a/contracts/mocks/MockPosition.sol
+++ /dev/null
@@ -1,337 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.24;
-
-import "../interfaces/ICLMSRPosition.sol";
-import "@openzeppelin/contracts/access/Ownable.sol";
-
-/// @title MockPosition
-/// @notice Mock implementation of ICLMSRPosition for testing
-contract MockPosition is ICLMSRPosition, Ownable {
-    // ========================================
-    // STORAGE
-    // ========================================
-    
-    uint256 private _nextId = 1;
-    address public coreContract;
-    
-    mapping(uint256 => Position) private _positions;
-    mapping(uint256 => address) private _owners;
-    mapping(address => uint256) private _balances;
-    mapping(uint256 => address) private _tokenApprovals;
-    mapping(address => mapping(address => bool)) private _operatorApprovals;
-    
-    // For tracking owner's tokens (simplified, no enumerable index tracking)
-    mapping(address => uint256[]) private _ownedTokens;
-
-    // ========================================
-    // MODIFIERS
-    // ========================================
-    
-    modifier onlyCore() {
-        if (msg.sender != coreContract) revert UnauthorizedCaller(msg.sender);
-        _;
-    }
-
-    // ========================================
-    // CONSTRUCTOR
-    // ========================================
-    
-    constructor() Ownable(msg.sender) {}
-
-    // ========================================
-    // ADMIN FUNCTIONS
-    // ========================================
-    
-    function setCore(address _coreContract) external onlyOwner {
-        if (_coreContract == address(0)) revert ZeroAddress();
-        coreContract = _coreContract;
-    }
-
-    // ========================================
-    // ERC721 STANDARD FUNCTIONS
-    // ========================================
-    
-    function name() external pure returns (string memory) {
-        return "Mock CLMSR Position";
-    }
-
-    function symbol() external pure returns (string memory) {
-        return "MOCK-POS";
-    }
-
-    function tokenURI(uint256 tokenId) external view returns (string memory) {
-        if (_owners[tokenId] == address(0)) revert PositionNotFound(tokenId);
-        return string(abi.encodePacked("https://mock.position/", _toString(tokenId)));
-    }
-    
-    function balanceOf(address owner) external view returns (uint256) {
-        if (owner == address(0)) revert ZeroAddress();
-        return _balances[owner];
-    }
-
-    function ownerOf(uint256 tokenId) external view returns (address) {
-        address owner = _owners[tokenId];
-        if (owner == address(0)) revert PositionNotFound(tokenId);
-        return owner;
-    }
-
-    function transferFrom(address from, address to, uint256 tokenId) external {
-        if (!_isApprovedOrOwner(msg.sender, tokenId)) revert UnauthorizedCaller(msg.sender);
-        _transfer(from, to, tokenId);
-    }
-
-    function safeTransferFrom(address from, address to, uint256 tokenId) external {
-        if (!_isApprovedOrOwner(msg.sender, tokenId)) revert UnauthorizedCaller(msg.sender);
-        _transfer(from, to, tokenId);
-    }
-
-    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata) external {
-        if (!_isApprovedOrOwner(msg.sender, tokenId)) revert UnauthorizedCaller(msg.sender);
-        _transfer(from, to, tokenId);
-    }
-
-    function approve(address to, uint256 tokenId) external {
-        address owner = _owners[tokenId];
-        if (owner == address(0)) revert PositionNotFound(tokenId);
-        if (msg.sender != owner && !_operatorApprovals[owner][msg.sender]) {
-            revert UnauthorizedCaller(msg.sender);
-        }
-        _tokenApprovals[tokenId] = to;
-    }
-
-    function setApprovalForAll(address operator, bool approved) external {
-        _operatorApprovals[msg.sender][operator] = approved;
-    }
-
-    function getApproved(uint256 tokenId) external view returns (address) {
-        if (_owners[tokenId] == address(0)) revert PositionNotFound(tokenId);
-        return _tokenApprovals[tokenId];
-    }
-
-    function isApprovedForAll(address owner, address operator) external view returns (bool) {
-        return _operatorApprovals[owner][operator];
-    }
-
-    // ========================================
-    // POSITION MANAGEMENT
-    // ========================================
-    
-    function mintPosition(
-        address to,
-        uint256 marketId,
-        int256 lowerTick,
-        int256 upperTick,
-        uint128 quantity
-    ) external onlyCore returns (uint256 positionId) {
-        if (to == address(0)) revert ZeroAddress();
-        if (quantity == 0) revert InvalidQuantity(quantity);
-        
-        positionId = _nextId++;
-        
-        _positions[positionId] = Position({
-            marketId: marketId,
-            lowerTick: lowerTick,
-            upperTick: upperTick,
-            quantity: quantity,
-            createdAt: uint64(block.timestamp)
-        });
-        
-        _mint(to, positionId);
-        
-        emit PositionMinted(positionId, to, marketId, lowerTick, upperTick, quantity);
-    }
-
-    function setPositionQuantity(uint256 positionId, uint128 newQuantity) external onlyCore {
-        if (_owners[positionId] == address(0)) revert PositionNotFound(positionId);
-        if (newQuantity == 0) revert InvalidQuantity(newQuantity);
-        
-        uint128 oldQuantity = _positions[positionId].quantity;
-        _positions[positionId].quantity = newQuantity;
-        
-        emit PositionUpdated(positionId, oldQuantity, newQuantity);
-    }
-
-    function burnPosition(uint256 positionId) external onlyCore {
-        address owner = _owners[positionId];
-        if (owner == address(0)) revert PositionNotFound(positionId);
-        
-        _burn(positionId);
-        delete _positions[positionId];
-        
-        emit PositionBurned(positionId, owner);
-    }
-
-    // ========================================
-    // POSITION QUERIES
-    // ========================================
-    
-    function getPosition(uint256 positionId) external view returns (Position memory data) {
-        if (_owners[positionId] == address(0)) revert PositionNotFound(positionId);
-        return _positions[positionId];
-    }
-
-    function getPositionsByOwner(address owner) external view returns (uint256[] memory positionIds) {
-        return _ownedTokens[owner];
-    }
-
-    function getUserPositionsInMarket(address owner, uint256 marketId) external view returns (uint256[] memory positionIds) {
-        uint256[] memory allTokens = _ownedTokens[owner];
-        uint256[] memory temp = new uint256[](allTokens.length);
-        uint256 count = 0;
-        
-        for (uint256 i = 0; i < allTokens.length; i++) {
-            uint256 tokenId = allTokens[i];
-            if (_positions[tokenId].marketId == marketId) {
-                temp[count] = tokenId;
-                count++;
-            }
-        }
-        
-        positionIds = new uint256[](count);
-        for (uint256 i = 0; i < count; i++) {
-            positionIds[i] = temp[i];
-        }
-    }
-
-    function getAllPositionsInMarket(uint256 marketId) external view returns (uint256[] memory positionIds) {
-        // Count positions for this market
-        uint256 count = 0;
-        uint256 totalPositions = _nextId - 1;
-        
-        // First pass: count matching positions
-        for (uint256 i = 1; i <= totalPositions; i++) {
-            if (_owners[i] != address(0) && _positions[i].marketId == marketId) {
-                count++;
-            }
-        }
-        
-        // Second pass: collect matching positions
-        positionIds = new uint256[](count);
-        uint256 index = 0;
-        for (uint256 i = 1; i <= totalPositions; i++) {
-            if (_owners[i] != address(0) && _positions[i].marketId == marketId) {
-                positionIds[index] = i;
-                index++;
-            }
-        }
-    }
-
-    function getMarketPositions(uint256 marketId) external view returns (uint256[] memory positionIds) {
-        uint256 count = 0;
-        uint256 totalPositions = _nextId - 1;
-        
-        // First pass: count matching positions
-        for (uint256 i = 1; i <= totalPositions; i++) {
-            if (_owners[i] != address(0) && _positions[i].marketId == marketId) {
-                count++;
-            }
-        }
-        
-        // Second pass: collect matching positions
-        positionIds = new uint256[](count);
-        uint256 index = 0;
-        for (uint256 i = 1; i <= totalPositions; i++) {
-            if (_owners[i] != address(0) && _positions[i].marketId == marketId) {
-                positionIds[index] = i;
-                index++;
-            }
-        }
-    }
-
-    function exists(uint256 positionId) external view returns (bool) {
-        return _owners[positionId] != address(0);
-    }
-
-
-
-    function contractURI() external pure returns (string memory) {
-        return "https://example.com/contract-metadata";
-    }
-
-    function isAuthorizedCaller(address caller) external view returns (bool) {
-        return caller == coreContract;
-    }
-
-    function totalSupply() external view returns (uint256) {
-        return _nextId - 1;
-    }
-
-
-
-    // ========================================
-    // ERC165 SUPPORT
-    // ========================================
-    
-    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {
-        return interfaceId == 0x01ffc9a7 || // ERC165
-               interfaceId == 0x80ac58cd;   // ERC721
-    }
-
-    // ========================================
-    // INTERNAL FUNCTIONS
-    // ========================================
-    
-    function _mint(address to, uint256 tokenId) internal {
-        _owners[tokenId] = to;
-        _balances[to]++;
-        
-        _ownedTokens[to].push(tokenId);
-    }
-
-    function _burn(uint256 tokenId) internal {
-        address owner = _owners[tokenId];
-        
-        delete _tokenApprovals[tokenId];
-        _balances[owner]--;
-        delete _owners[tokenId];
-        
-        _removeTokenFromOwner(owner, tokenId);
-    }
-
-    function _transfer(address from, address to, uint256 tokenId) internal {
-        if (_owners[tokenId] != from) revert UnauthorizedCaller(msg.sender);
-        if (to == address(0)) revert ZeroAddress();
-        
-        delete _tokenApprovals[tokenId];
-        _balances[from]--;
-        _balances[to]++;
-        _owners[tokenId] = to;
-        
-        _removeTokenFromOwner(from, tokenId);
-        _ownedTokens[to].push(tokenId);
-    }
-
-    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
-        address owner = _owners[tokenId];
-        if (owner == address(0)) return false;
-        return (spender == owner || _tokenApprovals[tokenId] == spender || _operatorApprovals[owner][spender]);
-    }
-
-    function _removeTokenFromOwner(address owner, uint256 tokenId) internal {
-        uint256[] storage tokens = _ownedTokens[owner];
-        for (uint256 i = 0; i < tokens.length; i++) {
-            if (tokens[i] == tokenId) {
-                tokens[i] = tokens[tokens.length - 1];
-                tokens.pop();
-                break;
-            }
-        }
-    }
-
-    function _toString(uint256 value) internal pure returns (string memory) {
-        if (value == 0) return "0";
-        uint256 temp = value;
-        uint256 digits;
-        while (temp != 0) {
-            digits++;
-            temp /= 10;
-        }
-        bytes memory buffer = new bytes(digits);
-        while (value != 0) {
-            digits -= 1;
-            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
-            value /= 10;
-        }
-        return string(buffer);
-    }
-} 
\ No newline at end of file
diff --git a/contracts/points/PointsGranterUpgradeable.sol b/contracts/points/PointsGranter.sol
similarity index 86%
rename from contracts/points/PointsGranterUpgradeable.sol
rename to contracts/points/PointsGranter.sol
index 50996d8..60cbeb2 100644
--- a/contracts/points/PointsGranterUpgradeable.sol
+++ b/contracts/points/PointsGranter.sol
@@ -6,10 +6,10 @@ import {UUPSUpgradeable} from "@openzeppelin/contracts-upgradeable/proxy/utils/U
 import {OwnableUpgradeable} from "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
 
 /**
- * @title PointsGranterUpgradeable
- * @notice UUPS 업그레이더블. 온체인 스토리지는 없고 이벤트만 발생시켜 인덱싱용으로 사용.
+ * @title PointsGranter
+ * @notice UUPS 패턴. 온체인 스토리지는 없고 이벤트만 발생시켜 인덱싱용으로 사용.
  */
-contract PointsGranterUpgradeable is Initializable, OwnableUpgradeable, UUPSUpgradeable {
+contract PointsGranter is Initializable, OwnableUpgradeable, UUPSUpgradeable {
     /// reason: 1=ACTIVITY, 2=PERFORMANCE, 3=RISK_BONUS, 100+=MANUAL
     /// contextTs: 0이면 인덱서에서 block.timestamp 사용
     event PointsGranted(address indexed user, uint256 amount, uint8 reason, uint64 contextTs);
@@ -21,6 +21,8 @@ contract PointsGranterUpgradeable is Initializable, OwnableUpgradeable, UUPSUpgr
 
     function _authorizeUpgrade(address) internal override onlyOwner {}
 
+
+
     function grantPoints(
         address user,
         uint256 amount, // 6 decimals
diff --git a/hardhat.config.ts b/hardhat.config.ts
index 0ad9f72..87f77c7 100644
--- a/hardhat.config.ts
+++ b/hardhat.config.ts
@@ -3,6 +3,7 @@ import "@nomicfoundation/hardhat-toolbox";
 import "@openzeppelin/hardhat-upgrades";
 import "hardhat-gas-reporter";
 import "hardhat-tracer";
+import "solidity-docgen";
 import dotenv from "dotenv";
 
 dotenv.config();
@@ -14,7 +15,10 @@ const config: HardhatUserConfig = {
       viaIR: true,
       optimizer: {
         enabled: true,
-        runs: 200,
+        runs: 50, // Lowered from 200 to reduce contract size for EIP-170 compliance
+      },
+      metadata: {
+        bytecodeHash: "none", // Remove metadata hash to save additional bytes
       },
     },
   },
@@ -114,6 +118,12 @@ const config: HardhatUserConfig = {
       },
     ],
   },
+  docgen: {
+    outputDir: "../website/docs/contracts",
+    pages: "items",
+    exclude: ["mocks/**", "test/**"],
+    templates: "default",
+  },
 };
 
 export default config;
diff --git a/package.json b/package.json
index c8c47fb..a22fa3e 100644
--- a/package.json
+++ b/package.json
@@ -10,8 +10,6 @@
     "compile": "hardhat compile",
     "test": "hardhat test",
     "deploy:localhost": "COMMAND=deploy:localhost npx hardhat run scripts/dispatcher.ts --network localhost",
-    "deploy:citrea:dev": "MANIFEST_DEFAULT_DIR=.openzeppelin/dev COMMAND=deploy:citrea:dev npx hardhat run scripts/dispatcher.ts --network citrea-dev",
-    "deploy:citrea:prod": "MANIFEST_DEFAULT_DIR=.openzeppelin/prod COMMAND=deploy:citrea:prod npx hardhat run scripts/dispatcher.ts --network citrea-prod",
     "upgrade:localhost": "COMMAND=upgrade:localhost npx hardhat run scripts/dispatcher.ts --network localhost",
     "upgrade:citrea:dev": "MANIFEST_DEFAULT_DIR=.openzeppelin/dev COMMAND=upgrade:citrea:dev npx hardhat run scripts/dispatcher.ts --network citrea-dev",
     "upgrade:citrea:prod": "MANIFEST_DEFAULT_DIR=.openzeppelin/prod COMMAND=upgrade:citrea:prod npx hardhat run scripts/dispatcher.ts --network citrea-prod",
@@ -26,13 +24,16 @@
     "update-timing:citrea:prod": "COMMAND=update-market-timing:citrea:prod npx hardhat run scripts/dispatcher.ts --network citrea-prod",
     "emit:citrea:dev": "COMMAND=emit-position-settled:citrea:dev npx hardhat run scripts/dispatcher.ts --network citrea-dev",
     "emit:citrea:prod": "COMMAND=emit-position-settled:citrea:prod npx hardhat run scripts/dispatcher.ts --network citrea-prod",
+    "check-status:citrea:dev": "COMMAND=check-position-status:citrea:dev npx hardhat run scripts/dispatcher.ts --network citrea-dev",
+    "check-status:citrea:prod": "COMMAND=check-position-status:citrea:prod npx hardhat run scripts/dispatcher.ts --network citrea-prod",
     "status:localhost": "COMMAND=status:localhost npx hardhat run scripts/dispatcher.ts --network localhost",
     "status:citrea:dev": "COMMAND=status:citrea:dev npx hardhat run scripts/dispatcher.ts --network citrea-dev",
     "status:citrea:prod": "COMMAND=status:citrea:prod npx hardhat run scripts/dispatcher.ts --network citrea-prod",
-    "deploy-susd:citrea": "COMMAND=deploy-susd:citrea:dev npx hardhat run scripts/dispatcher.ts --network citrea-dev",
     "safety:localhost": "COMMAND=safety-check:localhost npx hardhat run scripts/dispatcher.ts --network localhost",
-    "safety:citrea:dev": "COMMAND=safety-check:citrea:dev npx hardhat run scripts/dispatcher.ts --network citrea-dev",
-    "safety:citrea:prod": "COMMAND=safety-check:citrea:prod npx hardhat run scripts/dispatcher.ts --network citrea-prod",
+    "safety:citrea:dev": "MANIFEST_DEFAULT_DIR=.openzeppelin/dev COMMAND=safety-check:citrea:dev npx hardhat run scripts/dispatcher.ts --network citrea-dev",
+    "safety:citrea:prod": "MANIFEST_DEFAULT_DIR=.openzeppelin/prod COMMAND=safety-check:citrea:prod npx hardhat run scripts/dispatcher.ts --network citrea-prod",
+    "verify:citrea:dev": "bash scripts/verify-all.sh citrea-dev",
+    "verify:citrea:prod": "bash scripts/verify-all.sh citrea-prod",
     "manifest:backup:localhost": "COMMAND=manifest-backup:localhost npx hardhat run scripts/dispatcher.ts",
     "manifest:backup:dev": "COMMAND=manifest-backup:dev npx hardhat run scripts/dispatcher.ts",
     "manifest:backup:prod": "COMMAND=manifest-backup:prod npx hardhat run scripts/dispatcher.ts",
@@ -43,6 +44,9 @@
     "manifest:validate:localhost": "COMMAND=manifest-validate:localhost npx hardhat run scripts/dispatcher.ts",
     "manifest:validate:dev": "COMMAND=manifest-validate:dev npx hardhat run scripts/dispatcher.ts",
     "manifest:validate:prod": "COMMAND=manifest-validate:prod npx hardhat run scripts/dispatcher.ts",
+    "repair:localhost": "COMMAND=repair-manifest:localhost npx hardhat run scripts/dispatcher.ts --network localhost",
+    "repair:citrea:dev": "MANIFEST_DEFAULT_DIR=.openzeppelin/dev COMMAND=repair-manifest:citrea:dev npx hardhat run scripts/dispatcher.ts --network citrea-dev",
+    "repair:citrea:prod": "MANIFEST_DEFAULT_DIR=.openzeppelin/prod COMMAND=repair-manifest:citrea:prod npx hardhat run scripts/dispatcher.ts --network citrea-prod",
     "test:full:localhost": "npx hardhat run scripts/full-test-localhost.ts --network localhost",
     "beta": "npx hardhat run scripts/beta-distribution.ts --network citrea-prod"
   },
@@ -65,6 +69,7 @@
     "hardhat-gas-reporter": "^2.3.0",
     "hardhat-tracer": "^3.2.1",
     "solidity-coverage": "^0.8.16",
+    "solidity-docgen": "^0.6.0-beta.36",
     "ts-node": "^10.9.2",
     "typechain": "^8.3.2",
     "typescript": "^5.8.3"
diff --git a/scripts/actions/create-market.ts b/scripts/actions/create-market.ts
index b5c1b2d..782399f 100644
--- a/scripts/actions/create-market.ts
+++ b/scripts/actions/create-market.ts
@@ -19,7 +19,7 @@ export async function createMarketAction(
 
   // 컨트랙트 연결
   const core = await ethers.getContractAt(
-    "CLMSRMarketCoreUpgradeable",
+    "CLMSRMarketCore",
     addresses.CLMSRMarketCoreProxy
   );
 
@@ -33,13 +33,13 @@ export async function createMarketAction(
   const numValidTicks = numBins + 1; // 401개의 유효한 틱 포인트
 
   const startTimestamp = Math.floor(
-    new Date("2025-08-17T00:00:00Z").getTime() / 1000
+    new Date("2025-08-25T00:00:00Z").getTime() / 1000
   );
   // 다음 주 토요일 UTC 0시 (2025년 8월 9일)
   const endTimestamp = Math.floor(
-    new Date("2025-08-18T00:00:00Z").getTime() / 1000
+    new Date("2025-08-26T00:00:00Z").getTime() / 1000
   );
-  const liquidityParameter = parseEther("1000"); // 알파값 1000
+  const liquidityParameter = parseEther("100000"); // 알파값 1000
 
   console.log("\n📊 새로운 틱 시스템 마켓 설정:");
   console.log("  - 마켓 ID: 자동 생성됨");
diff --git a/scripts/actions/deploy.ts b/scripts/actions/deploy.ts
index bf5389e..97c38cb 100644
--- a/scripts/actions/deploy.ts
+++ b/scripts/actions/deploy.ts
@@ -85,11 +85,9 @@ export async function deployAction(environment: Environment): Promise<void> {
   // Position 컨트랙트 배포
   console.log("🎭 Deploying Position contract...");
 
-  const CLMSRPositionUpgradeable = await ethers.getContractFactory(
-    "CLMSRPositionUpgradeable"
-  );
+  const CLMSRPosition = await ethers.getContractFactory("CLMSRPosition");
   const positionProxy = await upgrades.deployProxy(
-    CLMSRPositionUpgradeable,
+    CLMSRPosition,
     [ethers.ZeroAddress], // Temporary
     {
       kind: "uups",
@@ -121,18 +119,15 @@ export async function deployAction(environment: Environment): Promise<void> {
   // Core 컨트랙트 배포
   console.log("🏗️ Deploying Core contract...");
 
-  const CLMSRMarketCoreUpgradeable = await ethers.getContractFactory(
-    "CLMSRMarketCoreUpgradeable",
-    {
-      libraries: {
-        FixedPointMathU: fixedPointMathAddress,
-        LazyMulSegmentTree: segmentTreeAddress,
-      },
-    }
-  );
+  const CLMSRMarketCore = await ethers.getContractFactory("CLMSRMarketCore", {
+    libraries: {
+      FixedPointMathU: fixedPointMathAddress,
+      LazyMulSegmentTree: segmentTreeAddress,
+    },
+  });
 
   const coreProxy = await upgrades.deployProxy(
-    CLMSRMarketCoreUpgradeable,
+    CLMSRMarketCore,
     [susdAddress, positionProxyAddress],
     {
       kind: "uups",
@@ -169,11 +164,9 @@ export async function deployAction(environment: Environment): Promise<void> {
 
   // PointsGranter 배포 (항상 배포)
   console.log("🎯 Deploying PointsGranter (UUPS)...");
-  const PointsGranterUpgradeable = await ethers.getContractFactory(
-    "PointsGranterUpgradeable"
-  );
+  const PointsGranter = await ethers.getContractFactory("PointsGranter");
   const pointsProxy = await upgrades.deployProxy(
-    PointsGranterUpgradeable,
+    PointsGranter,
     [deployer.address],
     {
       kind: "uups",
diff --git a/scripts/actions/emit-position-settled.ts b/scripts/actions/emit-position-settled.ts
index b5df3cc..5fe2d98 100644
--- a/scripts/actions/emit-position-settled.ts
+++ b/scripts/actions/emit-position-settled.ts
@@ -6,8 +6,8 @@ export async function emitPositionSettledAction(
   environment: Environment
 ): Promise<void> {
   // 🎯 기본 설정값 (필요시 환경변수로 오버라이드 가능)
-  const marketId = parseInt(process.env.MARKET_ID || "3");
-  const batchLimit = parseInt(process.env.BATCH_LIMIT || "100");
+  const marketId = parseInt(process.env.MARKET_ID || "14");
+  const batchLimit = parseInt(process.env.BATCH_LIMIT || "300");
 
   console.log(
     `📢 Emitting PositionSettled events for market ${marketId} on ${environment}`
@@ -27,7 +27,7 @@ export async function emitPositionSettledAction(
 
   // Core 컨트랙트 연결
   const coreContract = await ethers.getContractAt(
-    "CLMSRMarketCoreUpgradeable",
+    "CLMSRMarketCore",
     addresses.CLMSRMarketCoreProxy
   );
 
diff --git a/scripts/actions/place-bet.ts b/scripts/actions/place-bet.ts
new file mode 100644
index 0000000..28eeb1b
--- /dev/null
+++ b/scripts/actions/place-bet.ts
@@ -0,0 +1,329 @@
+import { ethers } from "hardhat";
+import { parseUnits } from "ethers";
+import { envManager } from "../utils/environment";
+import type { Environment } from "../types/environment";
+
+export async function placeBetAction(environment: Environment): Promise<void> {
+  console.log(`🎯 마켓 9에 베팅 시작 on ${environment}`);
+
+  const [deployer] = await ethers.getSigners();
+  console.log("베터 주소:", deployer.address);
+
+  const addresses = envManager.getDeployedAddresses(environment);
+
+  if (!addresses.CLMSRMarketCoreProxy) {
+    throw new Error(`Core proxy not deployed in ${environment} environment`);
+  }
+
+  if (!addresses.SUSD) {
+    throw new Error(`SUSD not deployed in ${environment} environment`);
+  }
+
+  // 컨트랙트 연결
+  const core = await ethers.getContractAt(
+    "CLMSRMarketCore",
+    addresses.CLMSRMarketCoreProxy
+  );
+
+  const susd = await ethers.getContractAt("ERC20", addresses.SUSD);
+
+  // 베팅 파라미터 설정 - 큰 범위를 작은 범위들로 나누어 베팅
+  const marketId = 9;
+  const startTick = 110000; // 110k
+  const endTick = 115000; // 115k
+  const costPerSegment = parseUnits("100000000", 6); // 100000000USD
+
+  // 1000 tick씩 나누어 베팅 (110k-111k, 111k-112k, 112k-113k, 113k-114k, 114k-115k)
+  const segments = [];
+  for (let lower = startTick; lower < endTick; lower += 1000) {
+    const upper = Math.min(lower + 1000, endTick);
+    segments.push({ lower, upper });
+  }
+
+  console.log("\n🎲 베팅 파라미터:");
+  console.log(`  - 마켓 ID: ${marketId}`);
+  console.log(
+    `  - 전체 베팅 범위: ${startTick.toLocaleString()} ~ ${endTick.toLocaleString()}`
+  );
+  console.log(`  - 세그먼트 개수: ${segments.length}`);
+  console.log(`  - 각 구간 quantity: 1,000,000 (1달러어치 payout)`);
+  console.log(`  - 최대 비용 한도: 1억 USD (최대치!)`);
+  console.log(`  - 총 한도: $${segments.length * 100000000} USD`);
+
+  // 각 세그먼트 출력
+  segments.forEach((seg, i) => {
+    console.log(
+      `    ${
+        i + 1
+      }. ${seg.lower.toLocaleString()} ~ ${seg.upper.toLocaleString()}`
+    );
+  });
+
+  try {
+    // 1. 마켓 정보 확인
+    console.log("\n📊 마켓 정보 확인...");
+    const market = await core.getMarket(marketId);
+
+    console.log("마켓 정보:");
+    console.log(`  - 활성 상태: ${market.isActive}`);
+    console.log(`  - 정산 여부: ${market.settled}`);
+    console.log(
+      `  - 틱 범위: ${market.minTick.toString()} ~ ${market.maxTick.toString()}`
+    );
+    console.log(`  - 틱 간격: ${market.tickSpacing.toString()}`);
+    console.log(
+      `  - 시작 시간: ${new Date(
+        Number(market.startTimestamp) * 1000
+      ).toLocaleString()}`
+    );
+    console.log(
+      `  - 종료 시간: ${new Date(
+        Number(market.endTimestamp) * 1000
+      ).toLocaleString()}`
+    );
+
+    // 마켓 상태 검증
+    if (!market.isActive) {
+      throw new Error("마켓이 비활성 상태입니다");
+    }
+
+    if (market.settled) {
+      throw new Error("마켓이 이미 정산되었습니다");
+    }
+
+    // 틱 범위 검증
+    const minTick = Number(market.minTick);
+    const maxTick = Number(market.maxTick);
+    const tickSpacing = Number(market.tickSpacing);
+
+    for (const segment of segments) {
+      if (segment.lower < minTick || segment.upper > maxTick) {
+        throw new Error(
+          `베팅 범위가 마켓 범위를 벗어납니다. 마켓 범위: ${minTick} ~ ${maxTick}`
+        );
+      }
+
+      if ((segment.lower - minTick) % tickSpacing !== 0) {
+        throw new Error(
+          `lowerTick이 틱 간격에 맞지 않습니다. tickSpacing: ${tickSpacing}`
+        );
+      }
+
+      if ((segment.upper - minTick) % tickSpacing !== 0) {
+        throw new Error(
+          `upperTick이 틱 간격에 맞지 않습니다. tickSpacing: ${tickSpacing}`
+        );
+      }
+
+      if ((segment.upper - segment.lower) % tickSpacing !== 0) {
+        throw new Error(
+          `베팅 범위가 틱 간격의 배수가 아닙니다. tickSpacing: ${tickSpacing}`
+        );
+      }
+    }
+
+    // 2. USDC 잔액 확인
+    const userBalance = await susd.balanceOf(deployer.address);
+    const totalCost = BigInt(costPerSegment) * BigInt(segments.length);
+    console.log(`\n💰 잔액 확인:`);
+    console.log(`현재 USDC 잔액: ${ethers.formatUnits(userBalance, 6)} USDC`);
+    console.log(`필요한 총 금액: ${ethers.formatUnits(totalCost, 6)} USDC`);
+
+    if (userBalance < totalCost) {
+      throw new Error(
+        `USDC 잔액이 부족합니다. 필요: ${ethers.formatUnits(
+          totalCost,
+          6
+        )} USDC, 보유: ${ethers.formatUnits(userBalance, 6)} USDC`
+      );
+    }
+
+    // 3. USDC 승인 (전체 금액의 110% 여유분)
+    const maxTotalCost = (totalCost * 110n) / 100n; // 10% 여유분
+    console.log(
+      `\n✅ USDC 승인 중... (${ethers.formatUnits(maxTotalCost, 6)} USDC)`
+    );
+
+    const approveTx = await susd.approve(
+      addresses.CLMSRMarketCoreProxy,
+      maxTotalCost
+    );
+    await approveTx.wait();
+    console.log("USDC 승인 완료!");
+
+    // 4. 각 세그먼트에 대해 베팅 실행
+    const results = [];
+    let totalActualCost = 0n;
+
+    for (let i = 0; i < segments.length; i++) {
+      const segment = segments[i];
+      console.log(`\n🚀 세그먼트 ${i + 1}/${segments.length} 베팅 실행 중...`);
+      console.log(
+        `   범위: ${segment.lower.toLocaleString()} ~ ${segment.upper.toLocaleString()}`
+      );
+
+      // quantity를 loop 밖으로 이동
+      const quantity = 1000000; // 1,000,000 고정 (1달러어치 payout)
+      const maxCost = costPerSegment * 10n; // 목표 비용의 1000% 여유분 (최대치로!)
+
+      try {
+        // calculateCost 건너뛰고 바로 베팅! 고정 quantity 사용
+
+        console.log(`   고정 quantity 사용: ${quantity.toString()}`);
+        console.log(
+          `   최대 비용 한도: ${ethers.formatUnits(maxCost, 6)} USDC`
+        );
+        const tx = await core.openPosition(
+          marketId,
+          segment.lower,
+          segment.upper,
+          quantity,
+          maxCost
+        );
+
+        console.log(`   트랜잭션 해시: ${tx.hash}`);
+        const receipt = await tx.wait();
+
+        // 포지션 ID와 실제 비용 추출
+        const events = receipt?.logs || [];
+        let positionId = "Unknown";
+        let actualCost = 0n;
+
+        for (const log of events) {
+          try {
+            const parsed = core.interface.parseLog({
+              topics: log.topics as string[],
+              data: log.data,
+            });
+
+            if (parsed?.name === "PositionOpened") {
+              positionId = parsed.args[0]?.toString() || "Unknown";
+              actualCost = BigInt(parsed.args[6]?.toString() || "0"); // cost는 7번째 인자 (0부터 시작)
+              console.log(`   ✅ 포지션 ID: ${positionId}`);
+              console.log(
+                `   💰 실제 비용: ${ethers.formatUnits(actualCost, 6)} USDC`
+              );
+              break;
+            }
+          } catch {
+            // 파싱 실패는 무시
+          }
+        }
+
+        if (actualCost === 0n) {
+          console.log(`   ⚠️  실제 비용을 이벤트에서 추출하지 못했습니다`);
+          actualCost = maxCost; // fallback으로 최대 비용 사용
+        }
+
+        results.push({
+          segment: `${segment.lower}-${segment.upper}`,
+          positionId,
+          quantity: quantity.toString(),
+          actualCost: ethers.formatUnits(actualCost, 6),
+          txHash: tx.hash,
+          gasUsed: receipt?.gasUsed?.toString(),
+        });
+
+        totalActualCost += actualCost;
+      } catch (error: any) {
+        console.error(`   ❌ 세그먼트 ${i + 1} 베팅 실패:`);
+        console.error(`      에러 메시지: ${error.message}`);
+
+        // 자세한 에러 정보 출력
+        if (error.reason) {
+          console.error(`      에러 이유: ${error.reason}`);
+        }
+
+        if (error.code) {
+          console.error(`      에러 코드: ${error.code}`);
+        }
+
+        if (error.data) {
+          console.error(`      에러 데이터: ${error.data}`);
+        }
+
+        if (error.transaction) {
+          console.error(`      실패한 트랜잭션:`, error.transaction);
+        }
+
+        if (error.receipt) {
+          console.error(`      트랜잭션 영수증:`, error.receipt);
+        }
+
+        // 전체 에러 객체 출력 (디버깅용)
+        console.error(`      전체 에러 정보:`, JSON.stringify(error, null, 2));
+
+        console.log(`   ⏭️  다음 세그먼트로 계속 진행...`);
+
+        // 실패한 세그먼트도 결과에 기록
+        results.push({
+          segment: `${segment.lower}-${segment.upper}`,
+          positionId: "FAILED",
+          quantity: quantity.toString(),
+          actualCost: "0",
+          txHash: "FAILED",
+          gasUsed: "0",
+        });
+
+        continue; // 다음 세그먼트로 계속
+      }
+    }
+
+    console.log("\n🎉 모든 베팅 완료!");
+    console.log("\n📊 베팅 요약:");
+    console.log(`  - 마켓 ID: ${marketId}`);
+    console.log(
+      `  - 전체 범위: ${startTick.toLocaleString()} ~ ${endTick.toLocaleString()}`
+    );
+    console.log(`  - 세그먼트 수: ${results.length}`);
+    console.log(
+      `  - 총 실제 비용: ${ethers.formatUnits(totalActualCost, 6)} USDC`
+    );
+
+    console.log("\n📋 포지션 상세:");
+    results.forEach((result, i) => {
+      const status = result.positionId === "FAILED" ? "❌ 실패" : "✅ 성공";
+      console.log(
+        `  ${i + 1}. 범위: ${result.segment}, 포지션 ID: ${
+          result.positionId
+        }, 비용: ${result.actualCost} USDC [${status}]`
+      );
+    });
+
+    // 성공/실패 통계
+    const successCount = results.filter(
+      (r) => r.positionId !== "FAILED"
+    ).length;
+    const failCount = results.filter((r) => r.positionId === "FAILED").length;
+    console.log(`\n📈 결과: 성공 ${successCount}개, 실패 ${failCount}개`);
+  } catch (error: any) {
+    console.error("\n❌ 초기화 실패:");
+    console.error(`메시지: ${error.message}`);
+
+    // 자세한 에러 정보 출력
+    if (error.reason) {
+      console.error(`에러 이유: ${error.reason}`);
+    }
+
+    if (error.code) {
+      console.error(`에러 코드: ${error.code}`);
+    }
+
+    if (error.data) {
+      console.error(`에러 데이터: ${error.data}`);
+    }
+
+    if (error.transaction) {
+      console.error(`실패한 트랜잭션:`, error.transaction);
+    }
+
+    if (error.receipt) {
+      console.error(`트랜잭션 영수증:`, error.receipt);
+    }
+
+    // 전체 에러 객체 출력 (디버깅용)
+    console.error(`전체 에러 정보:`, JSON.stringify(error, null, 2));
+
+    throw error;
+  }
+}
diff --git a/scripts/actions/settle-market.ts b/scripts/actions/settle-market.ts
index 971f8f8..fcfa6c4 100644
--- a/scripts/actions/settle-market.ts
+++ b/scripts/actions/settle-market.ts
@@ -6,8 +6,12 @@ export async function settleMarketAction(
   environment: Environment
 ): Promise<void> {
   // 🎯 기본 설정값 (필요시 환경변수로 오버라이드 가능)
-  const marketId = parseInt(process.env.MARKET_ID || "3");
-  const settlementTick = parseInt(process.env.SETTLEMENT_TICK || "117491");
+  const marketId = parseInt(process.env.MARKET_ID || "13");
+  // settlementValue는 6 decimal 형태 (예: 117.491000 = 117491000)
+  const settlementValue = parseInt(
+    process.env.SETTLEMENT_VALUE || "111802660000"
+  );
+  const settlementTick = Math.floor(settlementValue / 1_000_000); // 표시용
 
   console.log(`⚖️ Settling market ${marketId} on ${environment}`);
 
@@ -24,13 +28,14 @@ export async function settleMarketAction(
 
   // Core 컨트랙트 연결
   const coreContract = await ethers.getContractAt(
-    "CLMSRMarketCoreUpgradeable",
+    "CLMSRMarketCore",
     addresses.CLMSRMarketCoreProxy
   );
 
   console.log("📊 Settlement parameters:");
   console.log(`  Market ID: ${marketId}`);
-  console.log(`  Settlement Tick: ${settlementTick}`);
+  console.log(`  Settlement Value: ${settlementValue} (6 decimals)`);
+  console.log(`  Settlement Tick: ${settlementTick} (calculated)`);
 
   // 마켓 상태 확인
   try {
@@ -43,8 +48,8 @@ export async function settleMarketAction(
     throw new Error(`Market validation failed: ${(error as Error).message}`);
   }
 
-  // 마켓 세틀 (정수 틱 값 사용)
-  const tx = await coreContract.settleMarket(marketId, settlementTick);
+  // 마켓 세틀 (6 decimal settlementValue 사용)
+  const tx = await coreContract.settleMarket(marketId, settlementValue);
 
   const receipt = await tx.wait();
   console.log("✅ Market settled successfully!");
diff --git a/scripts/actions/update-market-timing.ts b/scripts/actions/update-market-timing.ts
index 6ec43d0..8074408 100644
--- a/scripts/actions/update-market-timing.ts
+++ b/scripts/actions/update-market-timing.ts
@@ -24,7 +24,7 @@ export async function updateMarketTimingAction(
 
   // 컨트랙트 연결
   const core = await ethers.getContractAt(
-    "CLMSRMarketCoreUpgradeable",
+    "CLMSRMarketCore",
     addresses.CLMSRMarketCoreProxy
   );
 
diff --git a/scripts/actions/upgrade.ts b/scripts/actions/upgrade.ts
index 3d5cdb9..b69a596 100644
--- a/scripts/actions/upgrade.ts
+++ b/scripts/actions/upgrade.ts
@@ -5,6 +5,156 @@ import { safeTxOpts, delay, safeExecuteTx } from "../utils/txOpts";
 import { UpgradeSafetyChecker } from "../safety-checks";
 import { OpenZeppelinManifestManager } from "../manage-manifest";
 
+/**
+ * 업그레이드 후 구현체 주소가 변경될 때까지 폴링하여 대기
+ */
+async function waitForImplChange(
+  proxy: string,
+  prev?: string,
+  attempts = 20,
+  ms = 1500
+): Promise<string> {
+  for (let i = 0; i < attempts; i++) {
+    const cur = (
+      await upgrades.erc1967.getImplementationAddress(proxy)
+    ).toLowerCase();
+    if (!prev || cur !== prev.toLowerCase()) return cur;
+    await delay(ms);
+  }
+  // 마지막으로 한 번 더 읽어서 반환
+  return await upgrades.erc1967.getImplementationAddress(proxy);
+}
+
+/**
+ * 프록시가 실제로 가리키는 구현체 주소와 env 파일에 기록된 주소가 일치하는지 검증
+ */
+async function verifyImplementationConsistency(
+  environment: Environment
+): Promise<void> {
+  console.log("🔍 Verifying implementation consistency...");
+
+  const addresses = envManager.getDeployedAddresses(environment);
+  let allMatch = true;
+
+  // Position 프록시 검증
+  if (addresses.CLMSRPositionProxy && addresses.CLMSRPositionImplementation) {
+    const actualPosition = await upgrades.erc1967.getImplementationAddress(
+      addresses.CLMSRPositionProxy
+    );
+    if (
+      actualPosition.toLowerCase() !==
+      addresses.CLMSRPositionImplementation.toLowerCase()
+    ) {
+      console.warn("⚠️ Position Implementation mismatch detected.");
+      if (process.env.FIX_ENV === "1") {
+        envManager.updateContract(
+          environment,
+          "core",
+          "CLMSRPositionImplementation",
+          actualPosition
+        );
+        console.log(
+          "🔧 Fixed env: core.CLMSRPositionImplementation ->",
+          actualPosition
+        );
+      } else {
+        console.error(`❌ Position Implementation mismatch:`);
+        console.error(`   Proxy points to: ${actualPosition}`);
+        console.error(
+          `   Env file has:    ${addresses.CLMSRPositionImplementation}`
+        );
+        console.error(`   💡 Run with FIX_ENV=1 to auto-fix`);
+        allMatch = false;
+      }
+    } else {
+      console.log(`✅ Position Implementation consistent: ${actualPosition}`);
+    }
+  }
+
+  // Core 프록시 검증
+  if (
+    addresses.CLMSRMarketCoreProxy &&
+    addresses.CLMSRMarketCoreImplementation
+  ) {
+    const actualCore = await upgrades.erc1967.getImplementationAddress(
+      addresses.CLMSRMarketCoreProxy
+    );
+    if (
+      actualCore.toLowerCase() !==
+      addresses.CLMSRMarketCoreImplementation.toLowerCase()
+    ) {
+      console.warn("⚠️ Core Implementation mismatch detected.");
+      if (process.env.FIX_ENV === "1") {
+        envManager.updateContract(
+          environment,
+          "core",
+          "CLMSRMarketCoreImplementation",
+          actualCore
+        );
+        console.log(
+          "🔧 Fixed env: core.CLMSRMarketCoreImplementation ->",
+          actualCore
+        );
+      } else {
+        console.error(`❌ Core Implementation mismatch:`);
+        console.error(`   Proxy points to: ${actualCore}`);
+        console.error(
+          `   Env file has:    ${addresses.CLMSRMarketCoreImplementation}`
+        );
+        console.error(`   💡 Run with FIX_ENV=1 to auto-fix`);
+        allMatch = false;
+      }
+    } else {
+      console.log(`✅ Core Implementation consistent: ${actualCore}`);
+    }
+  }
+
+  // Points 프록시 검증
+  if (addresses.PointsGranterProxy && addresses.PointsGranterImplementation) {
+    const actualPoints = await upgrades.erc1967.getImplementationAddress(
+      addresses.PointsGranterProxy
+    );
+    if (
+      actualPoints.toLowerCase() !==
+      addresses.PointsGranterImplementation.toLowerCase()
+    ) {
+      console.warn("⚠️ Points Implementation mismatch detected.");
+      if (process.env.FIX_ENV === "1") {
+        envManager.updateContract(
+          environment,
+          "points",
+          "PointsGranterImplementation",
+          actualPoints
+        );
+        console.log(
+          "🔧 Fixed env: points.PointsGranterImplementation ->",
+          actualPoints
+        );
+      } else {
+        console.error(`❌ Points Implementation mismatch:`);
+        console.error(`   Proxy points to: ${actualPoints}`);
+        console.error(
+          `   Env file has:    ${addresses.PointsGranterImplementation}`
+        );
+        console.error(`   💡 Run with FIX_ENV=1 to auto-fix`);
+        allMatch = false;
+      }
+    } else {
+      console.log(`✅ Points Implementation consistent: ${actualPoints}`);
+    }
+  }
+
+  if (!allMatch) {
+    throw new Error(
+      "❌ Implementation consistency check failed! Proxy addresses do not match env file."
+    );
+  }
+
+  console.log(
+    "✅ All implementation addresses are consistent between proxies and env file."
+  );
+}
+
 export async function upgradeAction(environment: Environment): Promise<void> {
   console.log(`⬆️ Upgrading ${environment} to latest contract`);
 
@@ -27,71 +177,65 @@ export async function upgradeAction(environment: Environment): Promise<void> {
   console.log("💾 Backing up OpenZeppelin manifest...");
   await manifestManager.backup(environment);
 
-  // 🔧 선제적 매니페스트 동기화 (안전한 방식)
   console.log("🔄 Pre-synchronizing OpenZeppelin manifest...");
 
-  // Position contract forceImport (선제적)
-  const CLMSRPositionUpgradeable = await ethers.getContractFactory(
-    "CLMSRPositionUpgradeable"
-  );
-
-  await upgrades.forceImport(
-    addresses.CLMSRPositionProxy!,
-    CLMSRPositionUpgradeable,
-    { kind: "uups" }
-  );
-  console.log("✅ Position proxy pre-imported");
-
-  await delay(1000);
-
-  // Core contract forceImport (선제적) - 현재 라이브러리로 먼저 등록
-  const CLMSRMarketCoreUpgradeableOld = await ethers.getContractFactory(
-    "CLMSRMarketCoreUpgradeable",
+  const CLMSRMarketCoreImport = await ethers.getContractFactory(
+    "CLMSRMarketCore",
     {
       libraries: {
         FixedPointMathU: addresses.FixedPointMathU!,
-        LazyMulSegmentTree: addresses.LazyMulSegmentTree!, // 현재 라이브러리
+        LazyMulSegmentTree: addresses.LazyMulSegmentTree!,
       },
     }
   );
 
   await upgrades.forceImport(
     addresses.CLMSRMarketCoreProxy!,
-    CLMSRMarketCoreUpgradeableOld,
+    CLMSRMarketCoreImport,
     { kind: "uups" }
   );
   console.log("✅ Core proxy pre-imported");
 
-  await delay(1000);
+  // Position과 Points도 매니페스트에 동기화
+  if (addresses.CLMSRPositionProxy) {
+    const CLMSRPositionImport = await ethers.getContractFactory(
+      "CLMSRPosition"
+    );
+    await upgrades.forceImport(
+      addresses.CLMSRPositionProxy,
+      CLMSRPositionImport,
+      { kind: "uups" }
+    );
+    console.log("✅ Position proxy pre-imported");
+  }
 
   if (addresses.PointsGranterProxy) {
-    const PointsGranterUpgradeable = await ethers.getContractFactory(
-      "PointsGranterUpgradeable"
+    const PointsGranterImport = await ethers.getContractFactory(
+      "PointsGranter"
     );
-
     await upgrades.forceImport(
       addresses.PointsGranterProxy,
-      PointsGranterUpgradeable,
+      PointsGranterImport,
       { kind: "uups" }
     );
-    console.log("✅ PointsGranter proxy pre-imported");
+    console.log("✅ Points proxy pre-imported");
   }
 
+  await delay(1000);
+
   console.log("📝 Manifest synchronized with on-chain state");
 
   // 새 라이브러리 배포 (FLUSH_THRESHOLD 등 신기능 포함)
   console.log("📚 Deploying new LazyMulSegmentTree library...");
   const txOpts = await safeTxOpts();
 
-  const newSegmentTreeAddress = await safeExecuteTx(async () => {
-    const LazyMulSegmentTree = await ethers.getContractFactory(
-      "LazyMulSegmentTree",
-      { libraries: { FixedPointMathU: addresses.FixedPointMathU } }
-    );
-    const newSegmentTree = await LazyMulSegmentTree.deploy(txOpts);
-    await newSegmentTree.waitForDeployment();
-    return await newSegmentTree.getAddress();
-  });
+  const LazyMulSegmentTree = await ethers.getContractFactory(
+    "LazyMulSegmentTree",
+    { libraries: { FixedPointMathU: addresses.FixedPointMathU } }
+  );
+  const newSegmentTree = await LazyMulSegmentTree.deploy(txOpts);
+  await newSegmentTree.waitForDeployment();
+  const newSegmentTreeAddress = await newSegmentTree.getAddress();
 
   // 환경 파일에 새 라이브러리 주소 저장
   envManager.updateContract(
@@ -112,32 +256,28 @@ export async function upgradeAction(environment: Environment): Promise<void> {
     );
   }
 
-  // 🛡️ Position 안전성 검사
-  console.log("🔍 Running Position contract safety checks...");
-  const positionSafe = await safetyChecker.runAllSafetyChecks(
-    "CLMSRPositionUpgradeable"
-  );
-  if (!positionSafe) {
-    throw new Error("Position contract safety checks failed!");
-  }
-
-  // Position contract 업그레이드 (매니페스트 이미 동기화됨)
-  const newPositionImplAddress = await safeExecuteTx(async () => {
-    const upgradedPosition = await upgrades.upgradeProxy(
-      addresses.CLMSRPositionProxy,
-      CLMSRPositionUpgradeable, // 이미 위에서 생성됨
-      {
-        txOverrides: await safeTxOpts(),
-      }
-    );
+  // Position 업그레이드 (레이스 컨디션 제거)
 
-    await upgradedPosition.waitForDeployment();
+  // 업그레이드 이전 구현체 주소를 저장
+  const beforePosImpl = await upgrades.erc1967.getImplementationAddress(
+    addresses.CLMSRPositionProxy
+  );
+  console.log("📋 Position impl before upgrade:", beforePosImpl);
 
-    return await upgrades.erc1967.getImplementationAddress(
-      addresses.CLMSRPositionProxy
-    );
+  const CLMSRPosition = await ethers.getContractFactory("CLMSRPosition");
+  await upgrades.upgradeProxy(addresses.CLMSRPositionProxy, CLMSRPosition, {
+    kind: "uups",
+    redeployImplementation: "always",
+    txOverrides: await safeTxOpts(),
   });
 
+  // 새 구현체 주소가 반영될 때까지 대기(폴링)
+  const newPositionImplAddress = await waitForImplChange(
+    addresses.CLMSRPositionProxy,
+    beforePosImpl
+  );
+  console.log("📋 Position impl after upgrade:", newPositionImplAddress);
+
   envManager.updateContract(
     environment,
     "core",
@@ -150,45 +290,35 @@ export async function upgradeAction(environment: Environment): Promise<void> {
   console.log("🔧 Upgrading Core contract with new library...");
   await delay(3000); // Wait between transactions
 
-  // 🛡️ Core 안전성 검사
-  console.log("🔍 Running Core contract safety checks...");
-  const coreLibraries = {
-    FixedPointMathU: addresses.FixedPointMathU,
-    LazyMulSegmentTree: newSegmentTreeAddress, // 새 라이브러리 주소 사용
-  };
-  const coreSafe = await safetyChecker.runAllSafetyChecks(
-    "CLMSRMarketCoreUpgradeable",
-    coreLibraries
-  );
-  if (!coreSafe) {
-    throw new Error("Core contract safety checks failed!");
-  }
+  // Core 업그레이드 (레이스 컨디션 제거)
 
-  // Core contract 업그레이드 (매니페스트 이미 동기화됨)
-  const CLMSRMarketCoreUpgradeable = await ethers.getContractFactory(
-    "CLMSRMarketCoreUpgradeable",
-    {
-      libraries: {
-        FixedPointMathU: addresses.FixedPointMathU,
-        LazyMulSegmentTree: newSegmentTreeAddress, // 새 라이브러리 주소 사용
-      },
-    }
+  // 업그레이드 이전 구현체 주소를 저장
+  const beforeCoreImpl = await upgrades.erc1967.getImplementationAddress(
+    addresses.CLMSRMarketCoreProxy
   );
+  console.log("📋 Core impl before upgrade:", beforeCoreImpl);
 
-  const upgraded = await upgrades.upgradeProxy(
-    addresses.CLMSRMarketCoreProxy,
-    CLMSRMarketCoreUpgradeable,
-    {
-      unsafeAllow: ["external-library-linking"],
-      txOverrides: await safeTxOpts(),
-    }
-  );
+  // Core contract 업그레이드 (매니페스트 이미 동기화됨)
+  const CLMSRMarketCore = await ethers.getContractFactory("CLMSRMarketCore", {
+    libraries: {
+      FixedPointMathU: addresses.FixedPointMathU,
+      LazyMulSegmentTree: newSegmentTreeAddress, // 새 라이브러리 주소 사용
+    },
+  });
 
-  await upgraded.waitForDeployment();
+  await upgrades.upgradeProxy(addresses.CLMSRMarketCoreProxy, CLMSRMarketCore, {
+    kind: "uups",
+    redeployImplementation: "always",
+    unsafeAllow: ["external-library-linking"],
+    txOverrides: await safeTxOpts(),
+  });
 
-  const newImplAddress = await upgrades.erc1967.getImplementationAddress(
-    addresses.CLMSRMarketCoreProxy
+  // 새 구현체 주소가 반영될 때까지 대기(폴링)
+  const newImplAddress = await waitForImplChange(
+    addresses.CLMSRMarketCoreProxy,
+    beforeCoreImpl
   );
+  console.log("📋 Core impl after upgrade:", newImplAddress);
 
   envManager.updateContract(
     environment,
@@ -208,22 +338,26 @@ export async function upgradeAction(environment: Environment): Promise<void> {
     );
   }
 
-  const PointsGranterUpgradeable = await ethers.getContractFactory(
-    "PointsGranterUpgradeable"
-  );
-  const upgradedPoints = await upgrades.upgradeProxy(
-    addresses.PointsGranterProxy,
-    PointsGranterUpgradeable,
-    {
-      kind: "uups",
-    }
+  // 업그레이드 이전 구현체 주소를 저장
+  const beforePointsImpl = await upgrades.erc1967.getImplementationAddress(
+    addresses.PointsGranterProxy
   );
-  await upgradedPoints.waitForDeployment();
+  console.log("📋 Points impl before upgrade:", beforePointsImpl);
 
+  const PointsGranter = await ethers.getContractFactory("PointsGranter");
+  await upgrades.upgradeProxy(addresses.PointsGranterProxy, PointsGranter, {
+    kind: "uups",
+    redeployImplementation: "always",
+    txOverrides: await safeTxOpts(),
+  });
+
+  // 새 구현체 주소가 반영될 때까지 대기(폴링)
   const pointsProxyAddress = addresses.PointsGranterProxy;
-  const pointsImplAddress = await upgrades.erc1967.getImplementationAddress(
-    pointsProxyAddress
+  const pointsImplAddress = await waitForImplChange(
+    pointsProxyAddress,
+    beforePointsImpl
   );
+  console.log("📋 Points impl after upgrade:", pointsImplAddress);
 
   envManager.updateContract(
     environment,
@@ -248,6 +382,9 @@ export async function upgradeAction(environment: Environment): Promise<void> {
     deployer: deployer.address,
   });
 
+  // 일관성 검증: 프록시가 실제로 가리키는 구현체 주소 확인
+  await verifyImplementationConsistency(environment);
+
   console.log("🎉 Upgrade completed successfully!");
   envManager.printEnvironmentStatus(environment);
 }
diff --git a/scripts/dispatcher.ts b/scripts/dispatcher.ts
index 6b2fbbd..21e69d1 100644
--- a/scripts/dispatcher.ts
+++ b/scripts/dispatcher.ts
@@ -47,6 +47,13 @@ if (!COMMAND) {
   emit-position-settled:citrea:dev  - Emit position settled events on citrea dev
   emit-position-settled:citrea:prod - Emit position settled events on citrea prod
   
+🔍 Position Status Commands:
+  check-position-status:localhost   - Check position emission status on localhost
+  check-position-status:base:dev    - Check position emission status on base dev
+  check-position-status:base:prod   - Check position emission status on base prod
+  check-position-status:citrea:dev  - Check position emission status on citrea dev
+  check-position-status:citrea:prod - Check position emission status on citrea prod
+  
 ⏰ Market Timing Commands:
   update-market-timing:localhost   - Update market timing on localhost (hardcoded values)
   update-market-timing:base:dev    - Update market timing on base dev (hardcoded values)
@@ -79,6 +86,7 @@ if (!COMMAND) {
   manifest-commit:ENV       - Commit manifest changes for environment
   manifest-sync:all         - Sync all environment manifests
   manifest-validate:ENV     - Validate manifest for environment
+  repair-manifest:ENV       - Clean ghost implementations from manifest
 
 Usage:
   COMMAND=deploy:localhost npx hardhat run scripts/dispatcher.ts --network localhost
@@ -135,6 +143,13 @@ async function dispatch() {
         await emitPositionSettledAction(environment as Environment);
         break;
 
+      case "check-position-status":
+        const { checkMarketPositionStatusCLI } = await import(
+          "./actions/check-market-position-status"
+        );
+        await checkMarketPositionStatusCLI(environment as Environment);
+        break;
+
       case "update-market-timing":
         const { updateMarketTimingAction } = await import(
           "./actions/update-market-timing"
@@ -166,10 +181,7 @@ async function dispatch() {
           LazyMulSegmentTree: addresses.LazyMulSegmentTree!,
         };
 
-        await checker.runAllSafetyChecks(
-          "CLMSRMarketCoreUpgradeable",
-          libraries
-        );
+        await checker.runAllSafetyChecks("CLMSRMarketCore", libraries);
         break;
 
       case "manifest-backup":
@@ -201,6 +213,11 @@ async function dispatch() {
         await managerValidate.validate(environment);
         break;
 
+      case "repair-manifest":
+        const { repairManifestAction } = await import("./repair-manifest");
+        await repairManifestAction(environment as Environment);
+        break;
+
       default:
         console.error(`❌ Unknown command: ${action}`);
         console.log("Use COMMAND without value to see available commands");
diff --git a/scripts/fund-citrea-prod.ts b/scripts/fund-citrea-prod.ts
new file mode 100644
index 0000000..e6f04cc
--- /dev/null
+++ b/scripts/fund-citrea-prod.ts
@@ -0,0 +1,147 @@
+import { ethers } from "hardhat";
+import { parseUnits } from "ethers";
+
+/**
+ * Citrea Prod 환경에 천만 달러 (10M SUSD) 전송 스크립트
+ */
+
+const CITREA_PROD_CONFIG = {
+  network: "citrea-prod",
+  chainId: 5115,
+  marketCoreAddress: "0xE480ca1C63B6dd929af1EeA4D3de1073942F3cEf",
+  susdAddress: "0xE32527F8b3f142a69278f22CdA334d70644b9743",
+  fundAmount: "10000000", // 10M SUSD
+  gasEthAmount: "0.005", // 0.005 ETH for gas fees
+};
+
+async function main() {
+  console.log("🚀 Citrea Prod 자금 전송 시작");
+
+  const [signer] = await ethers.getSigners();
+  console.log("👤 송금자 계정:", signer.address);
+
+  // 네트워크 확인
+  const network = await ethers.provider.getNetwork();
+  console.log(
+    "🌐 현재 네트워크:",
+    network.name,
+    "- Chain ID:",
+    Number(network.chainId)
+  );
+
+  if (Number(network.chainId) !== CITREA_PROD_CONFIG.chainId) {
+    throw new Error(
+      `❌ 네트워크 불일치: 현재 ${network.chainId}, 필요 ${CITREA_PROD_CONFIG.chainId} (citrea-prod)`
+    );
+  }
+
+  // 현재 계정 잔액 확인
+  const ethBalance = await ethers.provider.getBalance(signer.address);
+  console.log("💰 현재 ETH 잔액:", ethers.formatEther(ethBalance));
+
+  // SUSD 컨트랙트 연결
+  console.log("🔗 SUSD 컨트랙트 연결 중...");
+  const susdContract = await ethers.getContractAt(
+    "MockERC20",
+    CITREA_PROD_CONFIG.susdAddress
+  );
+
+  // SUSD 잔액 확인
+  const susdBalance = await susdContract.balanceOf(signer.address);
+  const susdBalanceFormatted = ethers.formatUnits(susdBalance, 6);
+  console.log("💰 현재 SUSD 잔액:", susdBalanceFormatted, "SUSD");
+
+  const requiredSusd = parseUnits(CITREA_PROD_CONFIG.fundAmount, 6);
+
+  // 필요한 잔액 체크
+  if (susdBalance < requiredSusd) {
+    console.log("⚠️  SUSD 잔액이 부족합니다!");
+    console.log("필요:", CITREA_PROD_CONFIG.fundAmount, "SUSD");
+    console.log("보유:", susdBalanceFormatted, "SUSD");
+
+    // SUSD 발행 시도
+    console.log("💰 SUSD 발행 시도 중...");
+    try {
+      const mintAmount = requiredSusd - susdBalance;
+      const mintTx = await susdContract.mint(signer.address, mintAmount);
+      await mintTx.wait();
+      console.log(
+        "✅ SUSD 발행 완료:",
+        ethers.formatUnits(mintAmount, 6),
+        "SUSD"
+      );
+
+      const newBalance = await susdContract.balanceOf(signer.address);
+      console.log(
+        "📊 새로운 SUSD 잔액:",
+        ethers.formatUnits(newBalance, 6),
+        "SUSD"
+      );
+    } catch (error) {
+      console.error("❌ SUSD 발행 실패:", error);
+      console.log("💡 수동으로 SUSD를 발행하거나 다른 계정에서 전송받으세요.");
+      return;
+    }
+  }
+
+  // Market Core 주소로 자금 전송
+  console.log("📤 자금 전송 시작...");
+  console.log("🎯 대상 주소:", CITREA_PROD_CONFIG.marketCoreAddress);
+  console.log("💵 전송 금액:", CITREA_PROD_CONFIG.fundAmount, "SUSD");
+
+  try {
+    // SUSD 전송 (ETH는 제외 - 가스비 부족)
+    console.log("💵 SUSD 전송 중...");
+    const susdTx = await susdContract.transfer(
+      CITREA_PROD_CONFIG.marketCoreAddress,
+      requiredSusd
+    );
+    await susdTx.wait();
+    console.log("✅ SUSD 전송 완료:", susdTx.hash);
+    console.log("   전송 금액:", CITREA_PROD_CONFIG.fundAmount, "SUSD");
+
+    // 전송 후 잔액 확인
+    console.log("\n📊 전송 후 잔액 확인:");
+    const finalEthBalance = await ethers.provider.getBalance(signer.address);
+    const finalSusdBalance = await susdContract.balanceOf(signer.address);
+    const targetEthBalance = await ethers.provider.getBalance(
+      CITREA_PROD_CONFIG.marketCoreAddress
+    );
+    const targetSusdBalance = await susdContract.balanceOf(
+      CITREA_PROD_CONFIG.marketCoreAddress
+    );
+
+    console.log("👤 송금자 잔액:");
+    console.log("   ETH:", ethers.formatEther(finalEthBalance));
+    console.log("   SUSD:", ethers.formatUnits(finalSusdBalance, 6));
+
+    console.log("🎯 대상 계정 잔액:");
+    console.log("   ETH:", ethers.formatEther(targetEthBalance));
+    console.log("   SUSD:", ethers.formatUnits(targetSusdBalance, 6));
+
+    console.log("\n🎉 Citrea Prod 자금 전송 완료!");
+    console.log("📋 요약:");
+    console.log("   네트워크: Citrea Testnet (Chain ID: 5115)");
+    console.log(
+      "   대상: CLMSRMarketCore (",
+      CITREA_PROD_CONFIG.marketCoreAddress,
+      ")"
+    );
+    console.log(
+      "   SUSD 전송:",
+      CITREA_PROD_CONFIG.fundAmount,
+      "SUSD ($10,000,000)"
+    );
+    console.log("   SUSD TX:", susdTx.hash);
+  } catch (error) {
+    console.error("❌ 자금 전송 실패:", error);
+    throw error;
+  }
+}
+
+main()
+  .then(() => process.exit(0))
+  .catch((error) => {
+    console.error(error);
+    process.exit(1);
+  });
diff --git a/scripts/manage-manifest.ts b/scripts/manage-manifest.ts
index aac97f9..5d7bed0 100644
--- a/scripts/manage-manifest.ts
+++ b/scripts/manage-manifest.ts
@@ -11,7 +11,7 @@ interface ManifestManager {
 }
 
 class OpenZeppelinManifestManager implements ManifestManager {
-  private manifestDir = ".openzeppelin";
+  private manifestDir = process.env.MANIFEST_DEFAULT_DIR || ".openzeppelin";
   private backupDir = ".openzeppelin/backups";
 
   async ensureBackupDir(): Promise<void> {
@@ -29,16 +29,17 @@ class OpenZeppelinManifestManager implements ManifestManager {
     switch (environment) {
       case "localhost":
         return "localhost.json";
-      case "dev":
-        return "base-dev.json"; // dev 환경 전용
-      case "prod":
-        return "base-prod.json"; // prod 환경 전용
+      case "citrea-dev":
+      case "citrea-prod":
+        return "unknown-5115.json"; // citrea 환경들은 모두 chainId 5115 사용
       default:
         return `${environment}.json`;
     }
   }
 
   /**
+   *
+   *
    * 매니페스트 백업
    */
   async backup(environment: string): Promise<void> {
@@ -136,15 +137,42 @@ class OpenZeppelinManifestManager implements ManifestManager {
     console.log("🔄 Syncing all manifests...");
 
     try {
-      const files = await fs.readdir(this.manifestDir);
-      const manifestFiles = files.filter(
-        (f) => f.endsWith(".json") && f !== "package.json"
-      );
-
-      for (const file of manifestFiles) {
-        const env = file.replace(".json", "");
-        await this.backup(env);
-        console.log(`📋 ${env}: manifest synced`);
+      // 환경별 디렉토리와 매니페스트 파일 매핑
+      const envMappings = [
+        {
+          env: "citrea-dev",
+          dir: ".openzeppelin/dev",
+          file: "unknown-5115.json",
+        },
+        {
+          env: "citrea-prod",
+          dir: ".openzeppelin/prod",
+          file: "unknown-5115.json",
+        },
+        { env: "localhost", dir: ".openzeppelin", file: "localhost.json" },
+      ];
+
+      for (const mapping of envMappings) {
+        const manifestPath = `${mapping.dir}/${mapping.file}`;
+        try {
+          await fs.access(manifestPath);
+
+          // 임시로 MANIFEST_DEFAULT_DIR를 설정하여 백업
+          const originalDir = process.env.MANIFEST_DEFAULT_DIR;
+          process.env.MANIFEST_DEFAULT_DIR = mapping.dir;
+
+          await this.backup(mapping.env);
+          console.log(`📋 ${mapping.env}: manifest synced`);
+
+          // 원래 설정 복원
+          if (originalDir) {
+            process.env.MANIFEST_DEFAULT_DIR = originalDir;
+          } else {
+            delete process.env.MANIFEST_DEFAULT_DIR;
+          }
+        } catch (error) {
+          console.log(`⚠️  No manifest found for ${mapping.env}`);
+        }
       }
 
       console.log("✅ All manifests synced");
diff --git a/scripts/repair-manifest.ts b/scripts/repair-manifest.ts
new file mode 100644
index 0000000..4202a62
--- /dev/null
+++ b/scripts/repair-manifest.ts
@@ -0,0 +1,181 @@
+import { ethers } from "hardhat";
+import { envManager } from "./utils/environment";
+import type { Environment } from "./types/environment";
+import { OpenZeppelinManifestManager } from "./manage-manifest";
+import fs from "fs";
+import path from "path";
+
+/**
+ * 매니페스트에서 체인에 실제로 존재하지 않는 "유령 구현체"를 청소하는 스크립트
+ *
+ * 이 스크립트는 OpenZeppelin 매니페스트의 impls 항목들을 순회하며,
+ * 각 구현체 주소가 실제로 체인에 배포된 코드를 가지고 있는지 확인합니다.
+ * 코드가 없는 주소("0x"를 반환)는 매니페스트에서 제거합니다.
+ */
+
+interface ManifestImpl {
+  address: string;
+  layout: any;
+  allAddresses?: string[];
+}
+
+interface Manifest {
+  manifestVersion: string;
+  proxies: Array<{
+    address: string;
+    kind: string;
+  }>;
+  impls: Record<string, ManifestImpl>;
+}
+
+async function checkCodeAtAddress(address: string): Promise<boolean> {
+  try {
+    const code = await ethers.provider.getCode(address);
+    return code !== "0x";
+  } catch (error) {
+    console.warn(`⚠️ Error checking code at ${address}:`, error);
+    return false;
+  }
+}
+
+async function cleanGhostImplementations(
+  environment: Environment
+): Promise<void> {
+  console.log(`🧹 Cleaning ghost implementations for ${environment}...`);
+
+  const manifestManager = new OpenZeppelinManifestManager();
+
+  // 매니페스트 백업
+  console.log("💾 Creating backup before cleanup...");
+  await manifestManager.backup(environment);
+
+  // 매니페스트 파일 경로 결정
+  const manifestDir =
+    environment === "localhost"
+      ? ".openzeppelin"
+      : `.openzeppelin/${environment === "citrea-dev" ? "dev" : "prod"}`;
+
+  const manifestPath = path.join(
+    process.cwd(),
+    manifestDir,
+    "unknown-5115.json"
+  );
+
+  if (!fs.existsSync(manifestPath)) {
+    console.log(`❌ Manifest file not found: ${manifestPath}`);
+    return;
+  }
+
+  // 매니페스트 읽기
+  const manifestContent = fs.readFileSync(manifestPath, "utf8");
+  const manifest: Manifest = JSON.parse(manifestContent);
+
+  console.log(
+    `📋 Found ${
+      Object.keys(manifest.impls || {}).length
+    } implementation entries in manifest`
+  );
+
+  const validImpls: string[] = [];
+  const removed: string[] = [];
+  const promoted: string[] = [];
+
+  // 각 구현체와 allAddresses 확인
+  for (const [implId, impl] of Object.entries(manifest.impls || {})) {
+    console.log(`🔍 Checking implementation entry: ${implId}`);
+    
+    // 주소 목록 수집 (address + allAddresses)
+    const candidates = Array.from(new Set([
+      impl.address?.toLowerCase(),
+      ...(impl.allAddresses?.map(a => a.toLowerCase()) ?? [])
+    ].filter(Boolean)));
+    
+    const validAddrs: string[] = [];
+    
+    for (const addr of candidates) {
+      console.log(`  📍 Checking address: ${addr}...`);
+      const hasCode = await checkCodeAtAddress(addr);
+      
+      if (hasCode) {
+        console.log(`  ✅ Valid: ${addr}`);
+        validAddrs.push(addr);
+        validImpls.push(addr);
+      } else {
+        console.log(`  👻 Ghost: ${addr} (no code)`);
+        removed.push(addr);
+      }
+      
+      // 요청 간 지연을 추가하여 RPC 제한 방지
+      await new Promise((resolve) => setTimeout(resolve, 75));
+    }
+    
+    if (validAddrs.length === 0) {
+      console.log(`🗑️ Removing completely invalid implementation: ${implId}`);
+      delete manifest.impls[implId];
+    } else {
+      // 가장 최근(마지막) 유효 주소를 대표 address로 설정
+      const current = validAddrs[validAddrs.length - 1];
+      if (!impl.address || impl.address.toLowerCase() !== current.toLowerCase()) {
+        promoted.push(`${impl.address} -> ${current}`);
+        impl.address = current;
+      }
+      impl.allAddresses = validAddrs.filter(a => a.toLowerCase() !== current.toLowerCase());
+      console.log(`🔧 Updated impl: primary=${impl.address}, history=${impl.allAddresses.length}`);
+    }
+  }
+
+  // 동일 주소/컴파일 버전 조합 중복 제거
+  const seen = new Set<string>();
+  for (const [implId, impl] of Object.entries(manifest.impls || {})) {
+    const key = `${impl.address?.toLowerCase()}-${impl.layout?.solcVersion ?? ""}`;
+    if (seen.has(key)) {
+      console.log(`🔄 Removing duplicate impl: ${implId}`);
+      delete manifest.impls[implId];
+    } else {
+      seen.add(key);
+    }
+  }
+
+  // 결과 요약
+  console.log(`\n📊 Cleanup Summary:`);
+  console.log(`   ✅ Valid implementations: ${validImpls.length}`);
+  console.log(`   👟 Promoted addresses: ${promoted.length}`);
+  console.log(`   🗑️ Removed ghost addresses (including allAddresses): ${removed.length}`);
+
+  if (removed.length > 0 || promoted.length > 0) {
+    if (removed.length > 0) {
+      console.log(`\n🗑️ Removed ghost addresses:`);
+      removed.forEach(addr => console.log(`   - ${addr}`));
+    }
+    
+    if (promoted.length > 0) {
+      console.log(`\n👟 Promoted addresses:`);
+      promoted.forEach(change => console.log(`   - ${change}`));
+    }
+
+    // 수정된 매니페스트 저장
+    fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
+    console.log(`\n💾 Updated manifest saved: ${manifestPath}`);
+  } else {
+    console.log(`\n🎉 No ghost implementations found. Manifest is clean!`);
+  }
+}
+
+async function repairManifestAction(environment: Environment): Promise<void> {
+  console.log(`🔧 Starting manifest repair for ${environment}...`);
+
+  const [deployer] = await ethers.getSigners();
+  console.log("👤 Deployer:", deployer.address);
+
+  try {
+    await cleanGhostImplementations(environment);
+    console.log(
+      `\n✅ Manifest repair completed successfully for ${environment}!`
+    );
+  } catch (error) {
+    console.error(`❌ Manifest repair failed:`, error);
+    throw error;
+  }
+}
+
+export { repairManifestAction, cleanGhostImplementations };
diff --git a/scripts/safety-checks.ts b/scripts/safety-checks.ts
index 1eeb793..994ac27 100644
--- a/scripts/safety-checks.ts
+++ b/scripts/safety-checks.ts
@@ -67,14 +67,14 @@ class UpgradeSafetyChecker {
     contractName: string,
     libraries?: Record<string, string>
   ): Promise<string | null> {
-    console.log(`🎭 Simulating ${contractName} implementation deployment...`);
+    console.log(`🔍 Validating ${contractName} upgrade compatibility...`);
 
     try {
       const factory = await ethers.getContractFactory(contractName, {
         libraries,
       });
 
-      // prepareUpgrade로 시뮬레이션 (실제 배포 없이 검증)
+      // validateUpgrade로 호환성 검증 (실제 배포 없이 검증)
       const addresses = this.envManager.getDeployedAddresses(this.environment);
       const proxyAddress = contractName.includes("Position")
         ? addresses.CLMSRPositionProxy
@@ -84,28 +84,23 @@ class UpgradeSafetyChecker {
         throw new Error(`Proxy address not found for ${contractName}`);
       }
 
-      const prepareOptions: any = {
+      const validateOptions: any = {
         unsafeAllow: libraries ? ["external-library-linking"] : undefined,
       };
 
       // dev 환경에서 kind 옵션 추가
       if (this.environment === "base-dev") {
-        prepareOptions.kind = "uups";
+        validateOptions.kind = "uups";
       }
 
-      const newImplAddress = await upgrades.prepareUpgrade(
-        proxyAddress,
-        factory,
-        prepareOptions
-      );
+      // validateUpgrade로 호환성만 검증 (배포 없음)
+      await upgrades.validateUpgrade(proxyAddress, factory, validateOptions);
 
-      console.log(`✅ Implementation deployment simulation successful`);
-      console.log(
-        `   New implementation would be deployed at: ${newImplAddress}`
-      );
-      return newImplAddress as string;
+      console.log(`✅ Upgrade compatibility validation successful`);
+      console.log(`   ${contractName} is ready for upgrade`);
+      return null; // 실제 주소 반환 안함
     } catch (error: any) {
-      console.error("❌ Implementation deployment simulation failed:");
+      console.error("❌ Upgrade compatibility validation failed:");
       console.error(error.message);
       return null;
     }
@@ -132,6 +127,7 @@ class UpgradeSafetyChecker {
       // 업그레이드 트랜잭션 시뮬레이션
       const proxy = await ethers.getContractAt("UUPSUpgradeable", proxyAddress);
 
+      // 가스 추정을 위한 호환성 검증만 수행
       const gasUpgradeOptions: any = {
         unsafeAllow: libraries ? ["external-library-linking"] : undefined,
       };
@@ -141,19 +137,12 @@ class UpgradeSafetyChecker {
         gasUpgradeOptions.kind = "uups";
       }
 
-      const newImpl = await upgrades.prepareUpgrade(
-        proxyAddress,
-        factory,
-        gasUpgradeOptions
-      );
+      // 호환성 검증만 수행 (배포 없음)
+      await upgrades.validateUpgrade(proxyAddress, factory, gasUpgradeOptions);
 
-      // upgradeToAndCall 가스 추정
-      const implAddress =
-        typeof newImpl === "string" ? newImpl : newImpl.toString();
-      const gasEstimate = await proxy.upgradeToAndCall.estimateGas(
-        implAddress,
-        "0x"
-      );
+      // 가스 추정은 간략화 (실제 구현체 없이는 정확한 추정 불가)
+      console.log(`✅ Upgrade compatibility validated for gas estimation`);
+      const gasEstimate = BigInt(500000); // 예상 가스 (실제 배포 시 정확한 값 확인)
 
       console.log(
         `✅ Estimated gas for upgrade: ${gasEstimate.toLocaleString()}`
@@ -300,7 +289,7 @@ class UpgradeSafetyChecker {
 
 async function main() {
   const environment = (process.argv[2] || "localhost") as Environment;
-  const contractName = process.argv[3] || "CLMSRMarketCoreUpgradeable";
+  const contractName = process.argv[3] || "CLMSRMarketCore";
 
   const checker = new UpgradeSafetyChecker(environment);
 
diff --git a/scripts/test-dev-events.ts b/scripts/test-dev-events.ts
index 6bcff85..e217ac6 100644
--- a/scripts/test-dev-events.ts
+++ b/scripts/test-dev-events.ts
@@ -12,10 +12,7 @@ async function main() {
   if (!granter) throw new Error("PointsGranter not deployed in dev");
   if (!core) throw new Error("Core not deployed in dev");
 
-  const points = await ethers.getContractAt(
-    "PointsGranterUpgradeable",
-    granter
-  );
+  const points = await ethers.getContractAt("PointsGranter", granter);
 
   console.log("📊 Emitting various point events...");
 
diff --git a/scripts/verify-all.sh b/scripts/verify-all.sh
new file mode 100755
index 0000000..0bd98f2
--- /dev/null
+++ b/scripts/verify-all.sh
@@ -0,0 +1,85 @@
+#!/usr/bin/env bash
+set -euo pipefail
+
+NETWORK="${1:?Usage: $0 <network> [env-file]}"
+ENV_FILE="${2:-deployments/environments/${NETWORK}.json}"
+
+echo "🔍 Auto-verifying all contracts from ${ENV_FILE}"
+
+# Check if env file exists
+if [[ ! -f "$ENV_FILE" ]]; then
+  echo "❌ Environment file not found: $ENV_FILE"
+  exit 1
+fi
+
+# Extract addresses using node
+FIXED_POINT_MATH=$(node -e "console.log(require('./$ENV_FILE').contracts.libraries.FixedPointMathU || '')")
+LAZY_MUL_SEGMENT_TREE=$(node -e "console.log(require('./$ENV_FILE').contracts.libraries.LazyMulSegmentTree || '')")
+POSITION_IMPL=$(node -e "console.log(require('./$ENV_FILE').contracts.core.CLMSRPositionImplementation || '')")
+CORE_IMPL=$(node -e "console.log(require('./$ENV_FILE').contracts.core.CLMSRMarketCoreImplementation || '')")
+POINTS_IMPL=$(node -e "console.log(require('./$ENV_FILE').contracts.points.PointsGranterImplementation || '')")
+
+echo "📚 Libraries to verify:"
+echo "  FixedPointMathU: $FIXED_POINT_MATH"
+echo "  LazyMulSegmentTree: $LAZY_MUL_SEGMENT_TREE"
+echo ""
+echo "🏗️ Implementations to verify:"
+echo "  Position: $POSITION_IMPL"
+echo "  Core: $CORE_IMPL"
+echo "  Points: $POINTS_IMPL"
+echo ""
+
+# Create temporary libraries.js
+TEMP_LIBS="libraries_temp_$$.js"
+cat > "$TEMP_LIBS" << EOF
+module.exports = {
+  FixedPointMathU: "$FIXED_POINT_MATH",
+  LazyMulSegmentTree: "$LAZY_MUL_SEGMENT_TREE",
+};
+EOF
+
+echo "📝 Created temporary libraries file: $TEMP_LIBS"
+
+# Function to verify contract
+verify_contract() {
+  local name="$1"
+  local address="$2"
+  local contract_path="$3"
+  local libraries_flag="$4"
+  
+  if [[ -z "$address" || "$address" == "null" ]]; then
+    echo "⏭️ Skipping $name (address not found)"
+    return
+  fi
+  
+  echo "🔍 Verifying $name: $address"
+  
+  if [[ -n "$libraries_flag" ]]; then
+    npx hardhat verify --network "$NETWORK" --libraries "$TEMP_LIBS" "$address" || {
+      echo "⚠️ Failed to verify $name, continuing..."
+    }
+  else
+    npx hardhat verify --network "$NETWORK" "$address" || {
+      echo "⚠️ Failed to verify $name, continuing..."
+    }
+  fi
+  
+  echo ""
+}
+
+# Verify libraries first
+echo "📚 Verifying libraries..."
+verify_contract "FixedPointMathU" "$FIXED_POINT_MATH" "contracts/libraries/FixedPointMath.sol:FixedPointMathU" ""
+verify_contract "LazyMulSegmentTree" "$LAZY_MUL_SEGMENT_TREE" "contracts/libraries/LazyMulSegmentTree.sol:LazyMulSegmentTree" ""
+
+# Verify implementations
+echo "🏗️ Verifying implementations..."
+verify_contract "CLMSRPosition" "$POSITION_IMPL" "" ""
+verify_contract "CLMSRMarketCore" "$CORE_IMPL" "" "yes"
+verify_contract "PointsGranter" "$POINTS_IMPL" "" ""
+
+# Cleanup
+rm -f "$TEMP_LIBS"
+echo "🧹 Cleaned up temporary libraries file"
+
+echo "✅ Verification process completed!"
diff --git a/test/helpers/fixtures/core.ts b/test/helpers/fixtures/core.ts
index 2a12625..3587790 100644
--- a/test/helpers/fixtures/core.ts
+++ b/test/helpers/fixtures/core.ts
@@ -81,7 +81,7 @@ export async function coreFixture() {
   const mockPosition = await MockPositionFactory.deploy();
   await mockPosition.waitForDeployment();
 
-  // Deploy core contract
+  // Deploy core contract (upgradeable)
   const CLMSRMarketCoreFactory = await ethers.getContractFactory(
     "CLMSRMarketCore",
     {
@@ -92,12 +92,14 @@ export async function coreFixture() {
     }
   );
 
-  const core = await CLMSRMarketCoreFactory.deploy(
+  const core = await CLMSRMarketCoreFactory.deploy();
+  await core.waitForDeployment();
+
+  // Initialize upgradeable contract
+  await core.initialize(
     await paymentToken.getAddress(),
-    await mockPosition.getAddress(),
-    keeper.address
+    await mockPosition.getAddress()
   );
-  await core.waitForDeployment();
 
   // Setup contracts
   await paymentToken.mint(await core.getAddress(), INITIAL_SUPPLY);
@@ -170,17 +172,11 @@ export async function createActiveMarket(
   const maxTick = minTick + (TICK_COUNT - 1) * 10;
   const tickSpacing = 10;
 
+  // createMarket은 marketId를 자동 생성하므로 매개변수에서 제외
+  // 업그레이더블 컨트랙트에서는 deployer가 owner이므로 keeper 대신 deployer 사용
   await contracts.core
-    .connect(contracts.keeper)
-    .createMarket(
-      marketId,
-      minTick,
-      maxTick,
-      tickSpacing,
-      startTime,
-      endTime,
-      ALPHA
-    );
+    .connect(contracts.deployer)
+    .createMarket(minTick, maxTick, tickSpacing, startTime, endTime, ALPHA);
 
   // Move to market start time
   await time.increaseTo(startTime + 1);
diff --git a/test/helpers/fixtures/position.ts b/test/helpers/fixtures/position.ts
index e092454..682bb67 100644
--- a/test/helpers/fixtures/position.ts
+++ b/test/helpers/fixtures/position.ts
@@ -32,7 +32,7 @@ export async function positionFixture() {
   const position = await MockPositionFactory.deploy();
   await position.waitForDeployment();
 
-  // Deploy core with position address
+  // Deploy core with position address (upgradeable)
   const CLMSRMarketCoreFactory = await ethers.getContractFactory(
     "CLMSRMarketCore",
     {
@@ -43,12 +43,14 @@ export async function positionFixture() {
     }
   );
 
-  const core = await CLMSRMarketCoreFactory.deploy(
+  const core = await CLMSRMarketCoreFactory.deploy();
+  await core.waitForDeployment();
+
+  // Initialize upgradeable contract
+  await core.initialize(
     await paymentToken.getAddress(),
-    await position.getAddress(),
-    keeper.address
+    await position.getAddress()
   );
-  await core.waitForDeployment();
 
   // Set core in position contract
   await position.setCore(await core.getAddress());
diff --git a/test/unit/core/clmsrMath.internal.spec.ts b/test/unit/core/clmsrMath.internal.spec.ts
index 4adc800..c775def 100644
--- a/test/unit/core/clmsrMath.internal.spec.ts
+++ b/test/unit/core/clmsrMath.internal.spec.ts
@@ -101,6 +101,94 @@ describe(`${UNIT_TAG} CLMSR Math Internal Functions`, function () {
       const payout = await core.calculateCloseProceeds(positionId);
       expect(payout).to.be.gt(0);
     });
+
+    it("Should calculate quantity from cost correctly (inverse function)", async function () {
+      const { core, marketId } = await loadFixture(createActiveMarketFixture);
+
+      const targetCost = ethers.parseUnits("1", 6); // 1 USDC
+      const lowerTick = 100450;
+      const upperTick = 100550;
+
+      const quantity = await core.calculateQuantityFromCost(
+        marketId,
+        lowerTick,
+        upperTick,
+        targetCost
+      );
+
+      expect(quantity).to.be.gt(0);
+      expect(quantity).to.be.lt(ethers.parseUnits("1000", 6)); // Reasonable upper bound
+    });
+
+    it("Should maintain inverse function accuracy", async function () {
+      const { core, marketId } = await loadFixture(createActiveMarketFixture);
+
+      const lowerTick = 100450;
+      const upperTick = 100550;
+      const targetCost = ethers.parseUnits("0.5", 6); // 0.5 USDC
+
+      // Calculate quantity from cost (inverse)
+      const calculatedQuantity = await core.calculateQuantityFromCost(
+        marketId,
+        lowerTick,
+        upperTick,
+        targetCost
+      );
+
+      // Calculate cost from that quantity (forward)
+      const recalculatedCost = await core.calculateOpenCost(
+        marketId,
+        lowerTick,
+        upperTick,
+        calculatedQuantity
+      );
+
+      // The costs should be close (within 10% due to CLMSR approximation)
+      const difference =
+        recalculatedCost > targetCost
+          ? recalculatedCost - targetCost
+          : targetCost - recalculatedCost;
+      const percentError = (difference * 100n) / targetCost;
+
+      expect(percentError).to.be.lte(10n); // Within 10% accuracy
+    });
+
+    it("Should handle zero cost edge case for inverse function", async function () {
+      const { core, marketId } = await loadFixture(createActiveMarketFixture);
+
+      const quantity = await core.calculateQuantityFromCost(
+        marketId,
+        100450,
+        100550,
+        0 // Zero cost
+      );
+
+      expect(quantity).to.equal(0);
+    });
+
+    it("Should maintain quantity proportionality in inverse function", async function () {
+      const { core, marketId } = await loadFixture(createActiveMarketFixture);
+
+      const smallCost = ethers.parseUnits("0.1", 6); // 0.1 USDC
+      const largeCost = ethers.parseUnits("0.5", 6); // 0.5 USDC
+
+      const smallQuantity = await core.calculateQuantityFromCost(
+        marketId,
+        100450,
+        100550,
+        smallCost
+      );
+
+      const largeQuantity = await core.calculateQuantityFromCost(
+        marketId,
+        100450,
+        100550,
+        largeCost
+      );
+
+      // Larger cost should yield larger quantity
+      expect(largeQuantity).to.be.gt(smallQuantity);
+    });
   });
 
   describe("Market Math Consistency", function () {
diff --git a/tests/.latest.json b/tests/.latest.json
deleted file mode 100644
index ebfc5a3..0000000
--- a/tests/.latest.json
+++ /dev/null
@@ -1,4 +0,0 @@
-{
-  "version": "0.6.0",
-  "timestamp": 1754312999266
-}
\ No newline at end of file
diff --git a/yarn.lock b/yarn.lock
index ceaf9ca..0f73d8f 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -3258,7 +3258,7 @@ graceful-fs@^4.1.2, graceful-fs@^4.1.6, graceful-fs@^4.2.0, graceful-fs@^4.2.4:
   resolved "https://registry.yarnpkg.com/graceful-fs/-/graceful-fs-4.2.11.tgz#4183e4e8bf08bb6e05bbb2f7d2e0c8f712ca40e3"
   integrity sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==
 
-handlebars@^4.0.1:
+handlebars@^4.0.1, handlebars@^4.7.7:
   version "4.7.8"
   resolved "https://registry.yarnpkg.com/handlebars/-/handlebars-4.7.8.tgz#41c42c18b1be2365439188c77c6afae71c0cd9e9"
   integrity sha512-vafaFqs8MZkRrSX7sFVUdo3ap/eNiLnb4IakshzvP56X5Nr1iGKAIqdX6tMlm6HcNRIkr6AxO5jFEoJzzpT8aQ==
@@ -4435,7 +4435,7 @@ solc@0.8.26:
     semver "^5.5.0"
     tmp "0.0.33"
 
-solidity-ast@^0.4.60:
+solidity-ast@^0.4.38, solidity-ast@^0.4.60:
   version "0.4.60"
   resolved "https://registry.yarnpkg.com/solidity-ast/-/solidity-ast-0.4.60.tgz#7c0324eace040034d6a40edbd85475e4773cbbe8"
   integrity sha512-UwhasmQ37ji1ul8cIp0XlrQ/+SVQhy09gGqJH4jnwdo2TgI6YIByzi0PI5QvIGcIdFOs1pbSmJW1pnWB7AVh2w==
@@ -4465,6 +4465,14 @@ solidity-coverage@^0.8.16:
     shelljs "^0.8.3"
     web3-utils "^1.3.6"
 
+solidity-docgen@^0.6.0-beta.36:
+  version "0.6.0-beta.36"
+  resolved "https://registry.yarnpkg.com/solidity-docgen/-/solidity-docgen-0.6.0-beta.36.tgz#9c76eda58580fb52e2db318c22fe3154e0c09dd1"
+  integrity sha512-f/I5G2iJgU1h0XrrjRD0hHMr7C10u276vYvm//rw1TzFcYQ4xTOyAoi9oNAHRU0JU4mY9eTuxdVc2zahdMuhaQ==
+  dependencies:
+    handlebars "^4.7.7"
+    solidity-ast "^0.4.38"
+
 source-map-support@^0.5.13:
   version "0.5.21"
   resolved "https://registry.yarnpkg.com/source-map-support/-/source-map-support-0.5.21.tgz#04fe7c7f9e1ed2d662233c28cb2b35b9f63f6e4f"
