type EmergencyPaused @entity(immutable: true) {
  id: Bytes!
  by: Bytes! # address
  reason: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EmergencyUnpaused @entity(immutable: true) {
  id: Bytes!
  by: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarketCreated @entity(immutable: true) {
  id: Bytes!
  marketId: BigInt! # uint256
  minTick: BigInt! # int256
  maxTick: BigInt! # int256
  tickSpacing: BigInt! # int256
  startTimestamp: BigInt! # uint64
  endTimestamp: BigInt! # uint64
  numTicks: BigInt! # uint32 (calculated from tick range)
  liquidityParameter: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarketSettled @entity(immutable: true) {
  id: Bytes!
  marketId: BigInt! # uint256
  settlementLowerTick: BigInt! # int256
  settlementUpperTick: BigInt! # int256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PositionClaimed @entity(immutable: true) {
  id: Bytes!
  positionId: BigInt! # uint256
  trader: Bytes! # address
  payout: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PositionClosed @entity(immutable: true) {
  id: Bytes!
  positionId: BigInt! # uint256
  trader: Bytes! # address
  proceeds: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PositionDecreased @entity(immutable: true) {
  id: Bytes!
  positionId: BigInt! # uint256
  trader: Bytes! # address
  sellQuantity: BigInt! # uint128
  newQuantity: BigInt! # uint128
  proceeds: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PositionIncreased @entity(immutable: true) {
  id: Bytes!
  positionId: BigInt! # uint256
  trader: Bytes! # address
  additionalQuantity: BigInt! # uint128
  newQuantity: BigInt! # uint128
  cost: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PositionOpened @entity(immutable: true) {
  id: Bytes!
  positionId: BigInt! # uint256
  trader: Bytes! # address
  marketId: BigInt! # uint256
  lowerTick: BigInt! # int256
  upperTick: BigInt! # int256
  quantity: BigInt! # uint128
  cost: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RangeFactorApplied @entity(immutable: true) {
  id: Bytes!
  marketId: BigInt! # uint256
  lo: BigInt! # int256
  hi: BigInt! # int256
  factor: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# 마켓의 현재 상태
type Market @entity(immutable: false) {
  id: String! # marketId
  marketId: BigInt!
  minTick: BigInt! # int256 - 최소 틱 값
  maxTick: BigInt! # int256 - 최대 틱 값
  tickSpacing: BigInt! # int256 - 틱 간격
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  numTicks: BigInt! # uint32 - 계산된 틱 개수
  liquidityParameter: BigInt!
  isSettled: Boolean!
  settlementLowerTick: BigInt # int256
  settlementUpperTick: BigInt # int256
  lastUpdated: BigInt!
  ticks: [TickState!]! @derivedFrom(field: "market")
}

# 각 틱의 현재 factor 상태 (실제 틱 값 기준)
type TickState @entity(immutable: false) {
  id: String! # marketId-tickValue
  market: Market!
  tickValue: BigInt! # int256 - 실제 틱 값 (예: 100500)
  tickIndex: BigInt! # uint32 - 세그먼트 트리 인덱스 (0-based)
  currentFactor: BigDecimal! # 현재 누적 factor 값
  lastUpdated: BigInt!
  updateCount: BigInt! # 업데이트된 횟수
}

# 틱 범위(구간)별 현재 상태 - 실제 거래 단위
type TickRange @entity(immutable: false) {
  id: String! # marketId-lowerTick-upperTick
  market: Market!
  lowerTick: BigInt! # int256 - 실제 틱 값
  upperTick: BigInt! # int256 - 실제 틱 값
  currentFactor: BigDecimal! # 현재 누적 factor 값
  lastUpdated: BigInt!
  updateCount: BigInt! # 업데이트된 횟수
  totalVolume: BigDecimal! # 총 거래량
}
