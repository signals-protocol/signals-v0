type EmergencyPaused @entity(immutable: true) {
  id: Bytes!
  by: Bytes! # address
  reason: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EmergencyUnpaused @entity(immutable: true) {
  id: Bytes!
  by: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarketCreated @entity(immutable: true) {
  id: Bytes!
  marketId: BigInt! # uint256
  minTick: BigInt! # int256
  maxTick: BigInt! # int256
  tickSpacing: BigInt! # int256
  startTimestamp: BigInt! # uint64
  endTimestamp: BigInt! # uint64
  numBins: BigInt! # uint32 (calculated bin count from tick range)
  liquidityParameter: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarketSettled @entity(immutable: true) {
  id: Bytes!
  marketId: BigInt! # uint256
  settlementTick: BigInt! # int256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PositionClaimed @entity(immutable: true) {
  id: Bytes!
  positionId: BigInt! # uint256
  trader: Bytes! # address
  payout: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PositionClosed @entity(immutable: true) {
  id: Bytes!
  positionId: BigInt! # uint256
  trader: Bytes! # address
  proceeds: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PositionDecreased @entity(immutable: true) {
  id: Bytes!
  positionId: BigInt! # uint256
  trader: Bytes! # address
  sellQuantity: BigInt! # uint128
  newQuantity: BigInt! # uint128
  proceeds: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PositionIncreased @entity(immutable: true) {
  id: Bytes!
  positionId: BigInt! # uint256
  trader: Bytes! # address
  additionalQuantity: BigInt! # uint128
  newQuantity: BigInt! # uint128
  cost: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PositionOpened @entity(immutable: true) {
  id: Bytes!
  positionId: BigInt! # uint256
  trader: Bytes! # address
  marketId: BigInt! # uint256
  lowerTick: BigInt! # int256
  upperTick: BigInt! # int256
  quantity: BigInt! # uint128
  cost: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RangeFactorApplied @entity(immutable: true) {
  id: Bytes!
  marketId: BigInt! # uint256
  lo: BigInt! # int256
  hi: BigInt! # int256
  factor: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# 마켓의 현재 상태
type Market @entity(immutable: false) {
  id: String! # marketId
  marketId: BigInt!
  minTick: BigInt! # int256 - 최소 틱 값
  maxTick: BigInt! # int256 - 최대 틱 값
  tickSpacing: BigInt! # int256 - 틱 간격
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  numBins: BigInt! # uint32 - 계산된 빈 개수
  liquidityParameter: BigInt!
  isSettled: Boolean!
  settlementTick: BigInt # int256
  lastUpdated: BigInt!
  # 관계 필드들
  bins: [BinState!]! @derivedFrom(field: "market")
  distribution: MarketDistribution @derivedFrom(field: "market")
}

# Segment Tree의 각 bin별 현재 상태
type BinState @entity(immutable: false) {
  id: String! # marketId-binIndex
  market: Market!
  binIndex: BigInt! # uint32 - segment tree에서의 0-based 인덱스
  lowerTick: BigInt! # int256 - 이 bin이 커버하는 실제 틱 범위 시작
  upperTick: BigInt! # int256 - 이 bin이 커버하는 실제 틱 범위 끝 (exclusive)
  currentFactor: BigInt! # 현재 누적 factor 값 (WAD 형식, 18 decimals)
  lastUpdated: BigInt!
  updateCount: BigInt! # 업데이트된 횟수
  totalVolume: BigInt! # 이 bin에서 발생한 총 거래량 (6 decimals, raw USDC)
}

# 마켓별 전체 분포 데이터
type MarketDistribution @entity(immutable: false) {
  id: String! # marketId
  market: Market!
  totalBins: BigInt! # 총 빈 개수
  # LMSR 계산용 데이터 (WAD 형식, 18 decimals)
  totalSum: BigInt! # 전체 segment tree의 sum (Σ exp(q_i/α))
  # 분포 통계 (WAD 형식, 18 decimals)
  minFactor: BigInt! # 최소 factor 값
  maxFactor: BigInt! # 최대 factor 값
  avgFactor: BigInt! # 평균 factor 값
  totalVolume: BigInt! # 전체 거래량 (6 decimals, raw USDC)
  # 배열 형태 데이터
  binFactors: [String!]! # bin factor 배열 (WAD 형식, 18 decimals)
  binVolumes: [String!]! # 모든 bin의 volume 배열 (6 decimals, raw USDC)
  tickRanges: [String!]! # 틱 범위 문자열 배열 ["100500-100600", "100600-100700", ...]
  # 메타데이터
  lastSnapshotAt: BigInt! # 마지막 스냅샷 시점
  distributionHash: String! # 분포 데이터의 해시 (변화 감지용)
  version: BigInt! # 버전 번호 (업데이트 추적용)
}

# 사용자별 포지션 현황 (실시간 업데이트)
type UserPosition @entity(immutable: false) {
  id: String! # positionId
  positionId: BigInt!
  user: Bytes! # address
  stats: UserStats! # reference to UserStats (리네이밍)
  market: Market!
  lowerTick: BigInt! # int256
  upperTick: BigInt! # int256
  currentQuantity: BigInt! # 현재 보유량 (6 decimals, raw USDC)
  totalCostBasis: BigInt! # 총 매수 비용 (6 decimals, raw USDC)
  averageEntryPrice: BigInt! # 평균 진입가 (6 decimals, raw cost per raw quantity)
  totalQuantityBought: BigInt! # 총 매수량 (6 decimals, raw USDC)
  totalQuantitySold: BigInt! # 총 매도량 (6 decimals, raw USDC)
  totalProceeds: BigInt! # 총 매도 수익 (6 decimals, raw USDC)
  realizedPnL: BigInt! # 실현 손익 (6 decimals, raw USDC, signed)
  isActive: Boolean! # 포지션이 활성 상태인지
  createdAt: BigInt!
  lastUpdated: BigInt!
}

# 개별 거래 기록 (매수/매도)
type Trade @entity(immutable: true) {
  id: Bytes! # transactionHash-logIndex
  userPosition: String! # UserPosition ID
  user: Bytes! # address
  market: Market!
  positionId: BigInt!
  type: TradeType! # OPEN, INCREASE, DECREASE, CLOSE, CLAIM
  lowerTick: BigInt! # int256
  upperTick: BigInt! # int256
  quantity: BigInt! # 거래량 (6 decimals, raw USDC, DECREASE/CLOSE는 음수)
  costOrProceeds: BigInt! # 비용 또는 수익 (6 decimals, raw USDC)
  price: BigInt! # 단위당 가격 (6 decimals, raw USDC)
  gasUsed: BigInt! # 가스 사용량
  gasPrice: BigInt! # 가스 가격
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

enum TradeType {
  OPEN
  INCREASE
  DECREASE
  CLOSE
  CLAIM
}

# 사용자별 전체 통계 및 PnL
type UserStats @entity(immutable: false) {
  id: Bytes! # user address
  user: Bytes! # address
  totalTrades: BigInt! # 총 거래 횟수 (OPEN, INCREASE, DECREASE, CLOSE만 포함, CLAIM 제외)
  totalVolume: BigInt! # 총 거래 금액 (매수: cost, 매도: proceeds) (6 decimals, raw USDC)
  totalCosts: BigInt! # 총 매수 비용 (6 decimals, raw USDC)
  totalProceeds: BigInt! # 총 매도 수익 (6 decimals, raw USDC)
  totalRealizedPnL: BigInt! # 총 실현 손익 (6 decimals, raw USDC, signed)
  totalGasFees: BigInt! # 총 가스 비용 (wei 단위)
  netPnL: BigInt! # 순 손익 (6 decimals, raw USDC, signed)
  activePositionsCount: BigInt! # 활성 포지션 수
  winningTrades: BigInt! # 수익 거래 수 (만료까지 기다린 claim만 해당)
  losingTrades: BigInt! # 손실 거래 수 (만료까지 기다린 claim만 해당)
  winRate: BigDecimal! # 승률 (0.0 ~ 1.0 퍼센트, 만료까지 기다린 것들만 계산)
  avgTradeSize: BigInt! # 평균 거래 크기 (총 거래 금액 / 총 거래 횟수) (6 decimals, raw USDC)
  firstTradeAt: BigInt! # 첫 거래 시점
  lastTradeAt: BigInt! # 마지막 거래 시점
  positions: [UserPosition!]! @derivedFrom(field: "stats")
}

# 시장별 전체 통계
type MarketStats @entity(immutable: false) {
  id: String! # marketId
  market: Market!
  totalVolume: BigInt! # 총 거래 금액 (매수: cost, 매도: proceeds) (6 decimals, raw USDC)
  totalTrades: BigInt! # 총 거래 수 (OPEN, INCREASE, DECREASE, CLOSE만 포함, CLAIM 제외)
  totalFees: BigInt! # 총 수수료 (6 decimals, raw USDC)
  highestPrice: BigInt! # 최고가 (6 decimals, raw cost per raw quantity)
  lowestPrice: BigInt! # 최저가 (6 decimals, raw cost per raw quantity)
  currentPrice: BigInt! # 현재가 (마지막 거래 가격, 6 decimals raw)
  priceChange24h: BigDecimal! # 24시간 가격 변화율 (퍼센트)
  volume24h: BigInt! # 24시간 거래량 (6 decimals, raw USDC)
  lastUpdated: BigInt!
}
