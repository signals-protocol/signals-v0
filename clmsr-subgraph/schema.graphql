# 마켓의 현재 상태
type Market @entity(immutable: false) {
  id: String! # marketId
  marketId: BigInt!
  minTick: BigInt! # int256 - 최소 틱 값
  maxTick: BigInt! # int256 - 최대 틱 값
  tickSpacing: BigInt! # int256 - 틱 간격
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  numBins: BigInt! # uint32 - 계산된 빈 개수
  liquidityParameter: BigInt!
  isSettled: Boolean!
  settlementValue: BigInt # int256 (6 decimals, original value)
  settlementTick: BigInt # int256 (calculated from settlementValue)
  lastUpdated: BigInt!
  # 관계 필드들
  bins: [BinState!]! @derivedFrom(field: "market")
}

# Segment Tree의 각 bin별 현재 상태
type BinState @entity(immutable: false) {
  id: String! # marketId-binIndex
  market: Market!
  binIndex: BigInt! # uint32 - segment tree에서의 0-based 인덱스
  lowerTick: BigInt! # int256 - 이 bin이 커버하는 실제 틱 범위 시작
  upperTick: BigInt! # int256 - 이 bin이 커버하는 실제 틱 범위 끝 (exclusive)
  currentFactor: BigInt! # 현재 누적 factor 값 (WAD 형식, 18 decimals)
  lastUpdated: BigInt!
  updateCount: BigInt! # 업데이트된 횟수
  totalVolume: BigInt! # 이 bin에서 발생한 총 거래량 (6 decimals, raw USDC)
}

# 사용자별 포지션 현황 (실시간 업데이트)
type UserPosition @entity(immutable: false) {
  id: String! # positionId
  positionId: BigInt!
  user: Bytes! # address
  stats: UserStats! # reference to UserStats (리네이밍)
  market: Market!
  lowerTick: BigInt! # int256
  upperTick: BigInt! # int256
  currentQuantity: BigInt! # 현재 보유량 (6 decimals, raw USDC)
  totalCostBasis: BigInt! # 총 매수 비용 (6 decimals, raw USDC)
  averageEntryPrice: BigInt! # 평균 진입가 (6 decimals, raw cost per raw quantity)
  totalQuantityBought: BigInt! # 총 매수량 (6 decimals, raw USDC)
  totalQuantitySold: BigInt! # 총 매도량 (6 decimals, raw USDC)
  totalProceeds: BigInt! # 총 매도 수익 (6 decimals, raw USDC)
  realizedPnL: BigInt! # 실현 손익 (6 decimals, raw USDC, signed)
  outcome: PositionOutcome! # 포지션 상태 (OPEN/CLOSED/WIN/LOSS)
  isClaimed: Boolean! # 승리 포지션 수령 여부
  createdAt: BigInt!
  lastUpdated: BigInt!
  activityRemaining: BigInt! # OPEN+INCREASE 누적, DECREASE/CLOSE/CLAIM로 차감 (6 decimals)
  weightedEntryTime: BigInt! # 모든 남은 수량의 가중 평균 진입 시각
}

# 개별 거래 기록 (매수/매도)
type Trade @entity(immutable: true) {
  id: Bytes! # transactionHash-logIndex
  userPosition: String! # UserPosition ID
  user: Bytes! # address
  market: Market!
  positionId: BigInt!
  type: TradeType! # OPEN, INCREASE, DECREASE, CLOSE, CLAIM
  lowerTick: BigInt! # int256
  upperTick: BigInt! # int256
  quantity: BigInt! # 거래량 (6 decimals, raw USDC, DECREASE/CLOSE는 음수)
  costOrProceeds: BigInt! # 비용 또는 수익 (6 decimals, raw USDC)
  price: BigInt! # 단위당 가격 (6 decimals, raw USDC)
  gasUsed: BigInt! # 가스 사용량
  gasPrice: BigInt! # 가스 가격
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  activityPt: BigInt! # OPEN·INCREASE에서 발생하는 Activity 포인트 (6 decimals)
  performancePt: BigInt! # DECREASE·CLOSE·SETTLE에서 PnL 기반 Performance 포인트 (6 decimals)
  riskBonusPt: BigInt! # DECREASE·CLOSE·SETTLE에서 조건 충족 시 Risk Bonus 포인트 (6 decimals)
}

enum TradeType {
  OPEN
  INCREASE
  DECREASE
  CLOSE
  SETTLE
}

enum PositionOutcome {
  OPEN
  CLOSED
  WIN
  LOSS
}

# 사용자별 전체 통계 및 PnL
type UserStats @entity(immutable: false) {
  id: Bytes! # user address
  user: Bytes! # address
  totalTrades: BigInt! # 총 거래 횟수 (OPEN, INCREASE, DECREASE, CLOSE만 포함, CLAIM 제외)
  totalVolume: BigInt! # 총 거래 금액 (매수: cost, 매도: proceeds) (6 decimals, raw USDC)
  totalCosts: BigInt! # 총 매수 비용 (6 decimals, raw USDC)
  totalProceeds: BigInt! # 총 매도 수익 (6 decimals, raw USDC)
  totalRealizedPnL: BigInt! # 총 실현 손익 (6 decimals, raw USDC, signed)
  totalGasFees: BigInt! # 총 가스 비용 (wei 단위)
  netPnL: BigInt! # 순 손익 (6 decimals, raw USDC, signed)
  activePositionsCount: BigInt! # 활성 포지션 수
  winningTrades: BigInt! # 수익 거래 수 (만료까지 기다린 claim만 해당)
  losingTrades: BigInt! # 손실 거래 수 (만료까지 기다린 claim만 해당)
  winRate: BigDecimal! # 승률 (0.0 ~ 1.0 퍼센트, 만료까지 기다린 것들만 계산)
  avgTradeSize: BigInt! # 평균 거래 크기 (총 거래 금액 / 총 거래 횟수) (6 decimals, raw USDC)
  firstTradeAt: BigInt! # 첫 거래 시점
  lastTradeAt: BigInt! # 마지막 거래 시점
  totalPoints: BigInt! # 사용자 누적 포인트 잔고 (6 decimals)
  activityPoints: BigInt! # 누적 Activity 포인트 (OPEN, INCREASE에서 발생) (6 decimals)
  performancePoints: BigInt! # 누적 Performance 포인트 (DECREASE, CLOSE, SETTLE에서 PnL 기반) (6 decimals)
  riskBonusPoints: BigInt! # 누적 Risk Bonus 포인트 (DECREASE, CLOSE, SETTLE에서 조건 충족 시) (6 decimals)
  activityPointsToday: BigInt! # 오늘 획득한 Activity 포인트 횟수 (0-3, UTC 기준)
  lastActivityDay: BigInt! # 마지막 Activity 포인트 획득 일자 (UTC 기준 timestamp를 일 단위로 floor)
  positions: [UserPosition!]! @derivedFrom(field: "stats")
}

# 시장별 전체 통계
type MarketStats @entity(immutable: false) {
  id: String! # marketId
  market: Market!
  totalVolume: BigInt! # 총 거래 금액 (매수: cost, 매도: proceeds) (6 decimals, raw USDC)
  totalTrades: BigInt! # 총 거래 수 (OPEN, INCREASE, DECREASE, CLOSE만 포함, CLAIM 제외)
  totalFees: BigInt! # 총 수수료 (6 decimals, raw USDC)
  highestPrice: BigInt! # 최고가 (6 decimals, raw cost per raw quantity)
  lowestPrice: BigInt! # 최저가 (6 decimals, raw cost per raw quantity)
  currentPrice: BigInt! # 현재가 (마지막 거래 가격, 6 decimals raw)
  priceChange24h: BigDecimal! # 24시간 가격 변화율 (퍼센트)
  volume24h: BigInt! # 24시간 거래량 (6 decimals, raw USDC)
  lastUpdated: BigInt!

  # === 마켓 PnL & 리스크 관리 ===
  # 베팅 단계 수익/비용
  totalBetReceived: BigInt! # 마켓이 받은 총 베팅 금액 (OPEN + INCREASE cost) (6 decimals, raw USDC)
  totalBetPaidOut: BigInt! # 마켓이 지급한 총 베팅 수익 (DECREASE + CLOSE proceeds) (6 decimals, raw USDC)
  bettingNetIncome: BigInt! # 베팅 단계 순수익 (받은 금액 - 지급 금액) (6 decimals, raw USDC, signed)
  # 정산 단계 손실 (Claim 예상 손실)
  totalSettlementPayout: BigInt! # 정산 후 총 지급 예정 금액 (PositionSettled에서 WIN 시 payout 합계) (6 decimals, raw USDC)
  totalClaimedPayout: BigInt! # 실제 청구된 총 금액 (PositionClaimed payout 합계) (6 decimals, raw USDC)
  unclaimedPayout: BigInt! # 아직 청구되지 않은 금액 (settlementPayout - claimedPayout) (6 decimals, raw USDC)
  # 전체 마켓 손익
  totalMarketPnL: BigInt! # 전체 마켓 순손익 (bettingNetIncome - totalSettlementPayout) (6 decimals, raw USDC, signed)
  realizedMarketPnL: BigInt! # 실현된 마켓 손익 (bettingNetIncome - totalClaimedPayout) (6 decimals, raw USDC, signed)
}
